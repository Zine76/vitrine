// --- begin <script> ---

        // ===== CONFIGURATION =====
        const API_BASE_URL = 'http://localhost:7070';
        let isLoading = false;
        let messageCount = 0;
        let messagesContainer;
        let suggestionsContainer;
        let latestRAGContext = null;
        let isConnected = false;
        const problemInput = document.getElementById('problemInput');
        
        // ===== IMAGE SEA2 =====
        function updateSEALogo(imgElement) {
            if (imgElement) {
                console.log('üñºÔ∏è [UpdateSEALogo] Tentative de chargement image SEA pour:', imgElement.id || 'sans ID');
                
                // Essayer d'abord le chemin local
                imgElement.src = 'assets/SEA2.png';
                
                imgElement.onerror = function() {
                    console.log('‚ùå [UpdateSEALogo] √âchec image locale, essai serveur distant');
                    this.src = 'http://132.208.182.76:7070/api/assets/SEA2.png';
                    
                    this.onerror = function() {
                        console.log('‚ùå [UpdateSEALogo] √âchec serveur distant, utilisation fallback');
                        // Fallback vers image directement dans le dossier Annexe
                        this.src = './SEA2.png';
                        
                        this.onerror = function() {
                            console.log('‚ùå [UpdateSEALogo] Tous les chemins √©chou√©s, image vide');
                        };
                    };
                };
                
                imgElement.onload = function() {
                    console.log('‚úÖ [UpdateSEALogo] Image SEA charg√©e avec succ√®s depuis:', this.src);
                };
            } else {
                console.log('‚ùå [UpdateSEALogo] √âl√©ment image non trouv√©');
            }
        }
        
        // ‚úÖ NOUVEAU : Gestion des tickets de session
        let sessionTickets = [];

        // ===== CACHE DE SALLE PERSISTANT =====
        window.roomCache = {
            room: null,
            pavilion: null,
            roomNumber: null,
            isSet: false
        };

        // ===== DOM ELEMENTS =====
        const landingPage = document.getElementById('landingPage');
        const assistantPage = document.getElementById('assistantPage');
        const roomInput = document.getElementById('roomInput');
        const confirmRoomBtn = document.getElementById('confirmRoomBtn');
        const currentRoomDisplay = document.getElementById('currentRoomDisplay');

        // ===== FONCTIONS DE GESTION DE LA SALLE =====

        /**
         * Gestion des touches pour la saisie de salle
         */
        function handleRoomKeyPress(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                confirmRoom();
            }
        }

        /**
         * D√©finir un exemple de salle
         */
        function setRoomExample(roomName) {
            roomInput.value = roomName;
            roomInput.focus();
        }

        /**
         * Confirmer la salle et passer √† l'assistant
         */
        function confirmRoom() {
            const roomName = roomInput.value.trim();
            
            if (!roomName) {
                showRoomError('‚ö†Ô∏è Veuillez entrer un num√©ro de salle');
                return;
            }

            // Valider le format de salle
            if (!isValidRoomFormat(roomName)) {
                showRoomError('‚ö†Ô∏è Format non reconnu. Exemples : A-1750, B-2500, SH-R200');
                return;
            }

            // Extraire les informations de salle
            const roomInfo = parseRoomInfo(roomName);
            
            // Stocker dans le cache persistant
            setRoomCache(roomInfo);
            
            // Passer √† l'assistant
            showAssistant();
        }

        /**
         * Valider le format de salle
         */
        function isValidRoomFormat(roomName) {
            const roomPattern = /^([a-zA-Z]{1,2})-?([a-zA-Z]?\d{3,4})$/i;
            return roomPattern.test(roomName);
        }

        /**
         * Parser les informations de salle
         */
        function parseRoomInfo(roomName) {
            const roomMatch = roomName.match(/^([a-zA-Z]{1,2})-?([a-zA-Z]?\d{3,4})$/i);
            if (roomMatch) {
                const pavilion = roomMatch[1].toUpperCase();
                const roomNumber = roomMatch[2].toUpperCase();
                const fullRoom = `${pavilion}-${roomNumber}`;
                
                return {
                    fullRoom: fullRoom,
                    pavilion: pavilion,
                    roomNumber: roomNumber
                };
            }
            return null;
        }

        /**
         * D√©finir le cache de salle (version de base)
         */
        function setRoomCache(roomInfo) {
            window.roomCache = {
                room: roomInfo.fullRoom,
                pavilion: roomInfo.pavilion,
                roomNumber: roomInfo.roomNumber,
                isSet: true,
                podioInfo: null // Sera enrichi par setRoomCacheWithPodio
            };

            console.log(`üè¢ [RoomCache] Salle d√©finie : ${roomInfo.fullRoom}, Pavillon : ${roomInfo.pavilion}`);
            
            // üÜï Enrichir automatiquement avec infos Podio
            enrichRoomWithPodioInfo(roomInfo.fullRoom);
        }

        /**
         * Enrichir le cache de salle avec les informations Podio
         */
        async function enrichRoomWithPodioInfo(roomName) {
            try {
                console.log(`üè¢ [PodioEnrich] Enrichissement Podio pour: ${roomName}`);
                
                const podioInfo = await podioRoomCache.getRoomInfo(roomName);
                
                if (podioInfo && window.roomCache && window.roomCache.isSet) {
                    // üÜï Enrichir le cache existant
                    window.roomCache.podioInfo = podioInfo;
                    
                    console.log(`‚úÖ [PodioEnrich] Cache enrichi:`, podioInfo);
                    
                    // üé® Mettre √† jour l'affichage
                    updateRoomDisplayWithPodio(roomName, podioInfo);
                } else {
                    console.warn(`‚ö†Ô∏è [PodioEnrich] Pas d'infos Podio pour ${roomName} - affichage normal`);
                }
                
            } catch (error) {
                console.warn(`‚ùå [PodioEnrich] Erreur enrichissement pour ${roomName}:`, error.message);
                // Degradation graceful - l'affichage normal continue
            }
        }

        /**
         * Mettre √† jour l'affichage de la salle avec les infos Podio
         */
        function updateRoomDisplayWithPodio(roomName, podioInfo = null) {
            const currentRoomDisplay = document.getElementById('currentRoomDisplay');
            if (!currentRoomDisplay) return;
            
            if (podioInfo) {
                // üÜï Affichage enrichi avec infos Podio
                currentRoomDisplay.innerHTML = `
                    <strong>${roomName}</strong>
                    <small style="display: block; color: #64748b; font-size: 0.85rem; margin-top: 0.25rem; line-height: 1.3;">
                        üìç ${podioInfo.pavillon} - ${podioInfo.bassin}<br>
                        üèõÔ∏è ${podioInfo.type} | üë• ${podioInfo.capacite}
                    </small>
                `;
                console.log(`üé® [RoomDisplay] Affichage enrichi pour ${roomName}`);
            } else {
                // üîÑ Affichage normal (fallback)
                currentRoomDisplay.textContent = roomName;
                console.log(`üé® [RoomDisplay] Affichage normal pour ${roomName}`);
            }
        }

        /**
         * Afficher l'assistant avec la salle en cache
         */
        function showAssistant() {
            if (!window.roomCache.isSet) {
                console.error('Tentative d\'affichage assistant sans salle en cache');
                return;
            }

            // Masquer la landing page
            landingPage.style.display = 'none';
            
            // Afficher l'assistant
            assistantPage.style.display = 'block';
            
            // Mettre √† jour les affichages de salle avec infos Podio si disponibles
            updateRoomDisplayWithPodio(window.roomCache.room, window.roomCache.podioInfo);
            
            // Initialiser la connexion au backend
            checkConnection().then(connected => {
                console.log(`üîó Connexion backend: ${connected ? 'OK' : '√âCHEC'}`);
            });
            
            // Focus sur l'input principal
            setTimeout(() => {
                // Focus sur la premi√®re palette
                const firstPalette = document.querySelector('.palette');
                if (firstPalette) {
                    firstPalette.focus();
                }
            }, 300);
        }

        /**
         * Changer de salle (retour √† la landing page)
         */
        function changeRoom() {
            // R√©initialiser le cache
            window.roomCache.isSet = false;
            
            // Nettoyer les inputs
            roomInput.value = '';
            
            // Retour √† la landing page
            assistantPage.style.display = 'none';
            landingPage.style.display = 'flex';
            
            // Focus sur l'input de salle
            setTimeout(() => {
                roomInput.focus();
            }, 300);
            
            console.log('üè† Retour √† la landing page (changer de salle)');
        }

        /**
         * Afficher une erreur de salle
         */
        function showRoomError(message) {
            // Chercher un message d'erreur existant
            let errorDiv = document.querySelector('.room-error-message');
            
            if (!errorDiv) {
                // Cr√©er le message d'erreur
                errorDiv = document.createElement('div');
                errorDiv.className = 'room-error-message';
                errorDiv.style.cssText = `
                    background: rgba(239, 68, 68, 0.1);
                    border: 1px solid rgba(239, 68, 68, 0.3);
                    color: #ef4444;
                    padding: 0.75rem;
                    border-radius: 8px;
                    margin-top: 1rem;
                    text-align: center;
                    font-weight: 500;
                `;
                
                // Ins√©rer apr√®s le container de saisie
                const container = document.querySelector('.room-input-container');
                container.parentNode.insertBefore(errorDiv, container.nextSibling);
            }
            
            errorDiv.textContent = message;
            
            // Supprimer apr√®s 3 secondes
            setTimeout(() => {
                if (errorDiv && errorDiv.parentNode) {
                    errorDiv.remove();
                }
            }, 3000);
        }

        /**
         * Obtenir la salle courante depuis le cache
         */
        function getCurrentRoom() {
            return window.roomCache.isSet ? window.roomCache.room : null;
        }

        /**
         * V√©rifie si une salle est d√©finie
         */
        function hasRoomSet() {
            return window.roomCache && window.roomCache.isSet;
        }

        /**
         * Met √† jour les suggestions
         */
        function updateSuggestions(suggestions) {
            const suggestionsContainer = document.getElementById('suggestions');
            if (suggestionsContainer && suggestions.length > 0) {
                suggestionsContainer.innerHTML = suggestions.map(suggestion => 
                    `<button class="suggestion-btn" onclick="sendExampleMessage('${suggestion}')">${suggestion}</button>`
                ).join('');
            }
        }

        /**
         * Met √† jour le bouton d'envoi
         */
        function updateSendButton(loading) {
            const sendBtn = document.getElementById('sendBtn');
            if (!sendBtn) return;
            
            if (loading) {
                sendBtn.disabled = true;
                sendBtn.innerHTML = '‚è≥ Traitement...';
            } else if (!isConnected) {
                sendBtn.disabled = true;
                sendBtn.innerHTML = '‚ö†Ô∏è Syst√®me non pr√™t';
            } else {
                sendBtn.disabled = false;
                sendBtn.innerHTML = 'üì§ Signaler';
            }
        }

        // ‚úÖ NOUVEAU : Fonction pour d√©tecter les salles mentionn√©es dans les messages
        function detectRoomInMessage(message) {
            // Pattern pour d√©tecter les salles (ex: A-1750, B-2500, J-2430)
            const roomPattern = /\b([a-zA-Z]{1,2})-?([a-zA-Z]?\d{3,4})\b/gi;
            const matches = message.match(roomPattern);
            
            if (matches) {
                // Normaliser le format (ex: a-1750 -> A-1750)
                return matches.map(match => {
                    const normalized = match.replace(/[-\s]/g, '');
                    const roomMatch = normalized.match(/^([a-zA-Z]{1,2})([a-zA-Z]?\d{3,4})$/i);
                    if (roomMatch) {
                        return `${roomMatch[1].toUpperCase()}-${roomMatch[2].toUpperCase()}`;
                    }
                    return match.toUpperCase();
                });
            }
            return null;
        }

        // ‚úÖ NOUVEAU : Fonction pour v√©rifier si un ticket existe d√©j√†
        function hasExistingTicket(room = null) {
            const targetRoom = room || getCurrentRoom();
            return sessionTickets.some(ticket => ticket.room === targetRoom);
        }
        
        // ‚úÖ NOUVEAU : Fonction pour ajouter un ticket √† la session
        function addTicketToSession(ticketData) {
            const ticket = {
                number: ticketData.ticket_number || ticketData.id,
                room: ticketData.room,
                timestamp: new Date().toISOString(),
                title: ticketData.title || 'Ticket SEA',
                status: 'created'
            };
            
            sessionTickets.push(ticket);
            console.log(`üé´ [Session] Ticket ajout√©:`, ticket);
            return ticket;
        }
        
        // ‚úÖ NOUVEAU : Fonction pour obtenir le dernier ticket de la session
        function getLastSessionTicket(room = null) {
            const targetRoom = room || getCurrentRoom();
            const roomTickets = sessionTickets.filter(ticket => ticket.room === targetRoom);
            return roomTickets.length > 0 ? roomTickets[roomTickets.length - 1] : null;
        }

        // ===== FONCTIONS PRINCIPALES R√âELLES =====

        function clearInput() {
            problemInput.value = '';
            
            // ‚úÖ NOUVEAU: Afficher √† nouveau les palettes de probl√®mes
            const problemPalettes = document.getElementById('problemPalettes');
            if (problemPalettes) {
                problemPalettes.style.display = 'block';
            }
            
            // ‚úÖ NOUVEAU : Supprimer TOUS les messages et interfaces pr√©c√©dents
            const assistantResponse = document.getElementById('assistantResponse');
            if (assistantResponse) {
                assistantResponse.remove();
            }
            
            const autoResult = document.querySelector('.auto-result');
            if (autoResult) {
                autoResult.remove();
            }
            
            const escalationInterface = document.getElementById('escalation-interface');
            if (escalationInterface) {
                escalationInterface.remove();
            }
            
            const resultMessage = document.querySelector('.result-message');
            if (resultMessage) {
                resultMessage.remove();
            }
            
            const simBanner = document.querySelector('.sim-banner');
            if (simBanner) {
                simBanner.remove();
            }
            
            // ‚úÖ NOUVEAU : Vider les suggestions
            const suggestions = document.getElementById('suggestions');
            if (suggestions) {
                suggestions.innerHTML = '';
            }
            
            // Supprimer tous les r√©sultats d'actions automatiques
            const autoResults = document.querySelectorAll('.auto-result');
            autoResults.forEach(result => result.remove());
            
            // Supprimer toutes les interfaces d'escalade
            const escalationInterfaces = document.querySelectorAll('.escalation-interface');
            escalationInterfaces.forEach(interface => interface.remove());
        }

        /**
         * V√©rifie la connexion au backend
         */
        async function checkConnection() {
            try {
                const response = await fetch(`${API_BASE_URL}/api/health`);
                isConnected = response.ok;
                return isConnected;
            } catch (error) {
                console.error('Erreur de connexion:', error);
                isConnected = false;
                return false;
            }
        }

        /**
         * Envoie un message d'exemple (comme dans l'original)
         */
        function sendExampleMessage(message) {
            // G√©rer les suggestions sp√©ciales
            if (message === 'Nouveau probl√®me AV' || message === 'Nouveau probl√®me') {
                clearInput();
                problemInput.focus();
                return;
            }
            
            if (message === 'Autre probl√®me audio') {
                clearInput();
                addMessage('system', 'üîä D√©crivez votre probl√®me audio :', {
                    suggestions: ['Pas de son', 'Microphone en sourdine', 'Bruit parasite', 'Volume trop bas']
                });
                problemInput.focus();
                return;
            }
            
            if (message === 'Autre probl√®me vid√©o') {
                clearInput();
                addMessage('system', 'üìΩÔ∏è D√©crivez votre probl√®me vid√©o :', {
                    suggestions: ['√âcran noir', 'Pas d\'image', 'Qualit√© d√©grad√©e', 'Projecteur ne s\'allume pas']
                });
                problemInput.focus();
                return;
            }
            
            if (message === 'Vider la barre') {
                clearInput();
                problemInput.focus();
                return;
            }
            
            if (message === 'Autre salle') {
                clearInput();
                problemInput.focus();
                addMessage('system', 'üìç <strong>Nom de la salle ?</strong>', {
                    suggestions: ['A-1750', 'B-2500', 'C-3000', 'D-4000', 'SH-R200', 'DS-4000']
                });
                return;
            }
            
            if (message === 'Copier num√©ro ticket') {
                // Chercher le dernier num√©ro de ticket dans les messages
                const messages = document.querySelectorAll('.message.system');
                for (let i = messages.length - 1; i >= 0; i--) {
                    const messageContent = messages[i].textContent;
                    const ticketMatch = messageContent.match(/Num√©ro\s*:\s*([A-Z0-9-]+)/);
                    if (ticketMatch) {
                        const ticketNumber = ticketMatch[1];
                        navigator.clipboard.writeText(ticketNumber).then(() => {
                            addMessage('system', `üìã Num√©ro de ticket <strong>${ticketNumber}</strong> copi√© dans le presse-papier.`, {
                                suggestions: ['Nouveau probl√®me', 'Merci']
                            });
                        }).catch(() => {
                            addMessage('system', `üìã Num√©ro de ticket: <strong>${ticketNumber}</strong> (copie manuelle n√©cessaire)`, {
                                suggestions: ['Nouveau probl√®me', 'Merci']
                            });
                        });
                        return;
                    }
                }
                addMessage('system', '‚ùå Aucun num√©ro de ticket trouv√© √† copier.', {
                    suggestions: ['Nouveau probl√®me']
                });
                return;
            }
            
            if (message === 'Merci pour l\'information') {
                addMessage('system', 'üëç N\'h√©sitez pas √† revenir pour tout probl√®me audiovisuel !', {
                    suggestions: ['Probl√®me projecteur', 'Probl√®me audio', 'Probl√®me r√©seau']
                });
                return;
            }
            
            // Pour les probl√®mes r√©seau, afficher la banni√®re Services Informatiques
            if (message === 'Probl√®me de r√©seau') {
                handleNetworkProblem(message);
                return;
            }
            
            // Pour les autres probl√®mes (syst√®me qui ne r√©pond plus), afficher banni√®re SIM
            if (message === 'Syst√®me qui ne r√©pond plus') {
                handleNonAudiovisualProblem(message);
                return;
            }
            
            // Pour les probl√®mes audio/vid√©o, envoyer au backend
            if (isConnected) {
                // ‚úÖ NOUVEAU: D√©marrer timer d'escalade pour les clics palette
                const currentRoom = getCurrentRoom();
                let problemType = null;
                
                if (message === 'Probl√®me Vid√©o' || message.toLowerCase().includes('vid√©o') || message.toLowerCase().includes('projecteur')) {
                    problemType = 'video';
                    // ‚úÖ CORRECTION BACKEND : Message simple comme la r√©f√©rence qui fonctionne
                    if (message === 'Probl√®me Vid√©o') {
                        message = '√âcran noir projecteur';
                    }
                } else if (message === 'Probl√®me Audio' || message.toLowerCase().includes('audio') || message.toLowerCase().includes('son')) {
                    problemType = 'audio';
                }
                
                if (problemType && !escalationTimeoutId) {
                    console.log(`‚è∞ [EscalationTimeout] D√©marrage timer palette pour probl√®me ${problemType}`);
                    startEscalationTimeout(problemType, currentRoom);
                }
                
                problemInput.value = message;
                sendProblemReport();
            } else {
                addMessage('system', '‚ö†Ô∏è Syst√®me en cours d\'initialisation. Veuillez patienter.', {
                    suggestions: ['Patienter', 'Recharger la page']
                });
            }
        }

        // ===== FONCTIONS D'ANALYSE DE MESSAGE =====



        // Fonction principale pour envoyer le probl√®me au backend
        async function sendProblemReport() {
            const message = problemInput.value.trim();
            
            if (!message) {
                addMessage('system', '‚ùå Veuillez d√©crire votre probl√®me.', {
                    suggestions: ['Probl√®me projecteur', 'Probl√®me audio', 'Probl√®me r√©seau']
                });
                return;
            }
            
            if (!isConnected) {
                addMessage('system', '‚ö†Ô∏è Syst√®me en cours d\'initialisation. Veuillez patienter ou recharger la page.', {
                    suggestions: ['Patienter', 'Recharger la page']
                });
                return;
            }
            
            // ‚úÖ NOUVEAU: D√©marrer le timer d'escalade pour √©viter les blocages
            const currentRoom = getCurrentRoom();
            
            // Identifier le type de probl√®me pour le timer
            let problemType = null;
            if (message.toLowerCase().includes('vid√©o') || message.toLowerCase().includes('projecteur') || message.toLowerCase().includes('√©cran')) {
                problemType = 'video';
            } else if (message.toLowerCase().includes('audio') || message.toLowerCase().includes('son') || message.toLowerCase().includes('micro')) {
                problemType = 'audio';
            }
            
            // D√©marrer le timer d'escalade si c'est un probl√®me AV (√©viter les doublons)
            if (problemType && !escalationTimeoutId) {
                console.log(`‚è∞ [EscalationTimeout] D√©marrage timer d'escalade pour probl√®me ${problemType}`);
                startEscalationTimeout(problemType, currentRoom);
            }
            
            // ‚úÖ NOUVELLE VALIDATION : V√©rifier la coh√©rence de salle
            const detectedRooms = detectRoomInMessage(message);
            
            if (detectedRooms && detectedRooms.length > 0) {
                // V√©rifier si une salle diff√©rente est mentionn√©e
                const mentionedRoom = detectedRooms[0]; // Premi√®re salle d√©tect√©e
                
                if (mentionedRoom !== currentRoom) {
                    addMessage('system', `‚ö†Ô∏è <strong>Attention :</strong> Vous √™tes pr√©sentement dans la salle <strong>${currentRoom}</strong>.<br><br>Je suis votre assistant uniquement pour cette salle. Si vous avez un probl√®me dans une autre salle, veuillez vous y rendre et utiliser l'assistant local.`, {
                        suggestions: ['Continuer avec ' + currentRoom, 'Changer de salle', 'Nouveau probl√®me']
                    });
                    return;
                }
            }
            
            // ‚úÖ NOUVELLE VALIDATION : V√©rifier les tickets existants
            if (hasExistingTicket(currentRoom)) {
                const lastTicket = getLastSessionTicket(currentRoom);
                showExistingTicketBanner(lastTicket);
                return;
            }
            
            // ‚úÖ NOUVELLE STRAT√âGIE : Analyser le type de probl√®me avec salle toujours connue
            const messageAnalysis = analyzeMessageType(message);
            console.log(`üîç [MessageAnalysis] Salle: ${getCurrentRoom()}, Type: ${messageAnalysis.type}, Cat√©gorie: ${messageAnalysis.category}`);
            
            // Variable pour stocker le r√©sultat d'analyse d'√©quipement
            let analysisResult = null;
            
            // Traiter selon le type de probl√®me
            switch (messageAnalysis.type) {
                case 4: // Hors scope
                    handleOutOfScopeMessage(message);
                    return;
                
                case 3: // Non-audiovisuel  
                    handleNonAudiovisualProblem(message);
                    return;
                
                case 2: // AV externe - Redirection directe vers SEA avec salle
                    handleExternalAVProblemWithRoom(message);
                    return;
                
                case 1: // AV syst√®me - Analyse am√©lior√©e avec √©quipements de la salle
                    console.log(`üéØ [SystemAV] Analyse syst√®me pour salle ${getCurrentRoom()}: "${message}"`);
                    
                    // Nouvelle logique : Analyser les √©quipements avant de continuer
                    analysisResult = await analyzeRoomEquipmentForProblem(message);
                    if (analysisResult.shouldEscalate) {
                        return; // L'escalade a √©t√© g√©r√©e dans la fonction (message utilisateur d√©j√† ajout√©)
                    }
                    
                    // Continuer avec l'analyse syst√®me si pas d'escalade
                    break;
                
                default:
                    // Par d√©faut, traiter comme type 4 (hors scope)
                    handleOutOfScopeMessage(message);
                    return;
            }
            
            // D√©sactiver le bouton pendant le traitement
            updateSendButton(true);
            
            // ‚úÖ NOUVEAU : Ne pas afficher le message utilisateur pour les actions automatiques
            const isAutoActionMessage = message.toLowerCase().includes('pas de son') || 
                                       message.toLowerCase().includes('micro') ||
                                       message.toLowerCase().includes('son') ||
                                       message.toLowerCase().includes('audio') ||
                                       message.toLowerCase().includes('sourdine');
            
            // ‚úÖ CORRECTION : Ajouter le message utilisateur seulement si pas d'analyse d'√©quipement ET pas d'action automatique
            if (!(analysisResult && analysisResult.userMessageAdded) && !isAutoActionMessage) {
                addMessage('user', message, {});
            }
            
            // ‚úÖ CORRECTION UI : Vider l'input seulement apr√®s succ√®s, pas imm√©diatement
            // problemInput.value = '';  // D√©plac√© plus tard
            
            try {
                // ‚úÖ NOUVELLE STRAT√âGIE : Envoyer au backend avec salle toujours incluse
                const currentRoom = getCurrentRoom();
                const fullMessage = `${message} (Salle: ${currentRoom})`;
                
                // üîç DEBUG : Afficher le message exact envoy√© au backend
                console.log(`üéØ [DEBUG] Message envoy√© au RAG backend: "${fullMessage}"`);
                
                const response = await fetch(`${API_BASE_URL}/api/copilot/vitrine`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: fullMessage,
                        context: {
                            session_id: `vitrine_${Date.now()}`,
                            user_id: 'vitrine_user',
                            source: 'vitrine',
                            timestamp: new Date().toISOString(),
                            room_info: {
                                room: window.roomCache.room,
                                pavilion: window.roomCache.pavilion,
                                room_number: window.roomCache.roomNumber
                            }
                        }
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`Erreur serveur (${response.status})`);
                }
                
                const data = await response.json();
                
                if (data.status === 'success') {
                    // Traiter la r√©ponse du Copilot
                    console.log(`üì• [Backend] R√©ponse re√ßue:`, data);
                    processResponse(data);
                    
                    // ‚úÖ CORRECTION UI : Vider l'input seulement apr√®s succ√®s
                    problemInput.value = '';
                } else {
                    throw new Error(data.message || 'Erreur lors du traitement');
                }
                
            } catch (error) {
                console.error('Erreur lors de l\'envoi:', error);
                
                // CORRECTION : Ne pas afficher d'erreur bloquante, continuer avec l'analyse
                console.log(`üîß [ErrorHandling] Erreur API ‚Üí Continuer avec l'analyse locale`);
                
                // Cr√©er un contexte RAG local pour continuer le processus
                latestRAGContext = {
                    intent: 'technical_issue',
                    confidence: 0.8,
                    room: getCurrentRoom(),
                    problems: [{
                        room: getCurrentRoom(),
                        device: null,
                        severity: 'medium',
                        reason: 'Probl√®me signal√© n√©cessitant intervention'
                    }],
                    solutions: [],
                    escalation_needed: true,
                    escalation_reason: "Probl√®me technique signal√© - intervention recommand√©e."
                };
                
                // Afficher un message informatif et proposer l'escalade
                addMessage('system', `üîß Analyse termin√©e pour la salle ${getCurrentRoom()}. Une intervention technique est recommand√©e.`, {
                    suggestions: ['Cr√©er un ticket SEA', 'Appeler SEA au 6135', 'Nouveau probl√®me']
                });
                
            } finally {
                // R√©activer le bouton
                updateSendButton(false);
                
                // CORRECTION : Ne pas faire de retour automatique pour √©viter les interruptions
                // L'utilisateur doit choisir explicitement de cr√©er un ticket
            }
        }

        // ===== FONCTIONS DE DIAGNOSTIC R√âEL =====

        /**
         * V√©rifie si un message concerne un probl√®me audio
         */
        function isAudioProblem(message) {
            const audioKeywords = ['audio', 'son', 'microphone', 'micro', 'haut-parleur', 'haut parleur', 'volume', 'mute', 'sourdine', 'bruit', '√©cho'];
            return audioKeywords.some(keyword => message.includes(keyword));
        }

        /**
         * V√©rifie si un message concerne un probl√®me vid√©o
         */
        function isVideoProblem(message) {
            const videoKeywords = ['vid√©o', 'projecteur', '√©cran', 'image', 'affichage', 'proj', 'hdmi', 'vga', 'connecteur'];
            return videoKeywords.some(keyword => message.includes(keyword));
        }

        /**
         * ‚úÖ FONCTION UNIVERSELLE : D√©tecte le type d'√©quipement disponible dans une salle
         */
        function analyzeRoomEquipmentTypes(devices) {
            if (!devices || !Array.isArray(devices)) {
                return { hasAudio: false, hasVideo: false, summary: 'Aucun √©quipement d√©tect√©' };
            }

            // ‚úÖ CORRECTION: D√©tection √©quipements AUDIO (TCC2, Sennheiser, microphones)
            const audioDevices = devices.filter(device => 
                (device.type && (device.type.toLowerCase().includes('audio') || device.type.toLowerCase().includes('microphone'))) ||
                (device.model_name && (device.model_name.toLowerCase().includes('sennheiser') || device.model_name.toLowerCase().includes('tcc2'))) ||
                (device.name && device.name.toLowerCase().includes('tcc2')) ||
                (device.family_name && device.family_name.toLowerCase().includes('sennheiser'))
            );

            // ‚úÖ CORRECTION: D√©tection √©quipements VID√âO (Projecteurs, √©crans, affichages)
            const videoDevices = devices.filter(device => 
                (device.type && device.type.toLowerCase().includes('projector')) ||
                (device.model_name && device.model_name.toLowerCase().includes('projector')) ||
                (device.name && device.name.toLowerCase().includes('proj')) ||
                (device.family_name && device.family_name.toLowerCase().includes('projecteur')) ||
                (device.family_name && device.family_name.toLowerCase().includes('projecteurs'))
            );

            const result = {
                hasAudio: audioDevices.length > 0,
                hasVideo: videoDevices.length > 0,
                audioCount: audioDevices.length,
                videoCount: videoDevices.length,
                summary: `Audio: ${audioDevices.length}, Vid√©o: ${videoDevices.length}`
            };

            console.log(`üîç [EquipmentTypes] Analyse salle: ${result.summary}`);
            return result;
        }

        /**
         * ‚úÖ R√àGLE UNIVERSELLE : Applique la logique d'escalation sym√©trique
         */
        function shouldEscalateBasedOnEquipment(problemType, equipmentTypes, currentRoom) {
            // R√àGLE 1: Probl√®me AUDIO + Aucun √©quipement AUDIO ‚Üí Escalade
            if (problemType === 'audio' && !equipmentTypes.hasAudio) {
                console.log(`üîä [UniversalRule] Salle ${currentRoom}: Probl√®me AUDIO d√©tect√© mais aucun √©quipement audio ‚Üí ESCALADE DIRECTE`);
                return {
                    shouldEscalate: true,
                    reason: `Aucun √©quipement audio trouv√© dans la salle ${currentRoom}`,
                    intent: 'audio_problem'
                };
            }

            // R√àGLE 2: Probl√®me VID√âO + Aucun √©quipement VID√âO ‚Üí Escalade  
            if (problemType === 'video' && !equipmentTypes.hasVideo) {
                console.log(`üìΩÔ∏è [UniversalRule] Salle ${currentRoom}: Probl√®me VID√âO d√©tect√© mais aucun √©quipement vid√©o ‚Üí ESCALADE DIRECTE`);
                return {
                    shouldEscalate: true,
                    reason: `Aucun √©quipement vid√©o trouv√© dans la salle ${currentRoom}`,
                    intent: 'video_problem'
                };
            }

            // R√àGLE 3: √âquipement du bon type disponible ‚Üí Continuer analyse
            console.log(`‚úÖ [UniversalRule] Salle ${currentRoom}: √âquipement ${problemType} disponible ‚Üí Continuer avec diagnostic automatique`);
            return {
                shouldEscalate: false,
                reason: `√âquipement ${problemType} disponible pour diagnostic automatique`,
                intent: `${problemType}_problem`
            };
        }

        /**
         * R√©cup√®re les √©quipements disponibles dans une salle
         */
        async function fetchRoomEquipment(room) {
            try {
                console.log(`üìã [FetchRoomEquipment] R√©cup√©ration √©quipements pour salle ${room}`);
                
                // ‚úÖ STRAT√âGIE HYBRIDE: V√©rifier d'abord si on a des infos de cache (Podio ou NeonDB)
                const roomInfo = await podioRoomCache.getRoomInfo(room);
                
                if (roomInfo && roomInfo.source === 'neondb' && roomInfo.devices) {
                    // Salle trouv√©e via NeonDB avec √©quipements
                    console.log(`üìã [FetchRoomEquipment] ‚úÖ Utilisation √©quipements NeonDB pour ${room} (${roomInfo.devices.length})`);
                    
                    const adaptedDevices = roomInfo.devices.map(device => ({
                        id: device.id,
                        device_name: device.name,
                        name: device.name,
                        host: device.host,
                        protocol: device.protocol,
                        device_model_name: device.model_name,
                        device_family_name: device.family_name,
                        family_type: device.family_type,
                        room_name: room
                    }));
                    
                    return {
                        devices: adaptedDevices,
                        total: adaptedDevices.length,
                        noAccess: false,
                        source: 'neondb'
                    };
                }
                
                // ‚úÖ PODIO ou pas d'info cach√©e: Essayer l'API √©quipements traditionnelle
                console.log(`üìã [FetchRoomEquipment] Tentative API √©quipements traditionnelle pour ${room}`);
                
                // Essayer d'abord la route /api/devices/public
                let response = await fetch(`${API_BASE_URL}/api/devices/public`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                // Si 404, essayer la route /api/devices
                if (response.status === 404) {
                    console.log(`üìã [FetchRoomEquipment] Route /api/devices/public non trouv√©e, essai avec /api/devices`);
                    response = await fetch(`${API_BASE_URL}/api/devices`, {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    });
                }
                
                if (!response.ok) {
                    // Permissions ou erreurs ‚Üí Essayer fallback NeonDB direct si pas d√©j√† fait
                    if (!roomInfo || roomInfo.source !== 'neondb') {
                        console.log(`üìã [FetchRoomEquipment] √âchec API traditionnelle ‚Üí Tentative NeonDB directe`);
                        return await fetchRoomEquipmentFromNeonDB(room);
                    }
                    
                    console.log(`üìã [FetchRoomEquipment] √âchec complet pour ${room}`);
                    return { devices: [], total: 0, noAccess: true };
                }
                
                const allDevices = await response.json();
                if (!Array.isArray(allDevices)) {
                    console.warn('üìã [FetchRoomEquipment] R√©ponse API inattendue:', allDevices);
                    return { devices: [], total: 0, noAccess: true };
                }
                
                // Filtrer les √©quipements de la salle sp√©cifique
                const roomDevices = allDevices.filter(device => 
                    device.room_name && device.room_name.toLowerCase() === room.toLowerCase()
                );
                
                console.log(`üìã [FetchRoomEquipment] Salle ${room}: ${roomDevices.length} √©quipement(s) trouv√©(s) via API traditionnelle`);
                
                return {
                    devices: roomDevices,
                    total: roomDevices.length,
                    noAccess: false,
                    source: 'traditional'
                };
                
            } catch (error) {
                console.error('üìã [FetchRoomEquipment] Erreur:', error);
                // Fallback final vers NeonDB
                return await fetchRoomEquipmentFromNeonDB(room);
            }
        }

        /**
         * ‚úÖ NOUVEAU: Fonction d√©di√©e pour r√©cup√©rer √©quipements depuis NeonDB directement
         */
        async function fetchRoomEquipmentFromNeonDB(room) {
            try {
                console.log(`üìã [FetchRoomEquipmentFromNeonDB] R√©cup√©ration directe NeonDB pour ${room}`);
                
                const response = await fetch(`${API_BASE_URL}/api/room/equipment?room=${encodeURIComponent(room)}`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                if (!response.ok) {
                    console.log(`üìã [FetchRoomEquipmentFromNeonDB] Erreur HTTP ${response.status}`);
                    
                    // ‚úÖ CONTOURNEMENT : √âquipements en dur pour J-2430 si API √©choue
                    if (room === 'J-2430') {
                        console.log(`üîß [FallbackJ2430] Utilisation √©quipements en dur pour J-2430`);
                        return {
                            devices: [
                                {
                                    id: 31,
                                    name: "PROJ-J-2430",
                                    device_name: "PROJ-J-2430", 
                                    address: "132.208.119.121",
                                    port: 4352,
                                    technology: "PJLINK",
                                    status: "unknown",
                                    room_name: "J-2430",
                                    device_family_name: "Projecteur",
                                    device_model_name: "Generic Projecteur"
                                },
                                {
                                    id: 32,
                                    name: "DSF-J-2430-A",
                                    device_name: "DSF-J-2430-A",
                                    address: "dsf-j-2430-a.ddns.uqam.ca", 
                                    port: 443,
                                    technology: "MERSIVE",
                                    status: "unknown",
                                    room_name: "J-2430", 
                                    device_family_name: "Mersive",
                                    device_model_name: "Solstice Pod"
                                }
                            ],
                            total: 2,
                            room: "J-2430",
                            status: "hardcoded_fallback"
                        };
                    }
                    
                    return { devices: [], total: 0, noAccess: true };
                }
                
                const data = await response.json();
                if ((data.status !== 'success' && !data.success) || !Array.isArray(data.devices)) {
                    console.warn('üìã [FetchRoomEquipmentFromNeonDB] R√©ponse invalide:', data);
                    return { devices: [], total: 0, noAccess: true };
                }
                
                const adaptedDevices = data.devices.map(device => ({
                    id: device.id,
                    device_name: device.device_name || device.name,
                    name: device.name,
                    host: device.address, // ‚úÖ Adapter address ‚Üí host
                    protocol: device.technology, // ‚úÖ Adapter technology ‚Üí protocol  
                    device_model_name: device.device_model_name,
                    device_family_name: device.device_family_name,
                    family_type: device.technology, // ‚úÖ Utiliser technology comme family_type
                    room_name: device.room_name || room,
                    address: device.address, // ‚úÖ Garder address aussi
                    technology: device.technology, // ‚úÖ Garder technology aussi
                    status: device.status, // ‚úÖ Ajouter status
                    port: device.port // ‚úÖ Ajouter port
                }));
                
                console.log(`üìã [FetchRoomEquipmentFromNeonDB] Salle ${room}: ${adaptedDevices.length} √©quipement(s) trouv√©(s)`);
                
                return {
                    devices: adaptedDevices,
                    total: adaptedDevices.length,
                    noAccess: false,
                    source: 'neondb'
                };
                
            } catch (error) {
                console.error('üìã [FetchRoomEquipmentFromNeonDB] Erreur:', error);
                return { devices: [], total: 0, noAccess: true };
            }
        }

        /**
         * Analyse les √©quipements disponibles dans la salle pour d√©terminer si une escalade imm√©diate est n√©cessaire
         */
        async function analyzeRoomEquipmentForProblem(message) {
            const currentRoom = getCurrentRoom();
            const lowerMessage = message.toLowerCase();
            
            try {
                // R√©cup√©rer les √©quipements de la salle
                const roomEquipment = await fetchRoomEquipment(currentRoom);
                
                // Si pas d'acc√®s direct aux √©quipements, escalader pour les probl√®mes vid√©o/audio
                if (!roomEquipment || roomEquipment.noAccess) {
                    console.log(`üè¢ [RoomAnalysis] Pas d'acc√®s direct aux √©quipements ‚Üí V√©rifier si escalade n√©cessaire`);
                    
                    // ‚úÖ CORRECTION CRITIQUE : PERMETTRE AU BACKEND D'ANALYSER LES PROBL√àMES VID√âO AVANT ESCALADE
                    if (isVideoProblem(lowerMessage)) {
                        console.log(`üìΩÔ∏è [VideoAnalysis] Probl√®me vid√©o d√©tect√© ‚Üí TENTER DIAGNOSTIC AUTOMATIQUE BACKEND AVANT ESCALADE`);
                        // ‚úÖ CORRECTION CRITIQUE : PERMETTRE AU BACKEND D'ANALYSER AVANT D'ESCALADER
                        // Le backend peut d√©tecter et corriger automatiquement des probl√®mes comme projecteur √©teint + AV mute
                        console.log(`üéØ [VideoAnalysis] Continuer avec analyse Copilot pour correction automatique possible`);
                        return { shouldEscalate: false, userMessageAdded: false };
                    }
                    
                    if (isAudioProblem(lowerMessage)) {
                        console.log(`üîä [AudioAnalysis] Probl√®me audio d√©tect√© ‚Üí TENTER DIAGNOSTIC AUTOMATIQUE BACKEND AVANT ESCALADE`);
                        
                        // ‚úÖ CORRECTION CRITIQUE : PERMETTRE AU BACKEND D'ANALYSER AVANT D'ESCALADER
                        // Le backend peut d√©tecter et corriger automatiquement des probl√®mes comme TCC2 en sourdine
                        console.log(`üéØ [AudioAnalysis] Continuer avec analyse Copilot pour correction automatique possible`);
                        return { shouldEscalate: false, userMessageAdded: false };
                    }
                    
                    // Pour les autres types de probl√®mes, continuer avec l'analyse Copilot
                    console.log(`üîß [EquipmentAnalysis] Pas d'acc√®s √©quipements ‚Üí Continuer avec l'analyse Copilot`);
                    return { shouldEscalate: false, userMessageAdded: false };
                }
                
                // ‚úÖ NOUVELLE LOGIQUE UNIVERSELLE : Analyser les √©quipements avec r√®gles sym√©triques
                if (roomEquipment.devices && roomEquipment.devices.length > 0) {
                    console.log(`üîß [EquipmentAnalysis] ${roomEquipment.devices.length} √©quipement(s) trouv√©(s) pour la salle ${currentRoom}`);
                    
                    // ‚úÖ Analyser les types d'√©quipements disponibles
                    const equipmentTypes = analyzeRoomEquipmentTypes(roomEquipment.devices);
                    console.log(`üîç [EquipmentAnalysis] ${equipmentTypes.summary}`);
                    
                    // ‚úÖ D√©terminer le type de probl√®me et appliquer la r√®gle universelle
                    let problemType = null;
                    if (isAudioProblem(lowerMessage)) {
                        problemType = 'audio';
                    } else if (isVideoProblem(lowerMessage)) {
                        problemType = 'video';
                        
                        // ‚úÖ CRITIQUE : Analyse sp√©cifique des probl√®mes vid√©o avec gestion projecteurs
                        console.log(`üìΩÔ∏è [EquipmentAnalysis] Probl√®me vid√©o d√©tect√© ‚Üí Analyse sp√©cifique projecteurs`);
                        const videoHandled = await handleVideoProblemAnalysis(message, roomEquipment);
                        if (videoHandled) {
                            // Escalade effectu√©e par handleVideoProblemAnalysis
                            return { shouldEscalate: true, userMessageAdded: true };
                        }
                        // Sinon, continuer avec RAG backend (projecteurs d√©tect√©s)
                        console.log(`üìΩÔ∏è [EquipmentAnalysis] Projecteurs d√©tect√©s ‚Üí Continuer analyse RAG backend`);
                        return { shouldEscalate: false, userMessageAdded: false };
                    }
                    
                    if (problemType === 'audio') {
                        // ‚úÖ Logique audio existante
                        console.log(`üîß [EquipmentAnalysis] Probl√®me audio d√©tect√© ‚Üí Tenter diagnostic automatique Copilot`);
                        
                        // ‚úÖ V√©rifier si √©quipements appropri√©s disponibles pour diagnostic
                        const hasAppropriateEquipment = equipmentTypes.hasAudio;
                        
                        // ‚úÖ CORRECTION CRITIQUE : TOUJOURS PERMETTRE AU BACKEND D'ANALYSER D'ABORD
                        // M√™me si les √©quipements ne sont pas d√©tect√©s localement, le backend peut avoir
                        // une meilleure connaissance des √©quipements et peut corriger automatiquement
                        console.log(`üéØ [EquipmentAnalysis] Probl√®me audio ‚Üí FORCER ANALYSE BACKEND AVANT ESCALADE`);
                        console.log(`üîß [EquipmentAnalysis] √âquipements d√©tect√©s: ${hasAppropriateEquipment ? 'OUI' : 'NON'} - Backend peut avoir plus d'infos`);
                        
                        // Laisser le backend analyser et d√©cider s'il peut corriger automatiquement (ex: TCC2 sourdine)
                        return { shouldEscalate: false, userMessageAdded: false };
                    }
                    
                }
                
                // Si pas d'√©quipements trouv√©s, continuer avec l'analyse Copilot
                console.log(`üîß [EquipmentAnalysis] Aucun √©quipement trouv√© ‚Üí Continuer avec l'analyse Copilot`);
                return { shouldEscalate: false, userMessageAdded: false };
                
            } catch (error) {
                console.error('üîß [EquipmentAnalysis] Erreur lors de l\'analyse:', error);
                // En cas d'erreur, continuer avec l'analyse Copilot
                return { shouldEscalate: false, userMessageAdded: false };
            }
        }

        // üÜï FONCTION POUR V√âRIFIER L'√âTAT TEMPS R√âEL D'UN PROJECTEUR
        async function fetchProjectorRealtimeStatus(deviceName) {
            try {
                console.log(`üîç [RealtimeStatus] V√©rification temps r√©el pour: ${deviceName}`);
                
                const response = await fetch(`${API_BASE_URL}/api/device/public/realtime-status/${deviceName}`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                if (!response.ok) {
                    console.log(`‚ùå [RealtimeStatus] Erreur HTTP ${response.status} pour ${deviceName}`);
                    return null;
                }
                
                const status = await response.json();
                console.log(`‚úÖ [RealtimeStatus] √âtat temps r√©el r√©cup√©r√© pour ${deviceName}:`, status);
                
                return status;
                
            } catch (error) {
                console.error(`‚ùå [RealtimeStatus] Erreur pour ${deviceName}:`, error);
                return null;
            }
        }
        
        /**
         * ‚úÖ FONCTION MANQUANTE CRITIQUE : Analyse sp√©cifique des probl√®mes vid√©o
         * Copi√©e depuis assistant-salle-av-copie.html
         */
        async function handleVideoProblemAnalysis(message, roomEquipment) {
            const currentRoom = getCurrentRoom();
            
            // V√©rifier s'il y a des projecteurs dans la salle
            const projectors = (roomEquipment && roomEquipment.devices) ? roomEquipment.devices.filter(device => 
                device.device_type === 'projector' || 
                device.device_family_name?.toLowerCase().includes('projecteur') ||
                device.device_name?.toLowerCase().includes('proj') ||
                device.technology?.toLowerCase().includes('pjlink')
            ) : [];
            
            console.log(`üìΩÔ∏è [VideoAnalysis] Salle ${currentRoom}: ${projectors.length} projecteur(s) d√©tect√©(s)`);
            
            if (projectors.length === 0) {
                // Aucun projecteur d√©tect√©, escalade imm√©diate avec interface standard
                console.log(`üìΩÔ∏è [VideoAnalysis] Aucun projecteur d√©tect√© ‚Üí Escalade directe`);
                
                // Cr√©er un contexte RAG artificiel pour l'escalade vid√©o
                latestRAGContext = {
                    intent: 'video_problem',
                    confidence: 0.9,
                    room: currentRoom,
                    problems: [{
                        room: currentRoom,
                        device: null,
                        severity: 'medium'
                    }],
                    solutions: [],
                    escalation_needed: true,
                    escalation_reason: "Aucun projecteur d√©tect√© dans cette salle. L'√©quipement vid√©o pourrait ne pas √™tre r√©f√©renc√© dans le syst√®me de monitoring."
                };
                
                console.log('üé´ [VideoEscalation] Contexte RAG artificiel cr√©√© avec salle:', currentRoom);
                
                // ‚úÖ PAS DE MESSAGE EN BAS - Banni√®re SEA directe plus propre
                console.log(`üìΩÔ∏è [VideoAnalysis] Aucun projecteur ‚Üí Escalade SEA directe sans message interm√©diaire`);
                
                // ‚úÖ ESCALADE SEA IMM√âDIATE au lieu d'attendre le timeout
                setTimeout(() => {
                    showSEAEscalationBanner(latestRAGContext);
                }, 500); // 0.5 seconde pour feedback imm√©diat
                
                return true; // Escalade effectu√©e
            }
            
            // ‚úÖ CRITIQUE : Il y a des projecteurs, cr√©er actions automatiques locales
            console.log(`üìΩÔ∏è [VideoAnalysis] ${projectors.length} projecteur(s) trouv√©(s) ‚Üí Cr√©er actions automatiques locales`);
            
            // Cr√©er un contexte RAG artificiel avec actions automatiques pour projecteur
            const projector = projectors[0]; // Prendre le premier projecteur
            console.log(`üéØ [VideoActions] Cr√©ation actions automatiques pour projecteur: ${projector.device_name || projector.name}`);
            
            latestRAGContext = {
                intent: 'video_problem',
                confidence: 0.9,
                room: currentRoom,
                problems: [{
                    room: currentRoom,
                    device: projector.device_name || projector.name,
                    severity: 'high',
                    reason: 'Probl√®me vid√©o projecteur - √©cran noir'
                }],
                solutions: [],
                escalation_needed: false,
                actions: [
                    {
                        type: 'pjlink_power',
                        device_id: projector.id || 31,
                        command: 'power_on', // ‚úÖ Format backend
                        description: `Allumer ${projector.device_name || projector.name}`,
                        parameters: {
                            device_name: projector.device_name || projector.name,
                            power_on: true
                        }
                    },
                    {
                        type: 'pjlink_av_unmute', // ‚úÖ Nom correct
                        device_id: projector.id || 31,
                        command: 'av_unmute', // ‚úÖ Format backend
                        description: `D√©sactiver AV Mute sur ${projector.device_name || projector.name}`,
                        parameters: {
                            device_name: projector.device_name || projector.name,
                            video_mute: false,
                            audio_mute: false
                        }
                    }
                ],
                auto_executed: true
            };
            
            // ‚úÖ V√âRIFIER D'ABORD L'√âTAT R√âEL DU PROJECTEUR AVANT D'AFFICHER BANNI√àRE
            console.log(`üîç [VideoActions] V√©rification √©tat r√©el projecteur avant affichage banni√®re...`);
            
            try {
                // ‚úÖ √âTAPE 1 : V√©rifier l'√©tat d'alimentation (power) du projecteur
                console.log(`üîå [VideoActions] V√©rification √©tat d'alimentation du projecteur...`);
                
                // ‚úÖ ESSAI 1 : Endpoint power-status (nouveau)
                let powerData = null;
                try {
                    const powerResponse = await fetch(`${API_BASE_URL}/api/pjlink/power-status?device=PROJ-${currentRoom}`);
                    if (powerResponse.ok) {
                        powerData = await powerResponse.json();
                        console.log(`üîå [VideoActions] √âtat alimentation (power-status):`, powerData);
                    }
                } catch (powerError) {
                    console.log(`‚ö†Ô∏è [VideoActions] Endpoint power-status non disponible: ${powerError.message}`);
                }
                
                // ‚úÖ ESSAI 2 : Fallback vers av-mute-status (existant) pour d√©tecter si projecteur r√©pond
                if (!powerData) {
                    console.log(`üîÑ [VideoActions] Fallback vers av-mute-status pour d√©tecter connectivit√©...`);
                    const avMuteResponse = await fetch(`${API_BASE_URL}/api/pjlink/av-mute-status?device=PROJ-${currentRoom}`);
                    
                    if (avMuteResponse.ok) {
                        const avMuteData = await avMuteResponse.json();
                        console.log(`üîá [VideoActions] √âtat AV Mute (fallback):`, avMuteData);
                        
                        // ‚úÖ Si projecteur r√©pond mais pas de AV Mute ‚Üí ESCALADE DIRECTE
                        if (!avMuteData.av_muted && avMuteData.device) {
                            console.log(`üéØ [VideoActions] Projecteur R√âPOND + PAS AV Mute ‚Üí ESCALADE DIRECTE`);
                            showSEAEscalationBanner(latestRAGContext);
                            return; // ‚úÖ ARR√äTER ICI - Pas de banni√®re d'attente
                        }
                        
                        // ‚úÖ Si projecteur r√©pond ET AV Mute actif ‚Üí Continuer avec correction
                        if (avMuteData.av_muted) {
                            console.log(`üîá [VideoActions] Projecteur R√âPOND + AV Mute actif ‚Üí Correction automatique`);
                        }
                    } else {
                        // ‚úÖ Si projecteur ne r√©pond pas ‚Üí Probablement √©teint, continuer avec allumage
                        console.log(`üîå [VideoActions] Projecteur ne r√©pond pas ‚Üí Probablement √©teint, continuer avec allumage`);
                    }
                } else {
                    // ‚úÖ Endpoint power-status disponible
                    if (powerData.power === 'off' || powerData.power === 'OFF' || !powerData.power) {
                        console.log(`üîå [VideoActions] Projecteur √âTEINT ‚Üí Continuer avec allumage automatique`);
                    } else {
                        // ‚úÖ Projecteur allum√© ‚Üí V√©rifier AV Mute
                        console.log(`üîå [VideoActions] Projecteur ALLUM√â ‚Üí V√©rifier AV Mute...`);
                        const avMuteResponse = await fetch(`${API_BASE_URL}/api/pjlink/av-mute-status?device=PROJ-${currentRoom}`);
                        
                        if (avMuteResponse.ok) {
                            const avMuteData = await avMuteResponse.json();
                            console.log(`üîá [VideoActions] √âtat AV Mute:`, avMuteData);
                            
                            // ‚úÖ Si projecteur allum√© ET pas de AV Mute ‚Üí ESCALADE DIRECTE
                            if (!avMuteData.av_muted && avMuteData.device) {
                                console.log(`üéØ [VideoActions] Projecteur ALLUM√â + PAS AV Mute ‚Üí ESCALADE DIRECTE`);
                                showSEAEscalationBanner(latestRAGContext);
                                return; // ‚úÖ ARR√äTER ICI - Pas de banni√®re d'attente
                            }
                        }
                    }
                }
            } catch (error) {
                console.log(`‚ö†Ô∏è [VideoActions] Erreur v√©rification √©tat: ${error.message} - Continuer avec banni√®re d'attente`);
            }
            
            // ‚úÖ BANNI√àRE D'ATTENTE ORANGE pour diagnostic et actions (minimum 15 secondes)
            showWaitingBanner('üîç Diagnostic du projecteur...', 'V√©rification de l\'√©tat et correction en cours');
            
            // ‚úÖ M√©moriser le moment d'affichage pour d√©lai minimum
            window.waitingBannerStartTime = Date.now();
            
            // ‚úÖ MESSAGE ADAPTATIF selon l'√©tat probable du projecteur
            console.log(`ü§ñ [VideoActions] Envoi message adaptatif au RAG (seulement si pas escalade directe)`);
            
            // Si c'est un nouveau clic apr√®s une correction, changer le message
            const sessionCorrections = sessionStorage.getItem(`corrections_${currentRoom}`) || '0';
            const nbCorrections = parseInt(sessionCorrections);
            
            let adaptiveMessage;
            if (nbCorrections > 0) {
                // Apr√®s une correction, focus sur l'AV Mute
                adaptiveMessage = "Le projecteur est allum√© mais l'image n'appara√Æt pas - √©cran noir avec AV Mute";
                console.log(`üéØ [VideoActions] ${nbCorrections} correction(s) pr√©c√©dente(s) ‚Üí Focus AV Mute`);
            } else {
                // Premier probl√®me : power on classique
                adaptiveMessage = "Le projecteur ne s'allume pas et l'√©cran reste noir";
                console.log(`üéØ [VideoActions] Premier probl√®me ‚Üí Focus Power ON`);
            }
            
            sendProblemToVitrine(adaptiveMessage, currentRoom);
            
            return true; // Traitement effectu√© localement
        }
        
        // ===== FONCTION POUR APPEL VITRINE =====
        
        async function sendProblemToVitrine(message, roomName) {
            console.log(`üåê [VitrineCall] Envoi vers /api/copilot/vitrine: "${message}"`);
            
            try {
                const response = await fetch(`${API_BASE_URL}/api/copilot/vitrine`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: `${message} (Salle: ${roomName})`,
                        context: {
                            session_id: `vitrine_video_${Date.now()}`,
                            user_id: 'vitrine_user',
                            source: 'vitrine',
                            timestamp: new Date().toISOString(),
                            room_info: {
                                room: roomName,
                                pavilion: roomName.split('-')[0], // Ex: J-2430 ‚Üí J
                                room_number: roomName.split('-')[1] // Ex: J-2430 ‚Üí 2430
                            },
                            equipment_context: roomName === 'J-2430' ? {
                                projectors: [{
                                    id: 31,
                                    name: 'PROJ-J-2430',
                                    address: '132.208.119.121',
                                    technology: 'PJLINK',
                                    status: 'online', // ‚úÖ Projecteur maintenant allum√©
                                    issues: ['av_mute_active'] // ‚úÖ Mais AV Mute actif
                                }],
                                mersive: [{
                                    id: 32,
                                    name: 'DSF-J-2430-A',
                                    address: 'dsf-j-2430-a.ddns.uqam.ca',
                                    technology: 'MERSIVE',
                                    status: 'online'
                                }]
                            } : null
                        }
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`Erreur serveur (${response.status})`);
                }
                
                const data = await response.json();
                console.log(`üì• [VitrineCall] R√©ponse re√ßue:`, data);
                
                // Traiter la r√©ponse comme les autres r√©ponses backend
                processResponse(data);
                
            } catch (error) {
                console.error(`‚ùå [VitrineCall] Erreur:`, error);
                // En cas d'erreur, afficher un message √† l'utilisateur
                showAutoActionResult(
                    { type: 'error', description: 'Appel backend' }, 
                    { success: false, message: `Erreur de connexion backend: ${error.message}` }
                );
            }
        }
        
        // ===== FONCTIONS D'ANALYSE DE MESSAGE =====
        function analyzeMessageType(message) {
            const lowerMessage = message.toLowerCase();
            
            // Mots-cl√©s pour √©quipements AV dans le syst√®me SavQonnect
            const avSystemKeywords = [
                // Projecteurs
                'projecteur', 'projector', 'pjlink', '√©cran', 'screen', 'affichage', 'display',
                'image', 'vid√©o', 'video', 'noir', 'blanc', 'flou', 'floue', 'pixelis√©',
                
                // Audio Sennheiser
                'microphone', 'micro', 'son', 'audio', 'volume', 'sennheiser', 'tcc2',
                'mute', 'muet', 'sourdine', 'gr√©sille', 'parasite', 'larsen',
                
                // Crestron
                'crestron', '√©cran tactile', 'touchscreen', 'panneau de contr√¥le',
                'interface de contr√¥le', 't√©l√©commande'
            ];
            
            // Mots-cl√©s pour √©quipements AV hors syst√®me (mais toujours SEA)
            const avExternalKeywords = [
                // √âquipements AV g√©n√©riques non sp√©cifiques au syst√®me
                'haut-parleur', 'speaker', 'amplificateur', 'ampli', 'console audio',
                'table de mixage', 'mixer', 'cam√©ra', 'webcam', 'visualiseur',
                'dvd', 'blu-ray', 'lecteur', 'player', 'hdmi', 'vga', 'usb',
                'casque', 'headset', 'casque audio', 'jack', 'connecteur',
                'c√¢ble audio', 'c√¢ble vid√©o', 'adaptateur', 'convertisseur'
            ];
            
            // Mots-cl√©s pour probl√®mes non-audiovisuels
            const nonAVKeywords = [
                // √âlectricit√©
                '√©lectricit√©', '√©lectrique', 'prise', 'prises', 'courant', 'lumi√®re', '√©clairage',
                'ampoule', 'lampe', 'n√©on', 'disjoncteur', 'fusible', 'interrupteur',
                
                // Plomberie
                'plomberie', 'eau', 'robinet', 'toilette', 'chasse d\'eau', 'lavabo',
                '√©vier', 'fuite', 'bouchon', 'inondation', 'd√©g√¢t d\'eau',
                
                // Chauffage/Climatisation
                'chauffage', 'radiateur', 'calorif√®re', 'thermopompe', 'thermostat',
                'climatisation', 'clim', 'air conditionn√©', 'ventilation', 'temp√©rature',
                
                // Mobilier et structure
                'mobilier', 'chaise', 'table', 'bureau', 'porte', 'fen√™tre', 'serrure',
                'cl√©', 'nettoyage', 'm√©nage', 'poubelle', 'd√©chets'
            ];
            
            // Mots-cl√©s hors scope (pas des probl√®mes)
            const outOfScopeKeywords = [
                // Salutations
                'bonjour', 'bonsoir', 'salut', 'hello', 'hi',
                
                // Questions g√©n√©rales
                'comment √ßa va', 'quoi de neuf', 'comment allez-vous',
                'qu\'est-ce que tu fais', 'que fais-tu',
                
                // Demandes d'aide g√©n√©rale
                'aide-moi', 'peux-tu m\'aider', 'j\'ai besoin d\'aide',
                'que peux-tu faire', 'tes fonctionnalit√©s',
                
                // Discussions
                'parle-moi', 'raconte-moi', 'dis-moi', 'explique-moi',
                'm√©t√©o', 'actualit√©', 'nouvelles', 'sport'
            ];
            
            // V√©rifier si c'est un probl√®me technique valide
            const problemIndicators = [
                'probl√®me', 'panne', 'ne fonctionne pas', 'ne marche pas', 'd√©faillant',
                'en panne', 'cass√©', 'ne s\'allume pas', 'ne r√©pond pas', 'dysfonctionnement',
                'pas de', 'aucun', 'rien', 'bloqu√©', 'fig√©', 'lent', 'erreur'
            ];
            
            const hasProblemIndicator = problemIndicators.some(indicator => 
                lowerMessage.includes(indicator)
            );
            
            // Classification par priorit√©
            
            // 1. V√©rifier si c'est hors scope
            if (outOfScopeKeywords.some(keyword => lowerMessage.includes(keyword))) {
                return {
                    type: 4,
                    category: 'out_of_scope',
                    description: 'Demande hors scope - pas un probl√®me audiovisuel',
                    needsRoom: false
                };
            }
            
            // 2. V√©rifier si c'est non-audiovisuel (priorit√© haute)
            if (nonAVKeywords.some(keyword => lowerMessage.includes(keyword))) {
                console.log(`üè¢ [NonAV] D√©tection probl√®me non-audiovisuel: "${message}" contient mot-cl√© immeubles`);
                return {
                    type: 3,
                    category: 'non_audiovisual',
                    description: 'Probl√®me non-audiovisuel - service des immeubles',
                    needsRoom: false
                };
            }
            
            // 3. V√©rifier si c'est AV dans le syst√®me
            if (avSystemKeywords.some(keyword => lowerMessage.includes(keyword))) {
                return {
                    type: 1,
                    category: 'av_system',
                    description: 'Probl√®me √©quipement AV dans le syst√®me SavQonnect',
                    needsRoom: !hasRoomInformation(message),
                    hasEquipment: true
                };
            }
            
            // 4. V√©rifier si c'est AV externe
            if (avExternalKeywords.some(keyword => lowerMessage.includes(keyword))) {
                return {
                    type: 2,
                    category: 'av_external',
                    description: 'Probl√®me √©quipement AV hors syst√®me - redirection SEA',
                    needsRoom: !hasRoomInformation(message),
                    hasEquipment: true
                };
            }
            
            // 5. Si c'est un probl√®me mais pas clairement cat√©goris√©
            if (hasProblemIndicator) {
                // Assumer que c'est potentiellement AV si c'est un probl√®me technique
                return {
                    type: 1,
                    category: 'av_system_assumed',
                    description: 'Probl√®me technique - assume √©quipement AV syst√®me',
                    needsRoom: !hasRoomInformation(message),
                    hasEquipment: false
                };
            }
            
            // 6. Par d√©faut, consid√©rer comme hors scope
            return {
                type: 4,
                category: 'out_of_scope',
                description: 'Demande non identifi√©e - hors scope',
                needsRoom: false
            };
        }

        /**
         * V√©rifie si le message contient des informations sur la salle
         */
        function hasRoomInformation(message) {
            // Rechercher les patterns de salle (ex: A-1750, a-1730, B-2500, SH-R200, DS-4000, etc.)
            const roomPattern = /\b([a-zA-Z]{1,2})-?([a-zA-Z]?\d{3,4})\b/i;
            const hasRoom = roomPattern.test(message);
            
            // Rechercher mentions de pavillon/b√¢timent
            const buildingPattern = /\b(pavillon|b√¢timent|building)\s+([a-zA-Z]{1,2})\b/i;
            const hasBuilding = buildingPattern.test(message);
            
            console.log(`üîç [RoomDetection] Message: "${message}", Pattern d√©tect√©: ${hasRoom || hasBuilding}`);
            return hasRoom || hasBuilding;
        }

        /**
         * G√®re les messages hors scope
         */
        function handleOutOfScopeMessage(message) {
            addMessage('system', 'ü§ñ Je suis votre assistant audiovisuel pour cette salle. Je peux vous aider avec les probl√®mes de projecteur, microphone, son, etc. Que puis-je faire pour vous ?', {
                suggestions: ['Probl√®me projecteur', 'Probl√®me audio', 'Probl√®me r√©seau']
            });
        }

        /**
         * G√®re les probl√®mes r√©seau avec banni√®re moderne Services Informatiques
         */
        function handleNetworkProblem(message) {
            console.log('üíª [SIEscalation] Affichage de la banni√®re Services Informatiques pour probl√®me r√©seau');
            
            // ‚úÖ CORRECTION: Fermer toutes les banni√®res SI existantes AVANT d'en cr√©er une nouvelle
            const existingSiBanners = document.querySelectorAll('[id^="escalation_si_"]');
            const existingSiOverlays = document.querySelectorAll('[id^="overlay_escalation_si_"]');
            
            existingSiBanners.forEach(banner => {
                console.log(`üö´ [CleanupSIBanner] Suppression banni√®re SI existante: ${banner.id}`);
                banner.remove();
            });
            
            existingSiOverlays.forEach(overlay => {
                console.log(`üö´ [CleanupSIOverlay] Suppression overlay SI existant: ${overlay.id}`);
                overlay.remove();
            });
            
            const currentRoom = getCurrentRoom();
            
            // Cr√©er la banni√®re SI avec overlay plein √©cran
            const escalationId = `escalation_si_${Date.now()}`;
            
            // Cr√©er l'overlay plein √©cran avec flou agressif
            const overlayDiv = document.createElement('div');
            overlayDiv.id = `overlay_${escalationId}`;
            overlayDiv.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(20px);
                z-index: 9998;
                cursor: pointer;
            `;
            
            // Cr√©er la banni√®re SI
            const escalationDiv = document.createElement('div');
            escalationDiv.id = escalationId;
            escalationDiv.className = 'escalation-compact fade-in';
            escalationDiv.style.cssText = `
                background: rgba(255, 255, 255, 0.98);
                border-radius: 12px;
                padding: 2rem;
                color: black !important;
                text-align: center;
                box-shadow: 0 20px 40px rgba(0,0,0,0.3);
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 9999;
                width: 90%;
                max-width: 600px;
                max-height: 80vh;
                overflow-y: auto;
            `;
            
            escalationDiv.innerHTML = `
                <div class="escalation-header" style="margin-bottom: 1.5rem;">
                    <div class="escalation-image-container" style="text-align: center; margin-bottom: 1rem;">
                        <img id="si-logo" src="assets/SI.png" alt="Services Informatiques UQAM" style="max-width: 200px; height: auto; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.2);">
                    </div>
                    <div class="escalation-text">
                        <strong style="color: black !important; font-weight: 600; font-size: 1.4rem; display: block; margin-bottom: 0.5rem;">Services Informatiques UQAM</strong>
                        <span class="escalation-subtitle" style="color: black !important; font-weight: 700; font-size: 1.1rem;">Probl√®me r√©seau - Salle ${currentRoom}</span>
                    </div>
                    </div>
                    
                <div class="si-contact-content" style="margin: 1.5rem 0; text-align: left;">
                    <p style="color: black !important; font-size: 1rem; line-height: 1.5; margin-bottom: 1.5rem;">
                        Pour les probl√®mes de r√©seau, connectivit√© Internet, Wi-Fi, ou √©quipements informatiques dans la salle ${currentRoom}, veuillez contacter les Services Informatiques.
                    </p>
                    
                    <div class="si-contact-info" style="background: rgba(0,0,0,0.05); padding: 1rem; border-radius: 8px; margin: 1rem 0;">
                        <div class="si-contact-primary" style="display: flex; align-items: center; margin-bottom: 0.75rem; gap: 0.5rem;">
                            <span style="font-size: 1.2rem;">üìû</span>
                            <strong style="color: black !important; font-size: 1.1rem;">SI : 514-987-3000</strong>
                            <span style="color: black !important; opacity: 0.7; font-size: 0.9rem;">(poste 5050)</span>
                            </div>
                        <div class="si-contact-secondary" style="display: flex; align-items: center; gap: 0.5rem;">
                            <span style="font-size: 1.2rem;">üåê</span>
                            <a href="https://servicesinformatiques.uqam.ca/" target="_blank" style="color: #2196F3; text-decoration: none; font-weight: 500;">servicesinformatiques.uqam.ca</a>
                        </div>
                            </div>
                        </div>
                        
                <div class="escalation-actions" style="display: flex; gap: 1rem; justify-content: center; margin-top: 1.5rem;">
                    <button class="escalation-btn secondary" onclick="closeEscalationBanner('${escalationId}')" style="
                        color: black !important;
                        background: rgba(255,255,255,0.2);
                        border: 1px solid rgba(255,255,255,0.3);
                        padding: 0.75rem 1.5rem;
                        border-radius: 8px;
                        cursor: pointer;
                        font-weight: 500;
                        font-size: 0.9rem;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,255,255,0.3)'" onmouseout="this.style.background='rgba(255,255,255,0.2)'">
                        ‚úï Fermer
                    </button>
                    <button class="escalation-btn primary" onclick="window.open('tel:514-987-3000', '_self')" style="
                        color: black !important;
                        background: rgba(255,255,255,0.9);
                        border: none;
                        padding: 0.75rem 1.5rem;
                        border-radius: 8px;
                        cursor: pointer;
                        font-weight: 500;
                        font-size: 0.9rem;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,255,255,1)'" onmouseout="this.style.background='rgba(255,255,255,0.9)'">
                        üìû Appeler SI
                    </button>
                    <button class="escalation-btn primary" onclick="window.open('https://servicesinformatiques.uqam.ca/', '_blank')" style="
                        color: black !important;
                        background: rgba(255,255,255,0.9);
                        border: none;
                        padding: 0.75rem 1.5rem;
                        border-radius: 8px;
                        cursor: pointer;
                        font-weight: 500;
                        font-size: 0.9rem;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,255,255,1)'" onmouseout="this.style.background='rgba(255,255,255,0.9)'">
                        üåê Site web
                    </button>
                        </div>
            `;
            
            // ‚úÖ CORRECTION: Fermer au clic sur l'overlay mais PAS sur les √©l√©ments internes
            overlayDiv.onclick = (event) => {
                if (event.target === overlayDiv) {
                    closeEscalationBanner(escalationId);
                }
            };
            
            // ‚úÖ Emp√™cher la propagation des √©v√©nements depuis la banni√®re
            escalationDiv.onclick = (event) => {
                event.stopPropagation();
            };
            
            // Ajouter l'overlay et la banni√®re au body
            document.body.appendChild(overlayDiv);
            document.body.appendChild(escalationDiv);
            
            console.log(`üíª [SIBanner] Banni√®re Services Informatiques affich√©e pour salle ${currentRoom}`);
        }

        /**
         * G√®re les probl√®mes non-audiovisuels avec banni√®re moderne SIM
         */
        function handleNonAudiovisualProblem(message) {
            console.log('üè¢ [SIMEscalation] Affichage de la banni√®re SIM pour probl√®me non-audiovisuel');
            
            // ‚úÖ CORRECTION: Fermer toutes les banni√®res SIM existantes AVANT d'en cr√©er une nouvelle
            const existingSimBanners = document.querySelectorAll('[id^="escalation_sim_"]');
            const existingSimOverlays = document.querySelectorAll('[id^="overlay_escalation_sim_"]');
            
            existingSimBanners.forEach(banner => {
                console.log(`üö´ [CleanupSIMBanner] Suppression banni√®re SIM existante: ${banner.id}`);
                banner.remove();
            });
            
            existingSimOverlays.forEach(overlay => {
                console.log(`üö´ [CleanupSIMOverlay] Suppression overlay SIM existant: ${overlay.id}`);
                overlay.remove();
            });
            
            const currentRoom = getCurrentRoom();
            
            // Cr√©er la banni√®re SIM avec overlay plein √©cran
            const escalationId = `escalation_sim_${Date.now()}`;
            
            // Cr√©er l'overlay plein √©cran avec flou agressif
            const overlayDiv = document.createElement('div');
            overlayDiv.id = `overlay_${escalationId}`;
            overlayDiv.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(20px);
                z-index: 9998;
                cursor: pointer;
            `;
            
            // Cr√©er la banni√®re SIM
            const escalationDiv = document.createElement('div');
            escalationDiv.id = escalationId;
            escalationDiv.className = 'escalation-compact fade-in';
            escalationDiv.style.cssText = `
                background: rgba(255, 255, 255, 0.98);
                border-radius: 12px;
                padding: 2rem;
                color: black !important;
                text-align: center;
                box-shadow: 0 20px 40px rgba(0,0,0,0.3);
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 9999;
                width: 90%;
                max-width: 600px;
                max-height: 80vh;
                overflow-y: auto;
            `;
            
            escalationDiv.innerHTML = `
                <div class="escalation-header" style="margin-bottom: 1.5rem;">
                    <div class="escalation-image-container" style="text-align: center; margin-bottom: 1rem;">
                        <img id="sim-logo" src="assets/SIM.png" alt="Service des Immeubles UQAM" style="max-width: 200px; height: auto; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.2);">
                    </div>
                    <div class="escalation-text">
                        <strong style="color: black !important; font-weight: 600; font-size: 1.4rem; display: block; margin-bottom: 0.5rem;">Service des Immeubles UQAM</strong>
                        <span class="escalation-subtitle" style="color: black !important; font-weight: 700; font-size: 1.1rem;">Probl√®me non-audiovisuel - Salle ${currentRoom}</span>
                    </div>
                </div>
                
                <div class="sim-contact-content" style="margin: 1.5rem 0; text-align: left;">
                    <p style="color: black !important; font-size: 1rem; line-height: 1.5; margin-bottom: 1.5rem;">
                        Pour les probl√®mes d'infrastructure, d'√©lectricit√©, de plomberie, de chauffage ou de climatisation dans la salle ${currentRoom}, veuillez contacter le Service des Immeubles.
                    </p>
                    
                    <div class="sim-contact-info" style="background: rgba(0,0,0,0.05); padding: 1rem; border-radius: 8px; margin: 1rem 0;">
                        <div class="sim-contact-primary" style="display: flex; align-items: center; margin-bottom: 0.75rem; gap: 0.5rem;">
                            <span style="font-size: 1.2rem;">üìû</span>
                            <strong style="color: black !important; font-size: 1.1rem;">SIM : 514-987-3141</strong>
                            <span style="color: black !important; opacity: 0.7; font-size: 0.9rem;">(poste 3141)</span>
                        </div>
                        <div class="sim-contact-secondary" style="display: flex; align-items: center; gap: 0.5rem;">
                            <span style="font-size: 1.2rem;">üåê</span>
                            <a href="https://sim.uqam.ca/" target="_blank" style="color: #2196F3; text-decoration: none; font-weight: 500;">sim.uqam.ca</a>
                        </div>
                    </div>
                </div>
                
                <div class="escalation-actions" style="display: flex; gap: 1rem; justify-content: center; margin-top: 1.5rem;">
                    <button class="escalation-btn secondary" onclick="closeEscalationBanner('${escalationId}')" style="
                        color: black !important;
                        background: rgba(255,255,255,0.2);
                        border: 1px solid rgba(255,255,255,0.3);
                        padding: 0.75rem 1.5rem;
                        border-radius: 8px;
                        cursor: pointer;
                        font-weight: 500;
                        font-size: 0.9rem;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,255,255,0.3)'" onmouseout="this.style.background='rgba(255,255,255,0.2)'">
                        ‚úï Fermer
                    </button>
                    <button class="escalation-btn primary" onclick="window.open('tel:514-987-3141', '_self')" style="
                        color: black !important;
                        background: rgba(255,255,255,0.9);
                        border: none;
                        padding: 0.75rem 1.5rem;
                        border-radius: 8px;
                        cursor: pointer;
                        font-weight: 500;
                        font-size: 0.9rem;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,255,255,1)'" onmouseout="this.style.background='rgba(255,255,255,0.9)'">
                        üìû Appeler SIM
                    </button>
                    <button class="escalation-btn primary" onclick="window.open('https://sim.uqam.ca/', '_blank')" style="
                        color: black !important;
                        background: rgba(255,255,255,0.9);
                        border: none;
                        padding: 0.75rem 1.5rem;
                        border-radius: 8px;
                        cursor: pointer;
                        font-weight: 500;
                        font-size: 0.9rem;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,255,255,1)'" onmouseout="this.style.background='rgba(255,255,255,0.9)'">
                        üåê Site web
                    </button>
                </div>
            `;
            
            // ‚úÖ CORRECTION: Fermer au clic sur l'overlay mais PAS sur les √©l√©ments internes
            overlayDiv.onclick = (event) => {
                if (event.target === overlayDiv) {
                    closeEscalationBanner(escalationId);
                }
            };
            
            // ‚úÖ Emp√™cher la propagation des √©v√©nements depuis la banni√®re
            escalationDiv.onclick = (event) => {
                event.stopPropagation();
            };
            
            // Ajouter l'overlay et la banni√®re au body
            document.body.appendChild(overlayDiv);
            document.body.appendChild(escalationDiv);
            
            console.log(`üè¢ [SIMBanner] Banni√®re SIM affich√©e pour salle ${currentRoom}`);
        }

        /**
         * G√®re les probl√®mes AV externes avec salle
         */
        function handleExternalAVProblemWithRoom(message) {
            const currentRoom = getCurrentRoom();
            addMessage('system', `üìû <strong>Contact SEA</strong><br><br>Pour ce type d'√©quipement dans la salle ${currentRoom}, veuillez contacter directement le SEA au <strong>6135</strong>.`, {
                suggestions: ['Appeler SEA', 'Probl√®me syst√®me', 'Autre salle']
            });
        }

        // ‚úÖ NOUVEAU: Timer d'escalade automatique pour √©viter les blocages
        let escalationTimeoutId = null;
        
        function startEscalationTimeout(problemType, room) {
            // Annuler le timer pr√©c√©dent si existant
            if (escalationTimeoutId) {
                clearTimeout(escalationTimeoutId);
            }
            
            escalationTimeoutId = setTimeout(() => {
                console.log(`‚è∞ [EscalationTimeout] Timeout atteint pour probl√®me ${problemType} ‚Üí Escalade forc√©e`);
                
                // ‚úÖ CORRECTION: V√©rifier les tickets existants AVANT l'escalade par timeout
                if (hasExistingTicket(room)) {
                    const lastTicket = getLastSessionTicket(room);
                    console.log(`üé´ [EscalationTimeout] Timeout mais ticket ${lastTicket.number} existe ‚Üí Banni√®re ticket existant`);
                    showExistingTicketBanner(lastTicket);
                } else {
                    showSEAEscalationBanner({
                        intent: `${problemType}_problem`,
                        confidence: 0.95,
                        room: room,
                        escalation_needed: true,
                        escalation_reason: `Aucune correction automatique trouv√©e - Intervention technique requise`
                    });
                }
            }, 10000); // ‚úÖ 10 secondes pour laisser le temps au RAG de r√©pondre
        }
        
        function clearEscalationTimeout() {
            if (escalationTimeoutId) {
                clearTimeout(escalationTimeoutId);
                escalationTimeoutId = null;
                console.log('‚è∞ [EscalationTimeout] Timer d\'escalade annul√©');
            }
        }

        // ===== BANNI√àRE D'ALLUMAGE PROJECTEUR (inspir√©e modale PJLink) =====
        
        function showProjectorPoweringBanner(roomName) {
            console.log(`üîå [ProjectorPower] Banni√®re allumage projecteur pour ${roomName}`);
            
            // Supprimer une √©ventuelle banni√®re existante
            const existingBanner = document.getElementById('projector-powering-banner');
            if (existingBanner) {
                existingBanner.remove();
            }
            
            // Cr√©er la banni√®re d'allumage
            const banner = document.createElement('div');
            banner.id = 'projector-powering-banner';
            banner.className = 'projector-powering-banner show';
            
            banner.innerHTML = `
                <div class="powering-content">
                    <div class="powering-icon">
                        <i class="fas fa-power-off warming-rotation"></i>
                    </div>
                    <div class="powering-text">
                        <h3>üîå Allumage du projecteur en cours...</h3>
                        <p>Salle ${roomName} - Patientez pendant la mise sous tension</p>
                        <div class="power-progress">
                            <div class="progress-bar">
                                <div class="progress-fill warming-fill"></div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.appendChild(banner);
            
            // Commencer la surveillance de l'√©tat du projecteur
            startProjectorStatusMonitoring(roomName);
        }
        
        function startProjectorStatusMonitoring(roomName) {
            console.log(`üëÅÔ∏è [ProjectorMonitoring] Surveillance √©tat projecteur ${roomName}`);
            
            let checkCount = 0;
            const maxChecks = 30; // 30 checks = 30 secondes max
            
            const monitoringInterval = setInterval(async () => {
                checkCount++;
                console.log(`üîç [ProjectorMonitoring] Check ${checkCount}/${maxChecks} pour ${roomName}`);
                
                try {
                    // ‚úÖ UTILISER API TEMPS R√âEL au lieu du cache
                    const response = await fetch(`${API_BASE_URL}/api/room/equipment?room=${encodeURIComponent(roomName)}&refresh=true`);
                    
                    if (response.ok) {
                        const data = await response.json();
                        if (data.status === 'success' && data.devices) {
                            const projector = data.devices.find(d => d.technology === 'PJLINK' || d.family_type === 'PJLINK');
                            
                            if (projector) {
                                console.log(`üìä [ProjectorMonitoring] √âtat projecteur: ${projector.status}, Power: ${projector.power_state}`);
                                
                                // ‚úÖ CRIT√àRES PLUS LARGES pour d√©tecter l'allumage
                                const isProjectorOn = projector.status === 'online' || 
                                                    projector.status === 'ON' || 
                                                    projector.power_state === 'ON' ||
                                                    projector.power_state === 'WARMUP' ||
                                                    projector.power_state === 'WARMING_UP';
                                
                                if (isProjectorOn) {
                                    console.log(`‚úÖ [ProjectorMonitoring] Projecteur allum√© ! Transition vers AV Mute`);
                                    clearInterval(monitoringInterval);
                                    
                                    // ‚úÖ ATTENDRE 3 SECONDES avant AV Mute (temps de stabilisation)
                                    setTimeout(() => {
                                        updateProjectorBannerToAVMute(roomName);
                                        
                                                                // ‚úÖ V√âRIFIER ET CORRIGER AV MUTE automatiquement
                        setTimeout(async () => {
                            console.log(`üéØ [ProjectorMonitoring] V√©rification √©tat AV Mute temps r√©el`);
                            await checkAndFixAVMuteStatus(roomName, projector.name || projector.device_name || `PROJ-${roomName}`);
                        }, 2000);
                                    }, 3000);
                                    return;
                                }
                            }
                        }
                    }
                    
                    // ‚úÖ FALLBACK : Si apr√®s 10 checks toujours pas d√©tect√©, forcer AV Mute
                    if (checkCount >= 10) {
                        console.log(`üéØ [ProjectorMonitoring] Fallback apr√®s 10s ‚Üí Forcer correction AV Mute`);
                        clearInterval(monitoringInterval);
                        updateProjectorBannerToAVMute(roomName);
                        
                        setTimeout(async () => {
                            console.log(`üéØ [ProjectorMonitoring] Fallback - V√©rification AV Mute`);
                            await checkAndFixAVMuteStatus(roomName, `PROJ-${roomName}`); // Nom bas√© sur la salle
                        }, 2000);
                        return;
                    }
                    
                } catch (error) {
                    console.log(`‚ö†Ô∏è [ProjectorMonitoring] Erreur surveillance: ${error.message}`);
                }
                
                // Timeout apr√®s 30 secondes
                if (checkCount >= maxChecks) {
                    console.log(`‚è∞ [ProjectorMonitoring] Timeout surveillance pour ${roomName}`);
                    clearInterval(monitoringInterval);
                    hideProjectorPoweringBanner();
                }
            }, 1000); // Check toutes les secondes
        }
        
        function updateProjectorBannerToAVMute(roomName) {
            const banner = document.getElementById('projector-powering-banner');
            if (!banner) return;
            
            console.log(`üéØ [ProjectorBanner] Transition vers AV Mute pour ${roomName}`);
            
            // Mettre √† jour le contenu pour AV Mute
            const content = banner.querySelector('.powering-content');
            if (content) {
                content.innerHTML = `
                    <div class="powering-icon">
                        <i class="fas fa-eye-slash av-mute-pulse"></i>
                    </div>
                    <div class="powering-text">
                        <h3>üì∫ Projecteur allum√© - Correction AV Mute...</h3>
                        <p>Salle ${roomName} - Activation de l'affichage</p>
                        <div class="power-progress">
                            <div class="progress-bar">
                                <div class="progress-fill success-fill"></div>
                            </div>
                        </div>
                    </div>
                `;
            }
            
            // Auto-hide apr√®s 15 secondes (plus de temps pour voir)
            setTimeout(() => {
                hideProjectorPoweringBanner();
            }, 15000);
        }
        
        function hideProjectorPoweringBanner() {
            const banner = document.getElementById('projector-powering-banner');
            if (banner) {
                banner.classList.remove('show');
                setTimeout(() => {
                    if (banner.parentNode) {
                        banner.parentNode.removeChild(banner);
                    }
                }, 300);
                console.log(`üö´ [ProjectorBanner] Banni√®re allumage masqu√©e`);
            }
        }
        
        // ‚úÖ NOUVELLE FONCTION : V√©rifier et corriger AV Mute temps r√©el
        async function checkAndFixAVMuteStatus(roomName, projectorName) {
            console.log(`üîá [AVMuteCheck] V√©rification √©tat AV Mute pour ${projectorName} (${roomName})`);
            
            try {
                // ‚úÖ √âTAPE 1 : V√©rifier l'√©tat actuel AV Mute
                console.log(`üåê [AVMuteCheck] URL appel√©e: ${API_BASE_URL}/api/pjlink/av-mute-status?device=${encodeURIComponent(projectorName)}`);
                const statusResponse = await fetch(`${API_BASE_URL}/api/pjlink/av-mute-status?device=${encodeURIComponent(projectorName)}`);
                
                console.log(`üì° [AVMuteCheck] R√©ponse statut: ${statusResponse.status} ${statusResponse.statusText}`);
                
                if (!statusResponse.ok) {
                    console.log(`‚ùå [AVMuteCheck] Erreur r√©cup√©ration statut: ${statusResponse.status}`);
                    const errorText = await statusResponse.text();
                    console.log(`üìÑ [AVMuteCheck] D√©tails erreur: ${errorText}`);
                    return;
                }
                
                const statusData = await statusResponse.json();
                console.log(`üìä [AVMuteCheck] Statut AV Mute:`, statusData);
                
                // ‚úÖ √âTAPE 2 : Si AV Mute actif ‚Üí Le corriger
                if (statusData.av_muted) {
                    console.log(`üîá [AVMuteCheck] AV Mute d√©tect√© ‚Üí Correction automatique`);
                    
                    // ‚úÖ BANNI√àRE D'ATTENTE ORANGE pendant correction (minimum 15 secondes)
                    showWaitingBanner('üîß Correction AV Mute en cours...', 'D√©sactivation du mode muet sur le projecteur');
                    window.waitingBannerStartTime = Date.now(); // ‚úÖ Nouveau timestamp
                    
                    // ‚úÖ Utiliser l'endpoint direct AV Mute public (sans auth)
                    console.log(`üîß [AVMuteCheck] Correction directe AV Mute sur ${projectorName}`);
                    const fixResponse = await fetch(`${API_BASE_URL}/api/pjlink/av-mute-control`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            device_name: projectorName,
                            video_mute: false,
                            audio_mute: false
                        })
                    });
                    
                    if (fixResponse.ok) {
                        const fixData = await fixResponse.json();
                        console.log(`‚úÖ [AVMuteCheck] AV Mute corrig√© avec succ√®s:`, fixData);
                        
                        // ‚úÖ ATTENDRE MINIMUM 15 SECONDES pour que le client voie la banni√®re d'attente
                        console.log(`‚è≥ [AVMuteCheck] Banni√®re d'attente visible pendant 15s minimum...`);
                        setTimeout(async () => {
                            console.log(`üîç [AVMuteCheck] V√©rification post-correction...`);
                            const verifyResponse = await fetch(`${API_BASE_URL}/api/pjlink/av-mute-status?device=${encodeURIComponent(projectorName)}`);
                            if (verifyResponse.ok) {
                                const verifyData = await verifyResponse.json();
                                console.log(`üìä [AVMuteCheck] √âtat post-correction:`, verifyData);
                                
                                if (!verifyData.av_muted) {
                                    console.log(`üéâ [AVMuteCheck] SUCC√àS CONFIRM√â : AV Mute vraiment d√©sactiv√© !`);
                                } else {
                                    console.log(`‚ö†Ô∏è [AVMuteCheck] PROBL√àME : AV Mute toujours actif apr√®s correction !`);
                                }
                            }
                            
                            // ‚úÖ MASQUER BANNI√àRE D'ATTENTE et afficher succ√®s
                            console.log(`üéØ [AVMuteCheck] Masquer banni√®re d'attente apr√®s 15s minimum`);
                            hideWaitingBanner();
                            setTimeout(() => {
                                // ‚úÖ AFFICHER BANNI√àRE SUCC√àS APR√àS masquage banni√®re d'attente
                                showAutoActionResult(
                                    { 
                                        type: 'av_mute_correction', 
                                        description: 'Correction AV Mute termin√©e' 
                                    }, 
                                    { 
                                        success: true, 
                                        message: `AV Mute d√©sactiv√© sur ${projectorName} - Image restaur√©e !` 
                                    }
                                );
                            }, 500);
                        }, 15000); // ‚úÖ 15 secondes minimum pour banni√®re d'attente
                        
                    } else {
                        const errorData = await fixResponse.json();
                        console.log(`‚ùå [AVMuteCheck] √âchec correction AV Mute: ${fixResponse.status}`, errorData);
                    }
                    
                } else {
                    console.log(`‚úÖ [AVMuteCheck] AV Mute d√©j√† inactif - Aucune correction n√©cessaire`);
                    
                    // ‚úÖ MASQUER LA BANNI√àRE D'ATTENTE car projecteur d√©j√† op√©rationnel
                    console.log(`üéØ [AVMuteCheck] Projecteur op√©rationnel - Masquer banni√®re d'attente`);
                    hideWaitingBanner();
                    
                    // ‚úÖ AFFICHER BANNI√àRE SUCC√àS APR√àS masquage banni√®re d'attente
                    setTimeout(() => {
                        showAutoActionResult(
                            { 
                                type: 'projector_operational', 
                                description: 'Projecteur op√©rationnel' 
                            }, 
                            { 
                                success: true, 
                                message: `Projecteur ${projectorName} d√©j√† op√©rationnel - Aucune action n√©cessaire !` 
                            }
                        );
                    }, 500);
                }
                
                            } catch (error) {
                console.log(`‚ö†Ô∏è [AVMuteCheck] Erreur v√©rification AV Mute: ${error.message}`);
            }
        }
        
        // ‚úÖ FONCTION DE TEST MANUAL (temporaire)
        window.testAVMute = function() {
            const room = getCurrentRoom();
            if (room) {
                console.log(`üß™ [TEST] Test manuel AV Mute pour ${room}`);
                checkAndFixAVMuteStatus(room, `PROJ-${room}`);
            } else {
                console.log(`‚ùå [TEST] Aucune salle s√©lectionn√©e`);
            }
        }

        // ‚úÖ NOUVELLE FONCTION DE TEST : V√©rifier banni√®re d'attente
        window.testWaitingBanner = function() {
            console.log(`üß™ [TEST] Test banni√®re d'attente`);
            showWaitingBanner('üß™ Test banni√®re d\'attente', 'Ceci est un test de la banni√®re orange');
            
            // Masquer automatiquement apr√®s 5 secondes
            setTimeout(() => {
                hideWaitingBanner();
                console.log(`‚úÖ [TEST] Banni√®re d'attente masqu√©e automatiquement`);
            }, 5000);
        }

        // ‚úÖ NOUVELLE FONCTION DE TEST : V√©rifier √©tat complet projecteur
        window.testProjectorStatus = async function() {
            const room = getCurrentRoom();
            if (!room) {
                console.log(`‚ùå [TEST] Aucune salle s√©lectionn√©e`);
                return;
            }
            
            console.log(`üß™ [TEST] Test √©tat complet projecteur pour ${room}`);
            
            try {
                // Test 1: Power status
                console.log(`üîå [TEST] Test endpoint power-status...`);
                const powerResponse = await fetch(`${API_BASE_URL}/api/pjlink/power-status?device=PROJ-${room}`);
                if (powerResponse.ok) {
                    const powerData = await powerResponse.json();
                    console.log(`‚úÖ [TEST] Power status:`, powerData);
                } else {
                    console.log(`‚ùå [TEST] Power status non disponible: ${powerResponse.status}`);
                }
                
                // Test 2: AV Mute status
                console.log(`üîá [TEST] Test endpoint av-mute-status...`);
                const avMuteResponse = await fetch(`${API_BASE_URL}/api/pjlink/av-mute-status?device=PROJ-${room}`);
                if (avMuteResponse.ok) {
                    const avMuteData = await avMuteResponse.json();
                    console.log(`‚úÖ [TEST] AV Mute status:`, avMuteData);
                } else {
                    console.log(`‚ùå [TEST] AV Mute status non disponible: ${avMuteResponse.status}`);
                }
                
            } catch (error) {
                console.log(`‚ùå [TEST] Erreur test: ${error.message}`);
            }
        }

        // ‚úÖ NOUVELLE FONCTION DE TEST : Forcer masquage banni√®re d'attente
        window.forceHideWaitingBanner = function() {
            console.log(`üß™ [TEST] For√ßage masquage banni√®re d'attente`);
            hideWaitingBanner();
            console.log(`‚úÖ [TEST] Banni√®re d'attente forc√©ment masqu√©e`);
        }

        /**
         * Traite la r√©ponse du backend (comme dans l'original)
         */
        function processResponse(data) {
            if (!data) return;

            console.log('üì• [Frontend] R√©ponse re√ßue:', data);
            
            // ‚úÖ GESTION INTELLIGENTE du timer d'escalade selon la r√©ponse
            if (data.auto_executed) {
                // Action corrective prise ‚Üí Annuler le timer car probl√®me potentiellement r√©solu
                console.log('‚úÖ [EscalationTimeout] Action automatique ex√©cut√©e - Timer annul√© (probl√®me corrig√©)');
                clearEscalationTimeout();
            } else {
                // Pas d'action corrective ‚Üí Garder le timer pour escalade si besoin
                console.log('‚è∞ [EscalationTimeout] Aucune action automatique - Timer maintenu pour escalade √©ventuelle');
            }
            
            // ‚úÖ CORRECTION CRITIQUE : EX√âCUTION AUTOMATIQUE DES ACTIONS (comme assistant-salle-av-copie.html)
            if (data.auto_executed && data.actions && data.actions.length > 0) {
                console.log('üîÑ [ProcessResponse] Ex√©cution automatique des actions re√ßues');
                setTimeout(() => {
                    executeAutoActions(data.actions);
                }, 1000); // Attendre 1 seconde pour que le message soit affich√©
            }
            
                            // ‚úÖ Si action r√©ussie, incr√©menter compteur et v√©rifier AV Mute
                if (data.auto_executed && data.auto_result && data.auto_result.includes('‚úÖ')) {
                    console.log('üéØ [ProcessResponse] Action r√©ussie - Incr√©menter compteur de corrections');
                    
                    // Incr√©menter le compteur de corrections pour adapter le message suivant
                    const currentRoom = getCurrentRoom();
                    if (currentRoom) {
                        const sessionCorrections = sessionStorage.getItem(`corrections_${currentRoom}`) || '0';
                        const nbCorrections = parseInt(sessionCorrections);
                        sessionStorage.setItem(`corrections_${currentRoom}`, `${nbCorrections + 1}`);
                        console.log(`üìä [ProcessResponse] Corrections pour ${currentRoom}: ${nbCorrections + 1}`);
                        
                        // ‚úÖ FORCER V√âRIFICATION AV MUTE apr√®s action r√©ussie
                        if (data.auto_result.includes('Allumer')) {
                            console.log('üîá [ProcessResponse] Action allumage d√©tect√©e - V√©rification AV Mute dans 3s');
                            setTimeout(async () => {
                                await checkAndFixAVMuteStatus(currentRoom, `PROJ-${currentRoom}`);
                            }, 3000); // 3 secondes pour stabilisation
                        }
                    }
                }
                
                // ‚úÖ CORRECTION : G√©rer le cas o√π auto_executed est true mais actions est vide (action d√©j√† ex√©cut√©e c√¥t√© serveur)
            if (data.auto_executed && (!data.actions || data.actions.length === 0)) {
                console.log('üîÑ [ProcessResponse] Action d√©j√† ex√©cut√©e c√¥t√© serveur - MASQUER BANNI√àRE D\'ATTENTE');
                
                // ‚úÖ ANNULER IMM√âDIATEMENT le timer d'escalade car action d√©j√† ex√©cut√©e
                clearEscalationTimeout();
                console.log('üö´ [ProcessResponse] Timer escalade annul√© - Action d√©j√† ex√©cut√©e c√¥t√© serveur');
                
                // ‚úÖ MASQUER LA BANNI√àRE D'ATTENTE apr√®s un d√©lai minimum
                const bannerStartTime = window.waitingBannerStartTime || Date.now();
                const elapsedTime = Date.now() - bannerStartTime;
                const remainingTime = Math.max(0, 5000 - elapsedTime); // Minimum 5 secondes
                
                console.log(`‚è≥ [ProcessResponse] Banni√®re affich√©e depuis ${elapsedTime}ms, masquer dans ${remainingTime}ms`);
                
                setTimeout(() => {
                    hideWaitingBanner();
                    console.log('‚úÖ [ProcessResponse] Banni√®re d\'attente masqu√©e apr√®s action serveur');
                    
                    // ‚úÖ AFFICHER BANNI√àRE SUCC√àS APR√àS masquage banni√®re d'attente
                    setTimeout(() => {
                        showAutoActionResult(
                            { 
                                type: 'auto_correction', 
                                description: 'Correction automatique termin√©e' 
                            }, 
                            { 
                                success: true, 
                                message: 'Probl√®me r√©solu automatiquement par le syst√®me !' 
                            }
                        );
                    }, 500);
                }, remainingTime);
                
                return; // ‚úÖ STOPPER le traitement pour √©viter escalade
            }
            
            // üîç DEBUG: Analyser les actions pour comprendre pourquoi l'escalade ne se d√©clenche pas
            if (data.actions && data.actions.length > 0) {
                console.log('üîç [DEBUG] Actions trouv√©es:');
                data.actions.forEach((action, index) => {
                    console.log(`  ${index}: Type: ${action.type}, Command: ${action.command}, Label: ${action.label}`);
                    console.log(`      Description: ${action.description}`);
                });
            }

            // ‚úÖ LOGIQUE PROFESSIONNELLE AM√âLIOR√âE : D√©tecter "Tout fonctionne mais client insiste"
            const hasOnlyEscalationActions = data.actions && data.actions.length > 0 && 
                                           data.actions.every(action => 
                                               action.type === 'create_sea_ticket' || 
                                               action.command === 'create_ticket' ||
                                               action.label?.includes('Ticket SEA') ||
                                               action.label?.includes('Escalade')
                                           );
            
            // ‚úÖ NOUVELLE LOGIQUE: Actions techniques non auto-ex√©cut√©es = √©quipements fonctionnels
            const hasTechnicalActionsNotExecuted = data.actions && data.actions.length > 0 && 
                                                  data.actions.some(action => 
                                                      (action.type === 'pjlink_power' || 
                                                       action.type === 'pjlink_av_mute' || 
                                                       action.type === 'sennheiser_mute') && 
                                                      !data.auto_executed
                                                  );
            
            // ‚úÖ ESCALADE SIMPLIFI√âE : Si pas d'auto-correction, escalade directe imm√©diate
            if ((data.intent === 'video_problem' || data.intent === 'audio_problem') && 
                !data.auto_executed) {
                
                const problemType = data.intent === 'video_problem' ? 'vid√©o' : 'audio';
                console.log(`üéØ [EscaladeDirecte] Probl√®me ${problemType.toUpperCase()} sans correction automatique ‚Üí ESCALADE IMM√âDIATE`);
                
                // ‚úÖ CORRECTION: V√©rifier les tickets existants AVANT d'afficher la banni√®re SEA
                const currentRoom = getCurrentRoom();
                if (hasExistingTicket(currentRoom)) {
                    const lastTicket = getLastSessionTicket(currentRoom);
                    console.log(`üé´ [TicketExistant] Ticket d√©j√† cr√©√© ${lastTicket.number} ‚Üí Affichage banni√®re ticket existant au lieu de SEA`);
                    showExistingTicketBanner(lastTicket);
                    clearEscalationTimeout();
                    return;
                }
                
                // Annuler le timer car on escalade maintenant
                clearEscalationTimeout();
                
                showSEAEscalationBanner({
                    intent: data.intent,
                    confidence: 0.9,
                    room: currentRoom,
                    escalation_needed: true,
                    escalation_reason: `Probl√®me ${problemType} signal√© - Intervention technique requise`
                });
                return; // ‚úÖ STOP - Escalade directe sans message
            }

            // ‚úÖ LOGIQUE SIMPLIFI√âE FINALE : Plus de traitement complexe
            // Stocker juste le contexte pour les tickets si besoin
            latestRAGContext = data.rag_context || data;

            // ‚úÖ LOGIQUE SIMPLIFI√âE : Supprimer TOUS les messages de diagnostic en bas
            // L'utilisateur veut seulement : Correction automatique OU escalade directe
            // Pas de messages interm√©diaires "diagnostic", "probl√®me mineur", etc.
            
            console.log('üö´ [ProcessResponse] TOUS les messages de diagnostic supprim√©s - Logique binaire uniquement');
            // Plus de messages en bas du chat - Banni√®res uniquement
        }

        /**
         * D√©termine la raison de l'escalade (comme dans l'original)
         */
        function determineEscalationReason(data, escalationActions) {
            if (escalationActions.length > 0) {
                return "Le syst√®me recommande de cr√©er un ticket SEA pour ce probl√®me.";
            }
            if (data.confidence && data.confidence < 0.6) {
                return "Le syst√®me n'est pas s√ªr de pouvoir r√©soudre ce probl√®me automatiquement.";
            }
            if (data.solutions && data.solutions.length === 0 && data.problems && data.problems.length > 0) {
                return "Aucune solution automatique n'a √©t√© trouv√©e pour ce probl√®me.";
            }
            return "Une intervention technique pourrait √™tre n√©cessaire.";
        }

        /**
         * Affiche √† nouveau les palettes de probl√®mes
         */
        function showProblemPalettes() {
            const problemPalettes = document.getElementById('problemPalettes');
            const assistantResponse = document.getElementById('assistantResponse');
            
            // Afficher les palettes
            if (problemPalettes) {
                problemPalettes.style.display = 'block';
            }
            
            // Supprimer la r√©ponse de l'assistant
            if (assistantResponse) {
                assistantResponse.remove();
            }
            
            // Supprimer tous les r√©sultats d'actions automatiques
            const autoResults = document.querySelectorAll('.auto-result');
            autoResults.forEach(result => result.remove());
            
            // Supprimer toutes les interfaces d'escalade
            const escalationInterfaces = document.querySelectorAll('.escalation-interface');
            escalationInterfaces.forEach(interface => interface.remove());
        }

        /**
         * Ex√©cute les actions automatiques
         */
        async function executeAutoActions(actions) {
            // ‚úÖ AFFICHER BANNI√àRE D'ATTENTE ORANGE pendant ex√©cution des actions
            showWaitingBanner('üîß Ex√©cution des corrections...', 'Veuillez patienter pendant l\'application des solutions');
            
            for (const action of actions) {
                try {
                    console.log(`üîÑ Ex√©cution action automatique: ${action.type}`);
                    
                    // ‚úÖ Mettre √† jour le message de la banni√®re selon l'action
                    if (action.type === 'pjlink_power') {
                        showWaitingBanner('üîå Allumage du projecteur...', 'D√©marrage en cours, veuillez patienter');
                    } else if (action.type === 'pjlink_av_unmute') {
                        showWaitingBanner('üîß Correction AV Mute...', 'D√©sactivation du mode muet sur le projecteur');
                    }
                    
                    // Ex√©cuter l'action r√©elle selon son type
                    let result;
                    switch (action.type) {
                        case 'sennheiser_mute':
                            result = await executeAction('sennheiser_mute', action.device_id, {
                                host: action.device_name || action.host,
                                mute: action.mute
                            });
                            break;
                            
                        case 'pjlink_power':
                            result = await executeAction('pjlink_power', action.device_id, {
                                device_name: action.device_name,
                                power_on: action.power_on
                            });
                            break;
                            
                        case 'pjlink_av_unmute':
                            result = await executeAction('pjlink_av_mute', action.device_id, {
                                device_name: action.device_name,
                                video_mute: action.video_mute,
                                audio_mute: action.audio_mute
                            });
                            break;
                            
                        default:
                            console.warn(`Type d'action non reconnu: ${action.type}`);
                            result = { success: true, message: 'Action simul√©e' };
                    }
                    
                    // Afficher le r√©sultat dans une banni√®re de succ√®s
                    if (result && result.success) {
                        showAutoActionResult(action, result);
                    }
                    
                } catch (error) {
                    console.error(`Erreur lors de l'ex√©cution de l'action ${action.type}:`, error);
                    showAutoActionResult(action, { success: false, message: error.message });
                }
            }
            
            // ‚úÖ MASQUER BANNI√àRE D'ATTENTE apr√®s toutes les actions termin√©es
            hideWaitingBanner();
            
            // Retour automatique √† l'accueil apr√®s toutes les actions
            setTimeout(() => {
                console.log('üîÑ [AutoActions] Retour automatique √† l\'accueil apr√®s actions compl√®tes');
                returnToHome();
            }, 3000);
        }

        /**
         * Affiche le r√©sultat d'une action automatique
         */
        function showAutoActionResult(action, result) {
            console.log(`üìä [AutoActionResult] ${action.type}: ${result.success ? 'SUCC√àS' : '√âCHEC'} - ${result.message}`);
            
            if (result.success) {
                // ‚úÖ BANNI√àRE INTERACTIVE DE CORRECTION avec question OUI/NON
                showInteractiveCorrectionBanner(action, result);
            } else {
                // ‚ùå Petite banni√®re d'erreur (droite)
                const bannerDiv = document.createElement('div');
                bannerDiv.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: linear-gradient(135deg, #f44336 0%, #d32f2f 100%);
                    color: white;
                    padding: 1rem 1.5rem;
                    border-radius: 10px;
                    z-index: 9999;
                    box-shadow: 0 4px 20px rgba(0,0,0,0.3);
                    animation: slideInRight 0.3s ease-out;
                    max-width: 400px;
                    font-size: 0.9rem;
                    line-height: 1.4;
                `;
                
                bannerDiv.innerHTML = `
                    <div style="display: flex; align-items: center; gap: 0.5rem;">
                        <span style="font-size: 1.2rem;">‚ùå</span>
                        <span><strong>${action.description || action.type}</strong></span>
                    </div>
                    <div style="margin-top: 0.5rem; opacity: 0.9; font-size: 0.85rem;">
                        ${result.message || 'Erreur lors de l\'ex√©cution'}
                    </div>
                `;
                
                document.body.appendChild(bannerDiv);
                
                // Supprimer automatiquement apr√®s 4 secondes
                setTimeout(() => {
                    if (bannerDiv.parentNode) {
                        bannerDiv.style.animation = 'slideOutRight 0.3s ease-in';
                        setTimeout(() => bannerDiv.remove(), 300);
                    }
                }, 4000);
            }
        }

        /**
         * ‚úÖ NOUVELLE FONCTION : Banni√®re interactive de correction avec question OUI/NON
         */
        function showInteractiveCorrectionBanner(action, result) {
            console.log(`üéØ [InteractiveCorrection] Affichage banni√®re interactive: ${action.description}`);
            
            const bannerId = `interactive-correction-${Date.now()}`;
            
            // Cr√©er l'overlay plein √©cran avec flou
            const overlayDiv = document.createElement('div');
            overlayDiv.id = `overlay-${bannerId}`;
            overlayDiv.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.7);
                backdrop-filter: blur(10px);
                -webkit-backdrop-filter: blur(10px);
                z-index: 9998;
                cursor: pointer;
            `;
            
            // Cr√©er la banni√®re interactive avec style moderne
            const bannerDiv = document.createElement('div');
            bannerDiv.id = bannerId;
            bannerDiv.style.cssText = `
                background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
                color: white;
                border-radius: 16px;
                padding: 2.5rem;
                text-align: center;
                box-shadow: 0 25px 50px rgba(76, 175, 80, 0.4);
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 9999;
                width: 90%;
                max-width: 600px;
                animation: fadeIn 0.4s ease-out;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            `;
            
            bannerDiv.innerHTML = `
                <div style="font-size: 4rem; margin-bottom: 1.5rem;">‚úÖ</div>
                <h2 style="margin: 0 0 1rem 0; font-size: 1.8rem; font-weight: 600;">Correction automatique termin√©e !</h2>
                
                <div style="background: rgba(255,255,255,0.15); padding: 1.5rem; border-radius: 12px; margin: 2rem 0;">
                    <p style="margin: 0.5rem 0; font-size: 1.1rem;"><strong>üîß Action effectu√©e :</strong> ${action.description || 'Correction automatique'}</p>
                    <p style="margin: 0.5rem 0; font-size: 1.1rem;"><strong>üè¢ Salle :</strong> ${getCurrentRoom()}</p>
                    <p style="margin: 0.5rem 0; font-size: 1.1rem;"><strong>üìù D√©tails :</strong> ${result.message || 'Probl√®me r√©solu automatiquement'}</p>
                </div>
                
                <div style="margin: 2rem 0;">
                    <h3 style="margin: 0 0 1.5rem 0; font-size: 1.4rem; font-weight: 500;">Votre probl√®me est-il r√©gl√© ?</h3>
                    
                    <div style="display: flex; gap: 1rem; justify-content: center; flex-wrap: wrap;">
                        <button id="btn-oui-${bannerId}" style="
                            background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);
                            color: white;
                            border: none;
                            padding: 1rem 2rem;
                            border-radius: 12px;
                            font-size: 1.1rem;
                            font-weight: 600;
                            cursor: pointer;
                            transition: all 0.3s ease;
                            box-shadow: 0 4px 15px rgba(33, 150, 243, 0.3);
                            min-width: 120px;
                        " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                            ‚úÖ OUI
                        </button>
                        
                        <button id="btn-non-${bannerId}" style="
                            background: linear-gradient(135deg, #FF9800 0%, #F57C00 100%);
                            color: white;
                            border: none;
                            padding: 1rem 2rem;
                            border-radius: 12px;
                            font-size: 1.1rem;
                            font-weight: 600;
                            cursor: pointer;
                            transition: all 0.3s ease;
                            box-shadow: 0 4px 15px rgba(255, 152, 0, 0.3);
                            min-width: 120px;
                        " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                            ‚ùå NON
                        </button>
                    </div>
                </div>
                
                <div style="margin-top: 1.5rem; opacity: 0.8; font-size: 0.9rem;">
                    Cliquez sur OUI si le probl√®me est r√©solu, ou NON pour demander une intervention technique
                </div>
            `;
            
            document.body.appendChild(overlayDiv);
            document.body.appendChild(bannerDiv);
            
            // ‚úÖ GESTION CLIC BOUTON OUI
            document.getElementById(`btn-oui-${bannerId}`).addEventListener('click', () => {
                console.log('‚úÖ [InteractiveCorrection] Utilisateur confirme - Probl√®me r√©solu');
                
                // Masquer la banni√®re avec animation
                bannerDiv.style.animation = 'fadeOut 0.3s ease-in';
                overlayDiv.style.animation = 'fadeOut 0.3s ease-in';
                
                setTimeout(() => {
                    if (bannerDiv.parentNode) bannerDiv.parentNode.removeChild(bannerDiv);
                    if (overlayDiv.parentNode) overlayDiv.parentNode.removeChild(overlayDiv);
                }, 300);
                
                // Retour √† l'accueil
                setTimeout(() => {
                    returnToHome();
                }, 500);
            });
            
            // ‚úÖ GESTION CLIC BOUTON NON
            document.getElementById(`btn-non-${bannerId}`).addEventListener('click', () => {
                console.log('‚ùå [InteractiveCorrection] Utilisateur confirme - Probl√®me persiste');
                
                // Masquer la banni√®re interactive
                bannerDiv.style.animation = 'fadeOut 0.3s ease-in';
                overlayDiv.style.animation = 'fadeOut 0.3s ease-in';
                
                setTimeout(() => {
                    if (bannerDiv.parentNode) bannerDiv.parentNode.removeChild(bannerDiv);
                    if (overlayDiv.parentNode) overlayDiv.parentNode.removeChild(overlayDiv);
                }, 300);
                
                // ‚úÖ AFFICHER BANNI√àRE ESCALADE apr√®s masquage
                setTimeout(() => {
                    const currentRoom = getCurrentRoom();
                    showSEAEscalationBanner({
                        intent: 'video_problem',
                        confidence: 0.9,
                        room: currentRoom,
                        escalation_needed: true,
                        escalation_reason: `Probl√®me persiste apr√®s correction automatique - Intervention technique requise`
                    });
                }, 500);
            });
            
            // ‚úÖ GESTION CLIC OVERLAY (fermeture)
            overlayDiv.addEventListener('click', (e) => {
                if (e.target === overlayDiv) {
                    console.log('üîÑ [InteractiveCorrection] Fermeture par clic overlay');
                    
                    bannerDiv.style.animation = 'fadeOut 0.3s ease-in';
                    overlayDiv.style.animation = 'fadeOut 0.3s ease-in';
                    
                    setTimeout(() => {
                        if (bannerDiv.parentNode) bannerDiv.parentNode.removeChild(bannerDiv);
                        if (overlayDiv.parentNode) overlayDiv.parentNode.removeChild(overlayDiv);
                    }, 300);
                }
            });
        }

        // ======================== BANNIERE D'ATTENTE ORANGE ========================
        function showWaitingBanner(title, subtitle) {
            console.log(`‚è≥ [WaitingBanner] Affichage banni√®re d'attente: ${title}`);
            
            // Supprimer toute banni√®re d'attente existante
            hideWaitingBanner();
            
            const banner = document.createElement('div');
            banner.id = 'waiting-banner';
            banner.className = 'waiting-banner-overlay';
            
            banner.innerHTML = `
                <div class="waiting-banner-content">
                    <div class="waiting-banner-icon">
                        <div class="waiting-spinner"></div>
                    </div>
                    <h2 class="waiting-banner-title">${title}</h2>
                    <p class="waiting-banner-subtitle">${subtitle}</p>
                    <div class="waiting-progress-bar">
                        <div class="waiting-progress-fill"></div>
                    </div>
                </div>
            `;
            
            document.body.appendChild(banner);
            
            // Animation d'entr√©e
            setTimeout(() => {
                banner.classList.add('visible');
            }, 50);
        }
        
        function hideWaitingBanner() {
            const existingBanner = document.getElementById('waiting-banner');
            if (existingBanner) {
                console.log(`üö´ [WaitingBanner] Masquage banni√®re d'attente`);
                existingBanner.classList.add('fade-out');
                setTimeout(() => {
                    if (existingBanner.parentNode) {
                        existingBanner.parentNode.removeChild(existingBanner);
                    }
                }, 300);
            }
        }

        /**
         * Affiche une banni√®re de succ√®s plein √©cran (style SEA mais verte)
         */
        function showSuccessBanner(action, result) {
            const confirmationId = `success_${Date.now()}`;
            
            // Cr√©er l'overlay plein √©cran avec flou agressif
            const overlayDiv = document.createElement('div');
            overlayDiv.id = `overlay_${confirmationId}`;
            overlayDiv.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(20px);
                -webkit-backdrop-filter: blur(20px);
                z-index: 9998;
                cursor: pointer;
            `;
            
            // Cr√©er la banni√®re de succ√®s avec style moderne
            const successDiv = document.createElement('div');
            successDiv.id = confirmationId;
            successDiv.style.cssText = `
                background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
                color: white;
                border-radius: 12px;
                padding: 2rem;
                text-align: center;
                box-shadow: 0 20px 40px rgba(76, 175, 80, 0.4);
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 9999;
                width: 90%;
                max-width: 500px;
                animation: fadeIn 0.3s ease-out;
            `;
            
            successDiv.innerHTML = `
                <div style="font-size: 3rem; margin-bottom: 1rem;">‚úÖ</div>
                <h3 style="margin: 0 0 1rem 0; font-size: 1.5rem; font-weight: 600;">Probl√®me r√©solu automatiquement !</h3>
                <div style="background: rgba(255,255,255,0.15); padding: 1.25rem; border-radius: 10px; margin: 1.5rem 0;">
                    <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>üîß Action :</strong> ${action.description || 'Correction automatique'}</p>
                    <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>üè¢ Salle :</strong> ${getCurrentRoom()}</p>
                    <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>‚ö° Statut :</strong> Corrig√© en temps r√©el</p>
                </div>
                <p style="margin: 1.5rem 0; opacity: 0.95; font-size: 1rem; line-height: 1.4;">
                    ${result.message || 'Le syst√®me a d√©tect√© et corrig√© automatiquement le probl√®me. Aucune intervention manuelle n√©cessaire !'}
                </p>
                <button onclick="closeSuccessBanner('${confirmationId}')" style="
                    background: rgba(255,255,255,0.2);
                    border: 1px solid rgba(255,255,255,0.4);
                    color: white;
                    padding: 0.85rem 2rem;
                    border-radius: 8px;
                    cursor: pointer;
                    margin-top: 1rem;
                    font-size: 1rem;
                    font-weight: 500;
                    transition: all 0.3s ease;
                " onmouseover="this.style.background='rgba(255,255,255,0.3)'" onmouseout="this.style.background='rgba(255,255,255,0.2)'">
                    üéâ Parfait !
                </button>
            `;
            
            // Fermer au clic sur l'overlay
            overlayDiv.onclick = () => closeSuccessBanner(confirmationId);
            
            // Ajouter l'overlay et la banni√®re au body
            document.body.appendChild(overlayDiv);
            document.body.appendChild(successDiv);
            
            // ‚úÖ FERMETURE AUTOMATIQUE APR√àS 15 SECONDES (plus visible)
            setTimeout(() => {
                closeSuccessBanner(confirmationId);
            }, 15000);
            
            console.log(`üéâ [SuccessBanner] Banni√®re de succ√®s affich√©e pour: ${action.description}`);
        }

        /**
         * Ferme la banni√®re de succ√®s
         */
        function closeSuccessBanner(confirmationId) {
            const overlay = document.getElementById(`overlay_${confirmationId}`);
            const banner = document.getElementById(confirmationId);
            
            if (overlay) overlay.remove();
            if (banner) banner.remove();
            
            // Retour automatique √† l'accueil apr√®s fermeture
            console.log('üè† [SuccessBanner] Retour automatique √† l\'accueil');
            returnToHome();
        }

        /**
         * Ex√©cute une action sur un √©quipement
         */
        async function executeAction(actionType, deviceId, parameters) {
            try {
                console.log(`üîÑ [ExecuteAction] Ex√©cution de l'action : ${actionType}...`);
                
                let endpoint = '';
                let payload = {};
                
                // D√©terminer l'endpoint selon le type d'action
                switch (actionType) {
                    case 'sennheiser_mute':
                        endpoint = '/api/device-action/sennheiser/set-mute';
                        payload = {
                            host: parameters.host || parameters.device_name,
                            mute: parameters.mute
                        };
                        break;
                    
                    case 'pjlink_power':
                        endpoint = '/api/device-action/pjlink/power';
                        payload = {
                            device_name: parameters.device_name,
                            power_on: parameters.power_on
                        };
                        break;
                    
                    case 'pjlink_av_mute':
                        endpoint = '/api/device-action/pjlink/av-mute';
                        payload = {
                            device_name: parameters.device_name,
                            video_mute: parameters.video_mute || false,
                            audio_mute: parameters.audio_mute || false
                        };
                        break;
                        
                    case 'pjlink_av_unmute':
                        // ‚úÖ CORRECTION JUMEL√âE : Traitement sp√©cial pour AV Mute invisible + banni√®re
                        try {
                            const response = await fetch(`${API_BASE_URL}/api/device/public/av-mute/${parameters.device_name}`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' }
                            });
                            
                            if (response.ok) {
                                const result = await response.json();
                                console.log(`‚úÖ [ExecuteAction] AV Mute d√©sactiv√© avec succ√®s sur ${parameters.device_name}`);
                                
                                // ‚úÖ SIMULATION : Cr√©er une r√©ponse comme si c'√©tait auto-ex√©cut√© par le RAG
                                return {
                                    success: true,
                                    auto_executed: true, // ‚úÖ MARQUER comme auto-ex√©cut√©
                                    auto_result: `‚úÖ AV Mute d√©sactiv√© automatiquement sur ${parameters.device_name}`,
                                    simulated_rag_response: true
                                };
                            } else {
                                throw new Error(`Erreur HTTP ${response.status}`);
                            }
                        } catch (error) {
                            console.error(`‚ùå [ExecuteAction] Erreur AV Mute pour ${parameters.device_name}:`, error);
                            throw error;
                        }
                        return; // √âviter l'ex√©cution du code standard
                        
                    default:
                        throw new Error(`Type d'action non support√©: ${actionType}`);
                }
                
                // Ex√©cuter l'action
                const response = await fetch(`${API_BASE_URL}${endpoint}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(payload)
                });
                
                if (!response.ok) {
                    throw new Error(`Erreur HTTP: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    console.log(`‚úÖ [ExecuteAction] Action ex√©cut√©e avec succ√®s: ${result.message}`);
                    
                    // ‚úÖ NOUVEAU: Logique s√©quentielle pour allumage de projecteur
                    if (actionType === 'pjlink_power' && parameters.power_on === true) {
                        const deviceName = parameters.device_name || 'Projecteur';
                        console.log(`‚è±Ô∏è [SequentialLogic] Allumage d√©tect√© pour ${deviceName} - D√©marrage banni√®re d'attente`);
                        
                        // Afficher la banni√®re d'attente avec s√©quence compl√®te
                        showSequentialProjectorBanner(deviceName, 'power_on', {
                            maxDuration: 35,
                            checkAfterPowerOn: true
                        });
                    }
                    
                    return result;
                } else {
                    throw new Error(result.message || '√âchec de l\'ex√©cution');
                }
                
            } catch (error) {
                console.error('‚ùå [ExecuteAction] Erreur lors de l\'ex√©cution de l\'action:', error);
                throw error;
            }
        }

        /**
         * ‚úÖ NOUVEAU: Affiche une banni√®re d'attente pour l'allumage de projecteur
         */
        function showSequentialProjectorBanner(deviceName, actionType, options = {}) {
            const bannerId = `seq_projector_${Date.now()}`;
            console.log(`üé¨ [SequentialBanner] D√©marrage banni√®re ${actionType} pour ${deviceName}`);
            
            // Supprimer les banni√®res existantes
            document.querySelectorAll('.sequential-banner-overlay').forEach(banner => banner.remove());
            
            // Configuration selon le type d'action
            const config = getSequentialBannerConfig(actionType, deviceName, options);
            
            // Cr√©er l'overlay
            const overlayDiv = document.createElement('div');
            overlayDiv.id = `overlay_${bannerId}`;
            overlayDiv.className = 'sequential-banner-overlay';
            overlayDiv.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.9);
                backdrop-filter: blur(20px);
                z-index: 9999;
                display: flex;
                align-items: center;
                justify-content: center;
            `;
            
            // Cr√©er la banni√®re
            const bannerDiv = document.createElement('div');
            bannerDiv.id = bannerId;
            bannerDiv.className = 'sequential-banner fade-in';
            bannerDiv.style.cssText = `
                background: ${config.background};
                border-radius: 20px;
                padding: 3rem;
                color: white;
                text-align: center;
                box-shadow: 0 30px 60px rgba(0,0,0,0.5);
                max-width: 600px;
                width: 90%;
                position: relative;
                overflow: hidden;
                border: 2px solid ${config.borderColor};
            `;
            
            bannerDiv.innerHTML = config.html;
            
            // Ajouter les animations CSS
            addSequentialBannerStyles();
            
            // Ajouter au DOM
            overlayDiv.appendChild(bannerDiv);
            document.body.appendChild(overlayDiv);
            
            // D√©marrer la logique s√©quentielle selon le type
            switch (actionType) {
                case 'power_on':
                    startPowerOnSequence(bannerId, deviceName, options);
                    break;
                case 'av_unmute':
                    startAVUnmuteSequence(bannerId, deviceName, options);
                    break;
                case 'monitoring':
                    startMonitoringSequence(bannerId, deviceName, options);
                    break;
            }
            
            return bannerId;
        }
        
        /**
         * ‚úÖ NOUVEAU: Configuration des banni√®res selon le type d'action
         */
        function getSequentialBannerConfig(actionType, deviceName, options) {
            const configs = {
                power_on: {
                    background: 'linear-gradient(135deg, #1e40af 0%, #3b82f6 50%, #60a5fa 100%)',
                    borderColor: '#3b82f6',
                    html: `
                        <div class="sequential-content">
                            <div class="projector-icon-animated" style="font-size: 4rem; margin-bottom: 1.5rem; animation: powerBlink 1.2s infinite;">üìΩÔ∏è</div>
                            <h3 style="margin: 0 0 1rem 0; font-size: 1.6rem; font-weight: 700;">Allumage en cours</h3>
                            <p style="margin: 0 0 2rem 0; font-size: 1.2rem; opacity: 0.95;">Le projecteur <strong>${deviceName}</strong> d√©marre...</p>
                            
                            <div class="progress-section">
                                <div class="status-text" style="font-size: 1rem; margin-bottom: 1rem; opacity: 0.8;">
                                    üîå Envoi de la commande d'allumage
                                </div>
                                
                                <div class="real-time-monitor" style="background: rgba(255,255,255,0.1); border-radius: 12px; padding: 1.5rem; margin: 1.5rem 0;">
                                    <div class="monitor-title" style="font-weight: 600; margin-bottom: 1rem;">Surveillance temps r√©el</div>
                                    <div class="monitor-status" id="monitor_${deviceName}" style="font-family: monospace; font-size: 0.9rem;">
                                        ‚è≥ V√©rification de l'√©tat...
                                    </div>
                                </div>
                                
                                <div class="countdown-section" style="margin-top: 2rem;">
                                    <div class="countdown-timer" style="font-size: 1.1rem; font-weight: 600; color: #fbbf24;">
                                        ‚è±Ô∏è Surveillance active - Maximum 45s
                                    </div>
                                </div>
                            </div>
                            
                            <p style="margin: 2rem 0 0 0; font-size: 0.85rem; opacity: 0.7;">
                                ‚ö° Analyse automatique AV Mute apr√®s allumage confirm√©
                            </p>
                        </div>
                    `
                },
                av_unmute: {
                    background: 'linear-gradient(135deg, #059669 0%, #10b981 50%, #34d399 100%)',
                    borderColor: '#10b981',
                    html: `
                        <div class="sequential-content">
                            <div class="correction-icon" style="font-size: 4rem; margin-bottom: 1.5rem; animation: successPulse 1s infinite;">‚úÖ</div>
                            <h3 style="margin: 0 0 1rem 0; font-size: 1.6rem; font-weight: 700;">Correction AV Mute</h3>
                            <p style="margin: 0 0 1.5rem 0; font-size: 1.2rem; opacity: 0.95;">
                                D√©sactivation AV Mute sur <strong>${deviceName}</strong>
                            </p>
                            
                            <div class="correction-progress" style="background: rgba(255,255,255,0.15); border-radius: 10px; padding: 1.5rem; margin: 1rem 0;">
                                <div style="font-weight: 600; margin-bottom: 0.5rem;">üîá ‚Üí üìΩÔ∏è Commande envoy√©e</div>
                                <div style="font-size: 0.9rem; opacity: 0.8;">L'image devrait appara√Ætre imm√©diatement</div>
                            </div>
                            
                            <p style="margin: 1.5rem 0 0 0; font-size: 0.85rem; opacity: 0.7;">
                                Cette banni√®re se fermera automatiquement dans 3 secondes
                            </p>
                        </div>
                    `
                }
            };
            
            return configs[actionType] || configs.power_on;
        }
        
        /**
         * ‚úÖ NOUVEAU: Ajouter les styles CSS pour les banni√®res s√©quentielles
         */
        function addSequentialBannerStyles() {
            if (!document.getElementById('sequential-banner-styles')) {
                const style = document.createElement('style');
                style.id = 'sequential-banner-styles';
                style.textContent = `
                    @keyframes powerBlink {
                        0%, 50% { opacity: 1; transform: scale(1) rotate(0deg); }
                        25% { opacity: 0.7; transform: scale(1.15) rotate(-2deg); }
                        75% { opacity: 1; transform: scale(0.95) rotate(2deg); }
                    }
                    
                    @keyframes successPulse {
                        0%, 100% { opacity: 1; transform: scale(1); }
                        50% { opacity: 0.8; transform: scale(1.1); }
                    }
                    
                    @keyframes monitorGlow {
                        0%, 100% { box-shadow: 0 0 5px rgba(59, 130, 246, 0.3); }
                        50% { box-shadow: 0 0 15px rgba(59, 130, 246, 0.6); }
                    }
                    
                    .real-time-monitor {
                        animation: monitorGlow 2s infinite;
                    }
                `;
                document.head.appendChild(style);
            }
        }

        /**
         * ‚úÖ NOUVEAU: G√®re le compte √† rebours de la banni√®re d'attente
         */
        function startCountdown(bannerId, totalSeconds) {
            const banner = document.getElementById(bannerId);
            if (!banner) return;
            
            const progressBar = banner.querySelector('.progress-bar');
            const countdownTimer = banner.querySelector('.countdown-timer');
            
            let remainingSeconds = totalSeconds;
            
            const interval = setInterval(() => {
                remainingSeconds--;
                
                // Mettre √† jour le timer
                if (countdownTimer) {
                    countdownTimer.textContent = `${remainingSeconds}s`;
                }
                
                // Mettre √† jour la barre de progression
                if (progressBar) {
                    const progress = ((totalSeconds - remainingSeconds) / totalSeconds) * 100;
                    progressBar.style.width = `${progress}%`;
                }
                
                // Fin du compte √† rebours
                if (remainingSeconds <= 0) {
                    clearInterval(interval);
                    // Fermer la banni√®re et v√©rifier l'√©tat
                    setTimeout(() => {
                        closeWaitingBanner(bannerId);
                        // ‚úÖ NOUVEAU: D√©clencher une nouvelle v√©rification automatique
                        recheckProjectorStatus();
                    }, 1000);
                }
            }, 1000);
            
            // Stocker l'interval pour pouvoir l'annuler si n√©cessaire
            if (banner) {
                banner.dataset.intervalId = interval;
            }
        }
        
        /**
         * ‚úÖ NOUVEAU: Ferme la banni√®re d'attente
         */
        function closeWaitingBanner(bannerId) {
            const banner = document.getElementById(bannerId);
            const overlay = document.getElementById(`overlay_${bannerId}`);
            
            if (banner && banner.dataset.intervalId) {
                clearInterval(parseInt(banner.dataset.intervalId));
            }
            
            if (overlay) {
                overlay.remove();
            }
        }
        
        /**
         * ‚úÖ NOUVEAU: S√©quence d'allumage avec surveillance temps r√©el
         */
        async function startPowerOnSequence(bannerId, deviceName, options) {
            console.log(`üîå [PowerOnSequence] D√©marrage surveillance pour ${deviceName}`);
            
            const maxDuration = 45; // 45 secondes maximum
            const checkInterval = 3; // V√©rifier toutes les 3 secondes
            let elapsed = 0;
            let powerOnDetected = false;
            
            const updateMonitorStatus = (status, isSuccess = false) => {
                const monitor = document.getElementById(`monitor_${deviceName}`);
                if (monitor) {
                    monitor.innerHTML = status;
                    if (isSuccess) {
                        monitor.style.color = '#10b981';
                        monitor.style.fontWeight = '600';
                    }
                }
            };
            
            const interval = setInterval(async () => {
                elapsed += checkInterval;
                
                try {
                    // V√©rifier l'√©tat du projecteur
                    const currentRoom = getCurrentRoom();
                    const equipmentData = await fetchRoomEquipment(currentRoom);
                    
                    // ‚úÖ CORRECTION: Utiliser equipmentData.devices (pas equipmentData directement)
                    if (!equipmentData || !equipmentData.devices || !Array.isArray(equipmentData.devices)) {
                        console.warn(`‚ö†Ô∏è [PowerOnSequence] Donn√©es √©quipements invalides: ${JSON.stringify(equipmentData)}`);
                        updateMonitorStatus(`‚ö†Ô∏è Erreur acc√®s √©quipements (${elapsed}s)`);
                        return;
                    }
                    
                    console.log(`üîç [PowerOnSequence] ${equipmentData.devices.length} √©quipements trouv√©s en salle ${currentRoom}`);
                    
                    // Chercher le projecteur par nom complet ou partiel
                    const projector = equipmentData.devices.find(d => {
                        const deviceNameMatch = d.device_name === deviceName || 
                                              (d.device_name && d.device_name.includes(deviceName.replace('PROJ-', ''))) ||
                                              d.name === deviceName ||
                                              (d.name && d.name.includes(deviceName.replace('PROJ-', '')));
                        const isProjectorType = (d.device_model_name && d.device_model_name.toLowerCase().includes('proj')) ||
                                              (d.device_family_name && d.device_family_name.toLowerCase().includes('proj')) ||
                                              (d.name && d.name.toLowerCase().includes('proj'));
                        return deviceNameMatch || isProjectorType;
                    });
                    
                    if (projector) {
                        console.log(`üîç [PowerOnSequence] Projecteur trouv√©: ${projector.device_name || projector.name}, √âtat: ${projector.status} (${elapsed}s)`);
                        
                        if (projector.status === 'online' || projector.status === 'power_on') {
                            powerOnDetected = true;
                            updateMonitorStatus('‚úÖ Projecteur allum√© - Analyse AV Mute...', true);
                            clearInterval(interval);
                            
                            // D√©lai pour laisser le projecteur se stabiliser
                            setTimeout(() => {
                                startAVMuteAnalysis(bannerId, deviceName, projector);
                            }, 2000);
                            return;
                        } else {
                            updateMonitorStatus(`‚è≥ Allumage en cours... √âtat: ${projector.status} (${elapsed}s/${maxDuration}s)`);
                        }
                    } else {
                        console.log(`üîç [PowerOnSequence] √âquipements disponibles:`, equipmentData.devices.map(d => ({ name: d.device_name || d.name, status: d.status })));
                        updateMonitorStatus(`‚ö†Ô∏è Projecteur ${deviceName} non trouv√© (${elapsed}s)`);
                    }
                    
                } catch (error) {
                    console.error(`‚ùå [PowerOnSequence] Erreur v√©rification: ${error}`);
                    updateMonitorStatus(`‚ùå Erreur v√©rification (${elapsed}s)`);
                }
                
                // Timeout apr√®s 45 secondes - V√âRIFICATION FINALE AVANT ESCALADE
                if (elapsed >= maxDuration) {
                    clearInterval(interval);
                    if (!powerOnDetected) {
                        console.log(`üîç [PowerOnSequence] TIMEOUT ${maxDuration}s atteint - V√©rification finale avant escalade pour ${deviceName}`);
                        updateMonitorStatus('‚è∞ Timeout atteint - V√©rification finale...');
                        
                        setTimeout(async () => {
                            try {
                                // ‚úÖ DERNI√àRE V√âRIFICATION avant escalade
                                const currentRoom = getCurrentRoom();
                                const equipmentData = await fetchRoomEquipment(currentRoom);
                                
                                if (equipmentData && equipmentData.devices && Array.isArray(equipmentData.devices)) {
                                    const projector = equipmentData.devices.find(d => {
                                        const deviceNameMatch = d.device_name === deviceName || 
                                                              (d.device_name && d.device_name.includes(deviceName.replace('PROJ-', ''))) ||
                                                              d.name === deviceName ||
                                                              (d.name && d.name.includes(deviceName.replace('PROJ-', '')));
                                        const isProjectorType = (d.device_model_name && d.device_model_name.toLowerCase().includes('proj')) ||
                                                              (d.device_family_name && d.device_family_name.toLowerCase().includes('proj')) ||
                                                              (d.name && d.name.toLowerCase().includes('proj'));
                                        return deviceNameMatch || isProjectorType;
                                    });
                                    
                                                                        // ‚úÖ CORRECTION : Utiliser v√©rification temps r√©el au lieu du cache statique
                                    console.log(`üîç [PowerOnSequence] V√©rification temps r√©el finale pour ${deviceName}...`);
                                    
                                    try {
                                        const realtimeStatus = await fetchProjectorRealtimeStatus(deviceName);
                                        
                                        if (realtimeStatus && realtimeStatus.is_online) {
                                            const powerOn = realtimeStatus.power_status === 'on' || realtimeStatus.power_status === 'ON';
                                            const hasAVMute = realtimeStatus.av_mute_video || realtimeStatus.av_mute_audio;
                                            
                                            console.log(`‚úÖ [PowerOnSequence] √âtat temps r√©el: power=${realtimeStatus.power_status}, AVMute=${hasAVMute}`);
                                            
                                            if (powerOn) {
                                                if (hasAVMute) {
                                                    console.log(`üîá [PowerOnSequence] AV Mute d√©tect√© ‚Üí Correction automatique invisible`);
                                                    updateMonitorStatus('üîá Correction AV Mute automatique...');

                                                    // ‚úÖ Correction AV Mute INVISIBLE
                                                    const avMuteResponse = await fetch(`${API_BASE_URL}/api/device/public/av-mute/${deviceName}`, {
                                                        method: 'POST',
                                                        headers: { 'Content-Type': 'application/json' }
                                                    });
                                                    
                                                    if (avMuteResponse.ok) {
                                                        console.log(`‚úÖ [PowerOnSequence] PROBL√àME R√âSOLU: AV Mute corrig√© sur ${deviceName}`);
                                                        updateMonitorStatus('‚úÖ Probl√®me vid√©o r√©solu !', true);
                                                        
                                                        // ‚úÖ AFFICHER BANNI√àRE DE SUCC√àS (pas d'escalade)
                                                        setTimeout(() => {
                                                            closeSequentialBanner(bannerId);
                                                            showAutoResultBanner(`‚úÖ Probl√®me vid√©o r√©solu automatiquement sur ${deviceName}`);
                                                        }, 2000);
                                                        return;
                                                    }
                                                } else {
                                                    // ‚úÖ CORRECTION LOGIQUE : Projecteur allum√© sans AV Mute, mais probl√®me vid√©o signal√© ‚Üí V√©rification approfondie
                                                    console.log(`üéØ [PowerOnSequence] Projecteur ${deviceName} allum√© sans AV Mute - V√©rification si probl√®me persiste`);
                                                    updateMonitorStatus('üîç Projecteur fonctionnel - V√©rification probl√®me persistant...');
                                                    
                                                    // ‚úÖ NOUVELLE LOGIQUE : Au lieu de consid√©rer le probl√®me r√©solu, escalader si probl√®me persiste
                                                    setTimeout(() => {
                                                        closeSequentialBanner(bannerId);
                                                        // D√©clencher l'escalade car √©quipement fonctionne mais probl√®me persiste
                                                        setTimeout(() => {
                                                            console.log('üéØ [PowerOnSequence] Escalade - √âquipement fonctionnel mais probl√®me vid√©o persiste');
                                                            showSEAEscalationBanner({
                                                                intent: 'video_problem',
                                                                confidence: 0.9,
                                                                room: getCurrentRoom(),
                                                                problems: [{
                                                                    room: getCurrentRoom(),
                                                                    device: deviceName,
                                                                    severity: 'medium',
                                                                    reason: `Projecteur ${deviceName} allum√© et fonctionnel mais probl√®me vid√©o persistant`
                                                                }],
                                                                escalation_needed: true,
                                                                escalation_reason: `Projecteur ${deviceName} op√©rationnel mais probl√®me vid√©o non r√©solu - Diagnostic sp√©cialis√© requis`
                                                            });
                                                        }, 500);
                                                    }, 2000);
                                                    return;
                                                }
                                            }
                                        }
                                    } catch (realtimeError) {
                                        console.error(`‚ö†Ô∏è [PowerOnSequence] Erreur v√©rification temps r√©el:`, realtimeError);
                                    }
                                }
                                
                                // ‚ùå Si toujours pas allum√© apr√®s v√©rification finale
                                console.log(`‚ùå [PowerOnSequence] V√âRIFICATION FINALE √âCHOU√âE: Projecteur ${deviceName} toujours pas allum√© - Escalade n√©cessaire`);
                                updateMonitorStatus('‚ùå Projecteur non allum√© - Escalade technicien');
                                
                                setTimeout(() => {
                                    closeSequentialBanner(bannerId);
                                    // Escalade automatique apr√®s v√©rification finale
                                    showSEAEscalationBanner({
                                        intent: 'video_problem',
                                        confidence: 0.8,
                                        room: getCurrentRoom(),
                                        escalation_reason: `√âchec allumage ${deviceName} apr√®s ${maxDuration}s + v√©rification finale`
                                    });
                                }, 2000);
                                
                            } catch (error) {
                                console.error(`‚ùå [PowerOnSequence] Erreur v√©rification finale:`, error);
                                updateMonitorStatus('‚ùå Erreur v√©rification - Escalade technicien');
                                
                                setTimeout(() => {
                                    closeSequentialBanner(bannerId);
                                    showSEAEscalationBanner({
                                        intent: 'video_problem',
                                        confidence: 0.8,
                                        room: getCurrentRoom(),
                                        escalation_reason: `Erreur technique v√©rification finale ${deviceName}`
                                    });
                                }, 2000);
                            }
                        }, 1000);
                    }
                }
            }, checkInterval * 1000);
        }
        
        /**
         * ‚úÖ NOUVEAU: Analyse automatique AV Mute apr√®s allumage
         */
        async function startAVMuteAnalysis(bannerId, deviceName, projectorData = null) {
            console.log(`üîá [AVMuteAnalysis] Analyse AV Mute pour ${deviceName}`, projectorData);
            
            const updateMonitorStatus = (status, isSuccess = false) => {
                const monitor = document.getElementById(`monitor_${deviceName}`);
                if (monitor) {
                    monitor.innerHTML = status;
                    if (isSuccess) {
                        monitor.style.color = '#10b981';
                        monitor.style.fontWeight = '600';
                    }
                }
            };
            
            try {
                updateMonitorStatus('üîç Analyse AV Mute en cours...');
                
                // Attendre un peu pour que le projecteur se stabilise
                await new Promise(resolve => setTimeout(resolve, 3000));
                
                // ‚úÖ M√âTHODE 1: Tenter diagnostic direct en interrogeant le probl√®me vid√©o
                console.log(`üîá [AVMuteAnalysis] Tentative diagnostic AV Mute via probl√®me vid√©o`);
                
                const currentRoom = getCurrentRoom();
                const response = await fetch(`${API_BASE_URL}/api/copilot/chat`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        message: `√âcran noir projecteur ${deviceName}`,
                        room: currentRoom,
                        context: {
                            sequential_check: true,
                            av_mute_analysis: true,
                            target_device: deviceName,
                            force_projector_check: true
                        }
                    })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('üîç [AVMuteAnalysis] R√©ponse backend diagnostic:', data);
                    
                    // Chercher des actions de correction AV Mute
                    const avMuteActions = data.actions ? data.actions.filter(action => 
                        action.type === 'pjlink_av_unmute' || 
                        action.type === 'pjlink_av_mute' ||
                        (action.description && action.description.toLowerCase().includes('av mute')) ||
                        (action.description && action.description.toLowerCase().includes('d√©sactiver') && action.description.toLowerCase().includes('mute'))
                    ) : [];
                    
                    console.log(`üîá [AVMuteAnalysis] Actions AV Mute trouv√©es:`, avMuteActions);
                    
                    if (avMuteActions.length > 0) {
                        updateMonitorStatus('üîá AV Mute d√©tect√© - Correction automatique...');
                        
                        // Prendre la premi√®re action AV unmute trouv√©e
                        const avMuteAction = avMuteActions[0];
                        console.log(`üîá [AVMuteAnalysis] Ex√©cution action:`, avMuteAction);
                        
                        try {
                            // Construire les param√®tres pour l'action
                            const actionParams = {
                                device_name: deviceName,
                                video_mute: false,
                                audio_mute: false,
                                ...avMuteAction.parameters
                            };
                            
                            await executeAction('pjlink_av_mute', avMuteAction.device_id || 0, actionParams);
                            updateMonitorStatus('‚úÖ AV Mute corrig√© - Projecteur op√©rationnel !', true);
                            
                            setTimeout(() => {
                                closeSequentialBanner(bannerId);
                            }, 3000);
                            
                        } catch (actionError) {
                            console.error(`‚ùå [AVMuteAnalysis] Erreur ex√©cution action:`, actionError);
                            updateMonitorStatus('‚ö†Ô∏è Erreur correction AV Mute - V√©rifiez manuellement');
                            setTimeout(() => {
                                closeSequentialBanner(bannerId);
                            }, 4000);
                        }
                        
                    } else {
                        // ‚úÖ CORRECTION ESCALADE : Pas d'AV Mute d√©tect√© sur projecteur allum√© ‚Üí Escalade SEA
                        console.log(`üéØ [AVMuteAnalysis] Aucun AV Mute d√©tect√© sur projecteur allum√© ${deviceName} ‚Üí Escalade requise`);
                        updateMonitorStatus('üéØ Projecteur op√©rationnel - Escalade technique n√©cessaire...');
                        
                        // Pr√©parer le contexte d'escalade
                        const escalationContext = {
                            intent: 'video_problem',
                            confidence: 0.9,
                            room: getCurrentRoom(),
                            problems: [{
                                room: getCurrentRoom(),
                                device: deviceName,
                                severity: 'medium',
                                reason: `Probl√®me vid√©o persistant sur ${deviceName} - √âquipement fonctionnel mais probl√®me non r√©solu`
                            }],
                            solutions: [],
                            escalation_needed: true,
                            escalation_reason: `Projecteur ${deviceName} fonctionnel mais probl√®me vid√©o persiste - Diagnostic approfondi requis`
                        };
                        
                        // Fermer la banni√®re et escalader
                        setTimeout(() => {
                            closeSequentialBanner(bannerId);
                            // D√©clencher l'escalade SEA apr√®s fermeture
                            setTimeout(() => {
                                console.log('üéØ [AVMuteAnalysis] D√©clenchement escalade SEA pour probl√®me non r√©solu');
                                showSEAEscalationBanner(escalationContext);
                            }, 500);
                        }, 1500);
                    }
                    
                } else {
                    console.error(`‚ùå [AVMuteAnalysis] Erreur HTTP ${response.status}`);
                    updateMonitorStatus('‚ö†Ô∏è Erreur diagnostic - Projecteur probablement op√©rationnel');
                    setTimeout(() => {
                        closeSequentialBanner(bannerId);
                    }, 3000);
                }
                    
                } catch (error) {
                console.error(`‚ùå [AVMuteAnalysis] Erreur g√©n√©rale:`, error);
                updateMonitorStatus('‚ùå Erreur analyse AV Mute - V√©rifiez manuellement');
                setTimeout(() => {
                    closeSequentialBanner(bannerId);
                }, 3000);
            }
        }
        
        /**
         * ‚úÖ NOUVEAU: S√©quence pour correction AV Mute directe
         */
        function startAVUnmuteSequence(bannerId, deviceName, options) {
            console.log(`‚úÖ [AVUnmuteSequence] Correction AV Mute pour ${deviceName}`);
            
            // Fermer automatiquement apr√®s 3 secondes
            setTimeout(() => {
                closeSequentialBanner(bannerId);
            }, 3000);
        }
        
        /**
         * ‚úÖ NOUVEAU: S√©quence de monitoring g√©n√©rique
         */
        function startMonitoringSequence(bannerId, deviceName, options) {
            console.log(`üëÄ [MonitoringSequence] Surveillance g√©n√©rique pour ${deviceName}`);
            
            // Pour l'instant, fermer apr√®s 5 secondes
            setTimeout(() => {
                closeSequentialBanner(bannerId);
            }, 5000);
        }

        /**
         * ‚úÖ NOUVEAU: Fermer la banni√®re s√©quentielle
         */
        function closeSequentialBanner(bannerId) {
            const banner = document.getElementById(bannerId);
            const overlay = document.getElementById(`overlay_${bannerId}`);
            
            if (overlay) {
                overlay.style.opacity = '0';
                overlay.style.transform = 'scale(0.95)';
                
                setTimeout(() => {
                    overlay.remove();
                    console.log(`üèÅ [SequentialBanner] Banni√®re ${bannerId} ferm√©e`);
                }, 300);
            }
        }

        /**
         * ‚úÖ ANCIEN: Re-v√©rifie l'√©tat du projecteur apr√®s allumage (OBSOL√àTE)
         */
        async function recheckProjectorStatus() {
            console.log('üîç [SequentialCheck] Re-v√©rification de l\'√©tat du projecteur apr√®s allumage');
            
            // R√©-envoyer automatiquement la demande de probl√®me vid√©o pour v√©rification
            try {
                const currentRoom = getCurrentRoom();
                const response = await fetch(`${API_BASE_URL}/api/copilot/chat`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        message: 'V√©rification post-allumage projecteur', // Message technique pour re-check
                        room: currentRoom,
                        context: {
                            sequential_check: true,
                            auto_recheck: true
                        }
                    })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('‚úÖ [SequentialCheck] V√©rification post-allumage termin√©e');
                    processResponse(data);
                } else {
                    console.error('‚ùå [SequentialCheck] Erreur lors de la re-v√©rification');
                    // En cas d'erreur, afficher directement la banni√®re SEA
                    showSEAEscalationBanner({
                        intent: 'video_problem',
                        confidence: 0.8,
                        room: currentRoom,
                        escalation_reason: 'V√©rification post-allumage √©chou√©e - intervention technique requise'
                    });
                }
            } catch (error) {
                console.error('‚ùå [SequentialCheck] Erreur r√©seau:', error);
            }
        }

        /**
         * Affiche la banni√®re de confirmation des actions automatiques
         * avec le m√™me style que les banni√®res SIM/SEA
         */
        function showAutoResultBanner(autoResult) {
            // ‚úÖ CORRECTION: Fermer toutes les banni√®res auto-result existantes AVANT d'en cr√©er une nouvelle
            const existingAutoBanners = document.querySelectorAll('[id^="auto_result_"]');
            const existingAutoOverlays = document.querySelectorAll('[id^="overlay_auto_result_"]');
            
            existingAutoBanners.forEach(banner => {
                console.log(`üö´ [CleanupAutoBanner] Suppression banni√®re auto-result existante: ${banner.id}`);
                banner.remove();
            });
            
            existingAutoOverlays.forEach(overlay => {
                console.log(`üö´ [CleanupAutoOverlay] Suppression overlay auto-result existant: ${overlay.id}`);
                overlay.remove();
            });
            
            // ‚úÖ NETTOYAGE TOTAL : Supprimer TOUS les messages du chat avant d'afficher la banni√®re
            const assistantPage = document.getElementById('assistantPage');
            if (assistantPage) {
                const allMessages = assistantPage.querySelectorAll('.message');
                allMessages.forEach(message => {
                    message.remove();
                    console.log('üßπ Message supprim√© du chat avant banni√®re');
                });
            }
            
            // ‚úÖ MASQUER les palettes pendant l'affichage de la banni√®re
            const problemPalettes = document.getElementById('problemPalettes');
            if (problemPalettes) {
                problemPalettes.style.display = 'none';
            }
            
            const bannerId = `auto_result_${Date.now()}`;
            
            // Cr√©er l'overlay plein √©cran avec flou
            const overlayDiv = document.createElement('div');
            overlayDiv.id = `overlay_${bannerId}`;
            overlayDiv.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(20px);
                z-index: 9998;
                cursor: pointer;
            `;
            
            // Cr√©er la banni√®re de confirmation
            const bannerDiv = document.createElement('div');
            bannerDiv.id = bannerId;
            bannerDiv.className = 'auto-result-banner fade-in';
            bannerDiv.style.cssText = `
                background: linear-gradient(135deg, #10b981 0%, #059669 100%);
                border-radius: 12px;
                padding: 2rem;
                color: white !important;
                text-align: center;
                box-shadow: 0 20px 40px rgba(0,0,0,0.3);
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 9999;
                width: 90%;
                max-width: 500px;
                border: 2px solid #10b981;
            `;
            
            bannerDiv.innerHTML = `
                <div class="auto-result-header" style="margin-bottom: 1.5rem;">
                    <div style="font-size: 3rem; margin-bottom: 1rem;">‚úÖ</div>
                    <div class="auto-result-text">
                        <strong style="color: white !important; font-weight: 600; font-size: 1.4rem; display: block; margin-bottom: 0.5rem;">Action Automatique R√©ussie</strong>
                        <span style="color: white !important; font-weight: 500; font-size: 1.1rem;">${autoResult}</span>
                    </div>
                </div>
                
                <div style="margin-top: 2rem;">
                    <button 
                        onclick="closeAutoResultBanner('${bannerId}')" 
                        style="
                            background: rgba(255, 255, 255, 0.2);
                            border: 1px solid rgba(255, 255, 255, 0.3);
                            color: white !important;
                            padding: 0.75rem 2rem;
                            border-radius: 6px;
                font-weight: 600;
                            cursor: pointer;
                            font-size: 1rem;
                            transition: all 0.3s ease;
                        "
                        onmouseover="this.style.background='rgba(255, 255, 255, 0.3)'"
                        onmouseout="this.style.background='rgba(255, 255, 255, 0.2)'"
                    >
                        Fermer
                    </button>
                </div>
            `;
            
            // ‚úÖ CORRECTION: Fermer au clic sur l'overlay mais PAS sur les √©l√©ments internes
            overlayDiv.onclick = (event) => {
                if (event.target === overlayDiv) {
                    closeAutoResultBanner(bannerId);
                }
            };
            
            // ‚úÖ Emp√™cher la propagation des √©v√©nements depuis la banni√®re
            bannerDiv.onclick = (event) => {
                event.stopPropagation();
            };
            
            // Ajouter l'overlay et la banni√®re au body
            document.body.appendChild(overlayDiv);
            overlayDiv.appendChild(bannerDiv);
            
            // Auto-fermeture apr√®s 5 secondes
            setTimeout(() => {
                closeAutoResultBanner(bannerId);
            }, 5000);
        }

        /**
         * Ferme la banni√®re de confirmation automatique
         */
        function closeAutoResultBanner(bannerId) {
            // Supprimer l'overlay
            const overlayDiv = document.getElementById(`overlay_${bannerId}`);
            if (overlayDiv) {
                overlayDiv.remove();
            }
            
            // ‚úÖ REMETTRE les palettes apr√®s fermeture de la banni√®re
            const problemPalettes = document.getElementById('problemPalettes');
            if (problemPalettes) {
                problemPalettes.style.display = 'grid';
                problemPalettes.style.gridTemplateColumns = 'repeat(auto-fit, minmax(250px, 1fr))';
                problemPalettes.style.gap = '2rem';
            }
        }

        /**
         * Affiche la banni√®re SEA centr√©e avec overlay (comme les autres banni√®res)
         */
        function showSEAEscalationBanner(data) {
            // ‚úÖ CORRECTION: Fermer toutes les banni√®res SEA existantes AVANT d'en cr√©er une nouvelle
            const existingSeaBanners = document.querySelectorAll('[id^="escalation_sea_"]');
            const existingSeaOverlays = document.querySelectorAll('[id^="overlay_escalation_sea_"]');
            
            existingSeaBanners.forEach(banner => {
                console.log(`üö´ [CleanupSEABanner] Suppression banni√®re SEA existante: ${banner.id}`);
                banner.remove();
            });
            
            existingSeaOverlays.forEach(overlay => {
                console.log(`üö´ [CleanupSEAOverlay] Suppression overlay SEA existant: ${overlay.id}`);
                overlay.remove();
            });
            
            const escalationId = `escalation_sea_${Date.now()}`;
            const currentRoom = getCurrentRoom();
            
            // Cr√©er l'overlay plein √©cran avec flou
            const overlayDiv = document.createElement('div');
            overlayDiv.id = `overlay_${escalationId}`;
            overlayDiv.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(20px);
                z-index: 9998;
                cursor: pointer;
            `;
            
            // Cr√©er la banni√®re SEA
            const escalationDiv = document.createElement('div');
            escalationDiv.id = escalationId;
            escalationDiv.className = 'escalation-compact fade-in';
            escalationDiv.style.cssText = `
                background: rgba(255, 255, 255, 0.98);
                border-radius: 12px;
                padding: 2rem;
                color: black !important;
                text-align: center;
                box-shadow: 0 20px 40px rgba(0,0,0,0.3);
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 9999;
                width: 90%;
                max-width: 600px;
                max-height: 80vh;
                overflow-y: auto;
            `;
            
            escalationDiv.innerHTML = `
                <div class="escalation-header" style="margin-bottom: 1.5rem;">
                    <div class="escalation-image-container" style="text-align: center; margin-bottom: 1rem;">
                        <img id="sea-logo-${escalationId}" src="assets/SEA2.png" alt="Service Expert Audiovisuel UQAM" style="max-width: 200px; height: auto; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.2);" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                        <div class="sea-fallback-content" style="display: none; color: black !important; text-align: center; padding: 1rem;">
                            <h3 style="margin: 0 0 0.5rem 0; font-size: 1.2rem; color: black !important;">ASSISTANCE TECHNIQUE</h3>
                            <p style="margin: 0 0 0.5rem 0; font-size: 1rem; color: black !important;">COMPOSER LE POSTE</p>
                            <p style="margin: 0; font-size: 3rem; font-weight: bold; color: black !important;">6135</p>
                        </div>
                    </div>
                    <div class="escalation-text">
                        <strong style="color: black !important; font-weight: 600; font-size: 1.4rem; display: block; margin-bottom: 0.5rem;">Intervention technique requise</strong>
                        <span class="escalation-subtitle" style="color: black !important; font-weight: 700; font-size: 1.1rem;">SEA: üì± 6135 ou cr√©er un ticket - Salle ${currentRoom}</span>
                    </div>
                </div>
                
                <div class="client-description-section" style="margin: 1.5rem 0;">
                    <div class="description-header" style="margin-bottom: 0.5rem;">
                        <i class="fas fa-edit" style="color: black !important; margin-right: 0.5rem;"></i>
                        <span style="color: black !important; font-weight: 600;">Description d√©taill√©e (facultative)</span>
                    </div>
                    <textarea
                        id="clientDescription_${escalationId}"
                        class="client-description-input"
                        placeholder="D√©crivez votre probl√®me en d√©tail..."
                        rows="3"
                        style="
                            width: 100%;
                            padding: 0.75rem;
                            border: 1px solid #d1d5db;
                            border-radius: 6px;
                            color: black !important;
                            background: white;
                            resize: vertical;
                            font-family: inherit;
                        "
                    ></textarea>
                    <div class="description-help" style="margin-top: 0.5rem;">
                        <small style="color: black !important; font-style: italic;">üí° Si vous ne saisissez rien, un message g√©n√©rique sera utilis√© selon le type de probl√®me.</small>
                    </div>
                </div>
                
                <div class="escalation-actions" style="display: flex; gap: 1rem; justify-content: center; margin-top: 2rem;">
                    <button 
                        onclick="closeSEAEscalationBanner('${escalationId}')" 
                        style="
                            background: rgba(0, 0, 0, 0.1);
                            border: 1px solid rgba(0, 0, 0, 0.2);
                            color: black !important;
                            padding: 0.75rem 1.5rem;
                            border-radius: 6px;
                font-weight: 600;
                        cursor: pointer;
                            font-size: 1rem;
                        transition: all 0.3s ease;
                        "
                        onmouseover="this.style.background='rgba(0, 0, 0, 0.2)'"
                        onmouseout="this.style.background='rgba(0, 0, 0, 0.1)'"
                    >
                        <i class="fas fa-times"></i> Fermer
                    </button>
                    <button 
                        onclick="createTicketFromBanner('${escalationId}', ${JSON.stringify(data.escalation_actions || []).replace(/"/g, '&quot;')})" 
                        style="
                            background: #3b82f6;
                            border: 1px solid #2563eb;
                            color: white !important;
                            padding: 0.75rem 1.5rem;
                            border-radius: 6px;
                            font-weight: 600;
                        cursor: pointer;
                            font-size: 1rem;
                        transition: all 0.3s ease;
                        "
                        onmouseover="this.style.background='#2563eb'"
                        onmouseout="this.style.background='#3b82f6'"
                    >
                        <i class="fas fa-paper-plane"></i> Cr√©er un ticket
                    </button>
                </div>
            `;
            
            // ‚úÖ CORRECTION: Fermer au clic sur l'overlay mais PAS sur les √©l√©ments internes
            overlayDiv.onclick = (event) => {
                // Fermer seulement si on clique directement sur l'overlay, pas sur ses enfants
                if (event.target === overlayDiv) {
                    closeSEAEscalationBanner(escalationId);
                }
            };
            
            // ‚úÖ Emp√™cher la propagation des √©v√©nements depuis la banni√®re
            escalationDiv.onclick = (event) => {
                event.stopPropagation();
            };
            
            // Ajouter l'overlay et la banni√®re au body
            document.body.appendChild(overlayDiv);
            overlayDiv.appendChild(escalationDiv);
        }

        /**
         * Ferme la banni√®re SEA
         */
        function closeSEAEscalationBanner(escalationId) {
            const overlayDiv = document.getElementById(`overlay_${escalationId}`);
            if (overlayDiv) {
                overlayDiv.remove();
            }
        }

        /**
         * Cr√©e un ticket depuis la banni√®re SEA
         */
        function createTicketFromBanner(escalationId, escalationActions) {
            const description = document.getElementById(`clientDescription_${escalationId}`)?.value?.trim();
            
            // ‚úÖ CORRECTION: Cr√©er le ticket AVANT de fermer la banni√®re
            createTicket(escalationId, escalationActions, description);
        }

        /**
         * Affiche la modale pour la description d√©taill√©e du ticket
         */
        function showTicketDescriptionModal(escalationId, escalationActions) {
            const modalOverlay = document.getElementById('modalOverlay');
            const modalIcon = document.getElementById('modalIcon');
            const modalTitle = document.getElementById('modalTitle');
            const modalMessage = document.getElementById('modalMessage');
            
            modalIcon.textContent = 'üé´';
            modalTitle.textContent = 'Description du probl√®me (optionnel)';
            modalMessage.innerHTML = `
                <div style="margin-bottom: 1rem;">
                    <p style="margin-bottom: 0.5rem; font-size: 0.9rem; color: #666;">
                        Vous pouvez ajouter une description d√©taill√©e du probl√®me pour aider l'√©quipe technique :
                    </p>
                    <textarea 
                        id="ticketDescription" 
                        placeholder="D√©crivez le probl√®me en d√©tail (optionnel)..."
                        style="
                            width: 100%;
                            min-height: 100px;
                            padding: 0.75rem;
                            border: 1px solid #ddd;
                            border-radius: 8px;
                            font-family: inherit;
                            font-size: 0.9rem;
                            resize: vertical;
                            margin-bottom: 1rem;
                        "
                    ></textarea>
                </div>
                <div style="display: flex; gap: 0.5rem; justify-content: center;">
                    <button onclick="closeTicketDescriptionModal()" style="
                        background: #f3f4f6;
                        color: #374151;
                        border: 1px solid #d1d5db;
                        padding: 0.5rem 1rem;
                        border-radius: 6px;
                        cursor: pointer;
                        font-size: 0.9rem;
                    ">
                        Annuler
                    </button>
                    <button onclick="createTicketWithDescription('${escalationId}', ${JSON.stringify(escalationActions).replace(/"/g, '&quot;')})" style="
                        background: var(--primary-blue);
                        color: white;
                        border: none;
                        padding: 0.5rem 1rem;
                        border-radius: 6px;
                        cursor: pointer;
                        font-size: 0.9rem;
                        font-weight: 500;
                    ">
                        Envoyer le ticket
                    </button>
                </div>
            `;
            
            modalOverlay.classList.add('active');
        }

        /**
         * Ferme la modale de description du ticket
         */
        function closeTicketDescriptionModal() {
            const modalOverlay = document.getElementById('modalOverlay');
            modalOverlay.classList.remove('active');
        }

        /**
         * Ferme la banni√®re d'escalade et son overlay
         */
        function closeEscalationBanner(escalationId) {
            console.log(`üö´ [CloseEscalation] Fermeture banni√®re ${escalationId}`);
            
            // Supprimer la banni√®re
            const escalationDiv = document.getElementById(escalationId);
            if (escalationDiv) {
                escalationDiv.remove();
            }
            
            // Supprimer l'overlay
            const overlayDiv = document.getElementById(`overlay_${escalationId}`);
            if (overlayDiv) {
                overlayDiv.remove();
            }
            
            // R√©afficher les palettes
            showProblemPalettes();
        }
        
        /**
         * Ferme la confirmation de ticket et son overlay
         */
        function closeTicketConfirmation(confirmationId) {
            console.log(`‚úÖ [CloseConfirmation] Fermeture confirmation ${confirmationId}`);
            
            // Supprimer la confirmation
            const confirmationDiv = document.getElementById(confirmationId);
            if (confirmationDiv) {
                confirmationDiv.remove();
            }
            
            // Supprimer l'overlay
            const overlayDiv = document.getElementById(`overlay_${confirmationId}`);
            if (overlayDiv) {
                overlayDiv.remove();
            }
            
            // R√©afficher les palettes
            showProblemPalettes();
        }
        
        /**
         * Affiche la banni√®re de ticket existant avec overlay moderne
         */
        function showExistingTicketBanner(lastTicket) {
            console.log(`üé´ [ExistingTicket] Affichage banni√®re pour ticket existant: ${lastTicket.number}`);
            
            // ‚úÖ CORRECTION: Fermer toutes les banni√®res existantes AVANT d'en cr√©er une nouvelle
            const existingBanners = document.querySelectorAll('[id^="existing_ticket_"]');
            const existingOverlays = document.querySelectorAll('[id^="overlay_existing_ticket_"]');
            
            existingBanners.forEach(banner => {
                console.log(`üö´ [CleanupBanner] Suppression banni√®re existante: ${banner.id}`);
                banner.remove();
            });
            
            existingOverlays.forEach(overlay => {
                console.log(`üö´ [CleanupOverlay] Suppression overlay existant: ${overlay.id}`);
                overlay.remove();
            });
            
            const currentRoom = getCurrentRoom();
            
            // Cr√©er la banni√®re de ticket existant avec overlay plein √©cran
            const bannerId = `existing_ticket_${Date.now()}`;
            
            // Cr√©er l'overlay plein √©cran avec flou agressif
            const overlayDiv = document.createElement('div');
            overlayDiv.id = `overlay_${bannerId}`;
            overlayDiv.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(20px);
                z-index: 9998;
                cursor: pointer;
            `;
            
            // Cr√©er la banni√®re de ticket existant
            const bannerDiv = document.createElement('div');
            bannerDiv.id = bannerId;
            bannerDiv.className = 'escalation-compact fade-in';
            bannerDiv.style.cssText = `
                background: linear-gradient(135deg, #f59e0b 0%, #f97316 100%);
                color: white;
                border-radius: 12px;
                padding: 2rem;
                text-align: center;
                box-shadow: 0 20px 40px rgba(245, 158, 11, 0.4);
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 9999;
                width: 90%;
                max-width: 500px;
                animation: fadeIn 0.3s ease-out;
            `;
            
            bannerDiv.innerHTML = `
                <div style="font-size: 3rem; margin-bottom: 1rem;">üé´</div>
                <h3 style="margin: 0 0 1rem 0; font-size: 1.5rem; font-weight: 600;">Ticket d√©j√† cr√©√© pour cette salle</h3>
                <div style="background: rgba(255,255,255,0.15); padding: 1.25rem; border-radius: 10px; margin: 1.5rem 0;">
                    <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>üìÑ Num√©ro :</strong> ${lastTicket.number}</p>
                    <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>üè¢ Salle :</strong> ${lastTicket.room}</p>
                    <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>‚è∞ Cr√©√© :</strong> ${new Date(lastTicket.timestamp).toLocaleTimeString('fr-FR', {hour: '2-digit', minute: '2-digit'})}</p>
                </div>
                <p style="margin: 1.5rem 0; opacity: 0.95; font-size: 1rem; line-height: 1.4;">
                    Un ticket SEA a d√©j√† √©t√© escalad√© vers l'√©quipe technique dans la m√™me session.
                </p>
                <p style="margin: 1rem 0; opacity: 0.9; font-size: 0.9rem;">
                    üìû <strong>Vous pouvez toujours appeler directement le SEA au 6135</strong> pour un suivi ou une urgence.
                </p>
                <div style="display: flex; gap: 1rem; justify-content: center; margin-top: 1.5rem; flex-wrap: wrap;">
                    <button onclick="closeExistingTicketBanner('${bannerId}')" style="
                        background: rgba(255,255,255,0.2);
                        border: 1px solid rgba(255,255,255,0.4);
                        color: white;
                        padding: 0.75rem 1.5rem;
                        border-radius: 8px;
                        cursor: pointer;
                        font-size: 0.9rem;
                        font-weight: 500;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,255,255,0.3)'" onmouseout="this.style.background='rgba(255,255,255,0.2)'">
                        ‚úï Fermer
                    </button>
                    <button onclick="window.open('tel:6135', '_self')" style="
                        background: rgba(255,255,255,0.2);
                        border: 1px solid rgba(255,255,255,0.4);
                        color: white;
                        padding: 0.75rem 1.5rem;
                        border-radius: 8px;
                        cursor: pointer;
                        font-size: 0.9rem;
                        font-weight: 500;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,255,255,0.3)'" onmouseout="this.style.background='rgba(255,255,255,0.2)'">
                        üìû Appeler SEA
                    </button>
                    <button onclick="navigator.clipboard.writeText('${lastTicket.number}').then(() => alert('Num√©ro de ticket copi√©!'))" style="
                        background: rgba(255,255,255,0.9);
                        border: none;
                        color: #f97316;
                        padding: 0.75rem 1.5rem;
                        border-radius: 8px;
                        cursor: pointer;
                        font-size: 0.9rem;
                        font-weight: 500;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,255,255,1)'" onmouseout="this.style.background='rgba(255,255,255,0.9)'">
                        üìã Copier num√©ro
                    </button>
                </div>
            `;
            
            // ‚úÖ CORRECTION: Fermer au clic sur l'overlay mais PAS sur les √©l√©ments internes
            overlayDiv.onclick = (event) => {
                if (event.target === overlayDiv) {
                    closeExistingTicketBanner(bannerId);
                }
            };
            
            // ‚úÖ Emp√™cher la propagation des √©v√©nements depuis la banni√®re
            bannerDiv.onclick = (event) => {
                event.stopPropagation();
            };
            
            // Ajouter l'overlay et la banni√®re au body
            document.body.appendChild(overlayDiv);
            document.body.appendChild(bannerDiv);
            
            console.log(`üé´ [ExistingTicketBanner] Banni√®re affich√©e pour ticket ${lastTicket.number}`);
        }
        
        /**
         * Ferme la banni√®re de ticket existant
         */
        function closeExistingTicketBanner(bannerId) {
            console.log(`üö´ [CloseExistingTicket] Fermeture banni√®re ${bannerId}`);
            
            // Supprimer la banni√®re
            const bannerDiv = document.getElementById(bannerId);
            if (bannerDiv) {
                bannerDiv.remove();
            }
            
            // Supprimer l'overlay
            const overlayDiv = document.getElementById(`overlay_${bannerId}`);
            if (overlayDiv) {
                overlayDiv.remove();
            }
            
            // R√©afficher les palettes
            showProblemPalettes();
        }
        
        /**
         * Cr√©e un ticket directement avec description optionnelle du client
         */
        async function createTicketDirect(escalationId, problemType) {
            console.log(`üé´ [DirectTicket] Cr√©ation directe ticket pour ${problemType} - ${escalationId}`);
            
            // R√©cup√©rer la description optionnelle du client
            const descriptionTextarea = document.getElementById(`problemDescription_${problemType}_${escalationId}`);
            const clientDescription = descriptionTextarea ? descriptionTextarea.value.trim() : '';
            
            // D√©terminer le message g√©n√©rique selon le type
            let genericMessage = '';
            switch(problemType) {
                case 'video':
                    genericMessage = 'Probl√®me vid√©o signal√© - aucun affichage ou image d√©form√©e';
                    break;
                case 'audio':
                    genericMessage = 'Probl√®me audio signal√© - aucun son ou qualit√© d√©grad√©e';
                    break;
                default:
                    genericMessage = 'Probl√®me technique signal√© n√©cessitant intervention';
            }
            
            // Utiliser la description du client ou le message g√©n√©rique
            const finalDescription = clientDescription || genericMessage;
            
            console.log(`üìù [TicketDescription] ${clientDescription ? 'Description client' : 'Message g√©n√©rique'}: "${finalDescription}"`);
            
            await createTicket(escalationId, problemType, finalDescription);
        }

        /**
         * Cr√©e un ticket avec description optionnelle (conserv√© pour compatibilit√©)
         */
        async function createTicketWithDescription(escalationId, escalationActions) {
            const descriptionTextarea = document.getElementById('ticketDescription');
            const description = descriptionTextarea ? descriptionTextarea.value.trim() : '';
            
            closeTicketDescriptionModal();
            await createTicket(escalationId, escalationActions, description);
        }

        /**
         * Cr√©e un ticket SEA avec description fournie
         */
        async function createTicket(escalationId, problemType, description = '') {
            try {
                // ‚úÖ CORRECTION: V√©rifier si l'√©l√©ment existe avant de l'utiliser
                const escalationElement = document.getElementById(escalationId);
                
                // D√©sactiver les boutons seulement si l'√©l√©ment existe
                if (escalationElement) {
                    const buttons = escalationElement.querySelectorAll('button');
                    buttons.forEach(btn => btn.disabled = true);
                    
                    // Afficher un message de traitement
                    const loadingDiv = document.createElement('div');
                    loadingDiv.style.cssText = `
                        background: rgba(50, 150, 50, 0.8);
                        color: white;
                        padding: 1rem;
                        border-radius: 8px;
                        margin: 1rem 0;
                        text-align: center;
                        font-weight: 500;
                    `;
                    loadingDiv.textContent = 'üîÑ Cr√©ation du ticket SEA en cours...';
                    escalationElement.appendChild(loadingDiv);
                }
                
                // Pr√©parer les donn√©es du ticket avec infos Podio enrichies
                const currentRoom = getCurrentRoom();
                const isClientDescription = description && !description.includes('Probl√®me ') && description.length > 20;
                
                const baseDescription = `Probl√®me ${problemType} signal√© par un utilisateur via l'interface vitrine n√©cessitant une intervention technique.`;
                const fullDescription = `${baseDescription}\n\nDescription : ${description}`;
                
                // üè¢ R√©cup√©rer les infos Podio du cache s'il existe
                const podioInfo = window.roomCache?.podioInfo;
                
                const ticketData = {
                    category: 'technical_issue',
                    priority: 'medium',
                    title: `Probl√®me ${problemType} signal√© via vitrine - Salle ${currentRoom}`,
                    description: fullDescription,
                    client_message: isClientDescription ? 
                        `Signalement via vitrine SAV Qonnect\n\nDescription client : ${description}` : 
                        `Signalement via vitrine SAV Qonnect\n\nMessage g√©n√©rique : ${description}`,
                    copilot_analysis: `Analyse automatique : intervention technique recommand√©e`,
                    room: currentRoom,
                    device_name: 'Non sp√©cifi√©',
                    reporter_name: 'Utilisateur Vitrine',
                    // üÜï INFOS PODIO ENRICHIES (si disponibles)
                    room_pavillon: podioInfo?.pavillon || null,
                    room_bassin: podioInfo?.bassin || null,
                    room_type: podioInfo?.type || null,
                    room_capacite: podioInfo?.capacite || null
                };
                
                console.log('üé´ [CreateTicket] Donn√©es avec infos Podio:', {
                    room: currentRoom,
                    podioInfo: podioInfo,
                    hasPodioData: !!podioInfo
                });

                // Appeler l'API pour cr√©er le ticket
                const response = await fetch(`${API_BASE_URL}/api/copilot/vitrine-create-ticket`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(ticketData)
                });

                // ‚úÖ CORRECTION: Supprimer le message de chargement seulement s'il existe
                if (escalationElement) {
                    const loadingDiv = escalationElement.querySelector('div[style*="background: rgba(50, 150, 50, 0.8)"]');
                    if (loadingDiv) {
                        loadingDiv.remove();
                    }
                }

                if (!response.ok) {
                    throw new Error(`Erreur serveur (${response.status}). Veuillez r√©essayer plus tard.`);
                }

                const result = await response.json();
                
                if (result.success && result.ticket) {
                    // ‚úÖ AJOUTER LE TICKET √Ä LA SESSION pour √©viter les doublons
                    addTicketToSession(result.ticket);
                    
                    // ‚úÖ CORRECTION: Fermer la banni√®re SEA avec la bonne fonction
                    closeSEAEscalationBanner(escalationId);
                    
                    // ‚úÖ CORRECTION: Fermer toutes les banni√®res de confirmation existantes AVANT d'en cr√©er une nouvelle
                    const existingConfirmationBanners = document.querySelectorAll('[id^="confirmation_"]');
                    const existingConfirmationOverlays = document.querySelectorAll('[id^="overlay_confirmation_"]');
                    
                    existingConfirmationBanners.forEach(banner => {
                        console.log(`üö´ [CleanupConfirmationBanner] Suppression banni√®re confirmation existante: ${banner.id}`);
                        banner.remove();
                    });
                    
                    existingConfirmationOverlays.forEach(overlay => {
                        console.log(`üö´ [CleanupConfirmationOverlay] Suppression overlay confirmation existant: ${overlay.id}`);
                        overlay.remove();
                    });
                    
                    // Cr√©er la confirmation avec overlay plein √©cran
                    const confirmationId = `confirmation_${Date.now()}`;
                    
                    // Cr√©er l'overlay plein √©cran avec flou agressif
                    const overlayDiv = document.createElement('div');
                    overlayDiv.id = `overlay_${confirmationId}`;
                    overlayDiv.style.cssText = `
                        position: fixed;
                        top: 0;
                        left: 0;
                        width: 100vw;
                        height: 100vh;
                        background: rgba(0, 0, 0, 0.8);
                        backdrop-filter: blur(20px);
                        z-index: 9998;
                        cursor: pointer;
                    `;
                    
                    // Cr√©er la confirmation de ticket avec style moderne
                    const successDiv = document.createElement('div');
                    successDiv.id = confirmationId;
                    successDiv.style.cssText = `
                        background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
                        color: white;
                        border-radius: 12px;
                        padding: 2rem;
                        text-align: center;
                        box-shadow: 0 20px 40px rgba(76, 175, 80, 0.4);
                        position: fixed;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        z-index: 9999;
                        width: 90%;
                        max-width: 500px;
                        animation: fadeIn 0.3s ease-out;
                    `;
                    
                    successDiv.innerHTML = `
                        <div style="font-size: 3rem; margin-bottom: 1rem;">üé´</div>
                        <h3 style="margin: 0 0 1rem 0; font-size: 1.5rem; font-weight: 600;">Ticket SEA cr√©√© avec succ√®s !</h3>
                        <div style="background: rgba(255,255,255,0.15); padding: 1.25rem; border-radius: 10px; margin: 1.5rem 0;">
                            <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>üìÑ Num√©ro :</strong> ${result.ticket.ticket_number || result.ticket.id}</p>
                            <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>üè¢ Salle :</strong> ${result.ticket.room || 'Non sp√©cifi√©'}</p>
                            <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>üîß Type :</strong> Probl√®me ${problemType}</p>
                        </div>
                        <p style="margin: 1.5rem 0; opacity: 0.95; font-size: 1rem; line-height: 1.4;">
                            L'√©quipe SEA a re√ßu votre demande et va traiter le probl√®me rapidement.
                        </p>
                        <button onclick="closeTicketConfirmation('${confirmationId}')" style="
                            background: rgba(255,255,255,0.2);
                            border: 1px solid rgba(255,255,255,0.4);
                            color: white;
                            padding: 0.85rem 2rem;
                            border-radius: 8px;
                            cursor: pointer;
                            margin-top: 1rem;
                            font-size: 1rem;
                            font-weight: 500;
                            transition: all 0.3s ease;
                        " onmouseover="this.style.background='rgba(255,255,255,0.3)'" onmouseout="this.style.background='rgba(255,255,255,0.2)'">
                            ‚úÖ Fermer
                        </button>
                    `;
                    
                    // ‚úÖ CORRECTION: Fermer au clic sur l'overlay mais PAS sur les √©l√©ments internes
                    overlayDiv.onclick = (event) => {
                        if (event.target === overlayDiv) {
                            closeTicketConfirmation(confirmationId);
                        }
                    };
                    
                    // ‚úÖ Emp√™cher la propagation des √©v√©nements depuis la banni√®re
                    successDiv.onclick = (event) => {
                        event.stopPropagation();
                    };
                    
                    // Ajouter l'overlay et la confirmation au body
                    document.body.appendChild(overlayDiv);
                    document.body.appendChild(successDiv);
                    
                    console.log(`üé´ [CreateTicket] Ticket ${result.ticket.ticket_number} cr√©√© pour la salle ${currentRoom}`);
                } else {
                    throw new Error(result.message || 'Erreur lors de la cr√©ation du ticket');
                }
                
            } catch (error) {
                console.error('Erreur lors de la cr√©ation du ticket:', error);
                
                // ‚úÖ CORRECTION: Fermer la banni√®re m√™me en cas d'erreur
                closeSEAEscalationBanner(escalationId);
                
                showModal(
                    '‚ùå',
                    'Erreur de cr√©ation',
                    `Impossible de cr√©er le ticket : ${error.message}\n\nVeuillez contacter le SEA directement au 6135.`,
                    'warning'
                );
            }
        }

        // ===== FONCTIONS UTILITAIRES =====

        /**
         * Formate le contenu HTML
         */
        function formatContent(content) {
            return content
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/\*(.*?)\*/g, '<em>$1</em>')
                .replace(/\n/g, '<br>');
        }

        /**
         * Ferme une escalade
         */
        function dismissEscalation(escalationId) {
            const escalationElement = document.getElementById(escalationId);
            if (escalationElement) {
                escalationElement.remove();
            }
        }

        /**
         * Supprime un message
         */
        function removeMessage(messageId) {
            const messageElement = document.getElementById(messageId);
            if (messageElement) {
                messageElement.remove();
            }
        }



        /**
         * Affiche la modale avec le r√©sultat
         */
        function showModal(icon, title, message, type) {
            const modalOverlay = document.getElementById('modalOverlay');
            const modalIcon = document.getElementById('modalIcon');
            const modalTitle = document.getElementById('modalTitle');
            const modalMessage = document.getElementById('modalMessage');
            
            modalIcon.textContent = icon;
            modalTitle.textContent = title;
            modalMessage.textContent = message;
            
            // Appliquer des styles selon le type
            const modal = document.getElementById('modal');
            modal.className = 'modal';
            if (type === 'success') {
                modal.style.borderLeft = '4px solid var(--primary-green)';
            } else if (type === 'warning') {
                modal.style.borderLeft = '4px solid var(--primary-orange)';
            } else if (type === 'info') {
                modal.style.borderLeft = '4px solid var(--primary-blue)';
            }
            
            modalOverlay.classList.add('active');
        }

        /**
         * Ferme la modale
         */
        function closeModal() {
            const modalOverlay = document.getElementById('modalOverlay');
            modalOverlay.classList.remove('active');
            
            // Retour automatique √† l'accueil apr√®s un d√©lai
            setTimeout(() => {
                returnToHome();
            }, 300);
        }



        // ===== GESTIONNAIRES D'√âV√âNEMENTS =====

        // Fermer la modale en cliquant sur l'overlay
        document.getElementById('modalOverlay').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });

        // Fermer la modale avec la touche Escape
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeModal();
            }
        });

        // ===== FONCTIONS DE L'ORIGINAL =====

        function addMessage(type, content, data = {}) {
            // ‚úÖ BLOQUER COMPL√àTEMENT : Si c'est une action automatique ex√©cut√©e, ne rien afficher dans le chat
            if (data.auto_executed && data.auto_result) {
                // ‚úÖ NOUVEAU: D√©tecter les allumages de projecteur (actions + auto_result)
                const isProjectorPowerOnFromActions = data.actions && data.actions.some(action => 
                    action.type === 'pjlink_power' && 
                    (action.command === 'power_on' || action.description?.toLowerCase().includes('allumer'))
                );
                
                const isProjectorPowerOnFromResult = data.auto_result && 
                    (data.auto_result.toLowerCase().includes('allumer') && 
                     (data.auto_result.includes('PROJ-') || data.auto_result.toLowerCase().includes('projecteur')));
                
                const isAVMuteAction = data.auto_result && 
                    (data.auto_result.toLowerCase().includes('av mute') || 
                     data.auto_result.toLowerCase().includes('d√©sactiver') && data.auto_result.includes('PROJ-'));
                
                // ‚úÖ LOGIQUE SIMPLIFI√âE : Banni√®re verte simple pour TOUTES les corrections automatiques
                console.log('‚úÖ [AutoCorrection] Action automatique r√©ussie - Banni√®re verte simple');
                setTimeout(() => {
                    showAutoResultBanner(data.auto_result);
                }, 500);
                return; // Ne pas cr√©er de message dans le chat
            }
            
            const messageId = `msg_${Date.now()}_${++messageCount}`;
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${type}`;
            messageDiv.id = messageId;

            let messageContent = '';

            if (data.isLoading) {
                messageContent = `
                    <div class="message-content">
                        <div class="loading">
                            <div class="loading-dots">
                                <div class="loading-dot"></div>
                                <div class="loading-dot"></div>
                                <div class="loading-dot"></div>
                            </div>
                            <span>Analyse en cours...</span>
                        </div>
                    </div>
                `;
            } else {
                messageContent = `<div class="message-content">`;
                
                if (type === 'user') {
                    messageContent += `<strong>Vous :</strong> ${content}`;
                } else {
                    // ‚úÖ FILTRER : Supprimer les messages d'actions automatiques du contenu principal
                    let filteredContent = content;
                    if (typeof filteredContent === 'string') {
                        // Supprimer les lignes contenant des messages d'actions automatiques
                        filteredContent = filteredContent
                            .split('\n')
                            .filter(line => !line.includes('Actions automatiques ex√©cut√©es'))
                            .filter(line => !line.match(/^‚úÖ.*D√©sactiver.*sourdine/))
                            .filter(line => !line.match(/^‚úÖ.*TCC2.*sourdine/))
                            .filter(line => !line.match(/^‚úÖ.*[Aa]ction.*automatique/))
                            .filter(line => line.trim() !== '')
                            .join('\n');
                    }
                    messageContent += formatContent(filteredContent);
                }
                
                // Actions manuelles uniquement (les actions automatiques sont g√©r√©es par la banni√®re centr√©e)
                if (data.actions && data.actions.length > 0) {
                    const manualActions = data.actions.filter(action => !(action.executed || data.auto_executed));
                    if (manualActions.length > 0) {
                    messageContent += '<div class="message-actions">';
                        manualActions.forEach(action => {
                            messageContent += `<button class="action-btn" onclick="executeAction('${action.type}', '${action.device_id || 0}', ${JSON.stringify(action.parameters || {}).replace(/"/g, '&quot;')})">üîß ${action.description || action.label || action.type}</button>`;
                    });
                    messageContent += '</div>';
                }
                }

                // ‚úÖ Les actions automatiques sont g√©r√©es au d√©but de addMessage (pas ici)
                
                // ‚úÖ CORRECTION: Escalade avec banni√®re centr√©e - v√©rifier les tickets existants
                if (data.escalation_needed) {
                    setTimeout(() => {
                        const currentRoom = getCurrentRoom();
                        if (hasExistingTicket(currentRoom)) {
                            const lastTicket = getLastSessionTicket(currentRoom);
                            console.log(`üé´ [TicketExistant] Escalade demand√©e mais ticket ${lastTicket.number} existe ‚Üí Banni√®re ticket existant`);
                            showExistingTicketBanner(lastTicket);
                        } else {
                            showSEAEscalationBanner(data);
                        }
                    }, 500);
                }
                
                // ‚úÖ Actions automatiques d√©j√† g√©r√©es au d√©but de addMessage
                
                messageContent += '</div>';
            }

            messageDiv.innerHTML = messageContent;
            
            // ‚úÖ NOUVEAU : Remplacer le contenu au lieu d'ajouter
            const assistantPage = document.getElementById('assistantPage');
            
            // Supprimer tous les messages pr√©c√©dents
            const existingMessages = assistantPage.querySelectorAll('.message');
            existingMessages.forEach(msg => msg.remove());
            
            // Ajouter le nouveau message
            assistantPage.appendChild(messageDiv);
            
            // Charger l'image SEA2 pour les banni√®res d'escalade
            setTimeout(async () => {
                const escalationImgs = messageDiv.querySelectorAll('.sea-escalation-image');
                for (const img of escalationImgs) {
                    if (img && img.id && img.id.includes('sea-logo-escalation')) {
                        await updateSEALogo(img);
                    }
                }
            }, 100);

            return messageId;
        }



        // ===== CACHE PODIO SESSION POUR INFOS SALLES =====
        
        /**
         * Cache session pour les informations Podio des salles
         * Garde les donn√©es jusqu'au F5 de la page
         */
        class PodioRoomCache {
            constructor() {
                this.cache = new Map();
                this.maxCacheSize = 50; // Limite m√©moire
                console.log('üè¢ [PodioCache] Cache Podio initialis√©');
            }
            
            /**
             * R√©cup√®re les informations d'une salle avec cache session
             */
            async getRoomInfo(roomName) {
                // üíæ Check cache first (session seulement)
                if (this.cache.has(roomName)) {
                    console.log(`üìã [PodioCache] Cache hit pour salle: ${roomName}`);
                    return this.cache.get(roomName);
                }
                
                try {
                    console.log(`üåê [PodioCache] API call pour salle: ${roomName}`);
                    
                    // üêç Appel API Podio PRIORITAIRE avec fallback NeonDB si √©chec
                    const response = await fetch(
                        `${API_BASE_URL}/api/podio/public-room-info?room=${encodeURIComponent(roomName)}`,
                        {
                            method: 'GET',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            // üïê Timeout pour √©viter blocage
                            signal: AbortSignal.timeout(10000) // 10s timeout
                        }
                    );
                    
                    if (!response.ok) {
                        if (response.status === 429) {
                            throw new Error('Rate limit atteint - veuillez patienter');
                        }
                        throw new Error(`HTTP ${response.status}: Salle non trouv√©e`);
                    }
                    
                    const data = await response.json();
                    
                    // ‚úÖ PODIO SUCC√àS: Parser la r√©ponse Podio normale
                    if (data.success && data.details) {
                        console.log(`‚úÖ [PodioCache] Salle ${roomName} trouv√©e dans Podio`);
                        const roomInfo = {
                            name: data.salle_code || roomName,
                            pavillon: data.details.Pavillon || '',
                            bassin: data.details.Proprietaire || '',
                            type: data.details["Type de salle"] || '',
                            capacite: data.details["Capacit√©"] || '',
                            source: 'podio'
                        };
                        
                        this.cache.set(roomName, roomInfo);
                        console.log(`‚úÖ [PodioCache] Salle ${roomName} mise en cache (Podio):`, roomInfo);
                        return roomInfo;
                    }
                    
                    // ‚ö†Ô∏è PODIO √âCHEC: Essayer fallback NeonDB pour √©quipements
                    console.log(`‚ö†Ô∏è [PodioCache] Salle ${roomName} non trouv√©e dans Podio ‚Üí Tentative fallback NeonDB`);
                    throw new Error('Salle non trouv√©e dans Podio, fallback NeonDB n√©cessaire');
                    
                } catch (error) {
                    console.warn(`‚ö†Ô∏è [PodioCache] √âchec Podio pour ${roomName}: ${error.message}`);
                    
                    // ‚úÖ FALLBACK NEONDB: Essayer de r√©cup√©rer les √©quipements depuis NeonDB
                    try {
                        console.log(`üîÑ [PodioCache] Tentative fallback NeonDB pour salle: ${roomName}`);
                        
                        const neonResponse = await fetch(
                            `${API_BASE_URL}/api/room/equipment?room=${encodeURIComponent(roomName)}`,
                            {
                                method: 'GET',
                                headers: { 'Content-Type': 'application/json' },
                                signal: AbortSignal.timeout(8000) // Timeout plus court pour fallback
                            }
                        );
                        
                        if (neonResponse.ok) {
                            const neonData = await neonResponse.json();
                            if (neonData.success && Array.isArray(neonData.devices)) {
                                console.log(`‚úÖ [PodioCache] Salle ${roomName} trouv√©e via NeonDB (${neonData.devices.length} √©quipements)`);
                                
                                const roomInfo = {
                                    name: roomName,
                                    pavillon: '', // Non disponible via NeonDB
                                    bassin: '',   // Non disponible via NeonDB
                                    type: '',     // Non disponible via NeonDB
                                    capacite: '', // Non disponible via NeonDB
                                    devices: neonData.devices || [],
                                    equipment_count: neonData.count || 0,
                                    source: 'neondb' // ‚úÖ Marquer la source
                                };
                                
                                // üíæ Mettre en cache le r√©sultat NeonDB
                                this.cache.set(roomName, roomInfo);
                                
                                // üßπ Nettoyer cache si n√©cessaire
                                if (this.cache.size > this.maxCacheSize) {
                                    const firstKey = this.cache.keys().next().value;
                                    this.cache.delete(firstKey);
                                    console.log(`üßπ [PodioCache] Cache nettoy√© - supprim√©: ${firstKey}`);
                                }
                                
                                console.log(`‚úÖ [PodioCache] Salle ${roomName} mise en cache (NeonDB):`, roomInfo);
                                return roomInfo;
                            }
                        }
                        
                        console.log(`‚ùå [PodioCache] Fallback NeonDB √©galement √©chou√© pour ${roomName}`);
                        return null; // D√©gradation gracieuse
                        
                    } catch (neonError) {
                        console.warn(`‚ùå [PodioCache] Erreur fallback NeonDB pour ${roomName}:`, neonError.message);
                        return null; // D√©gradation gracieuse
                    }
                }
            }
            
            /**
             * Vide le cache manuellement (pour tests)
             */
            clearCache() {
                this.cache.clear();
                console.log('üßπ [PodioCache] Cache Podio vid√© manuellement');
            }
            
            /**
             * Statistiques du cache
             */
            getStats() {
                return {
                    size: this.cache.size,
                    maxSize: this.maxCacheSize,
                    keys: Array.from(this.cache.keys())
                };
            }
        }
        
        // Instance globale du cache Podio
        const podioRoomCache = new PodioRoomCache();

        // ===== FONCTIONS UTILITAIRES POUR TICKETS =====
        
        /**
         * D√©termine le type de probl√®me bas√© sur le contexte
         */
        function determineProblemType() {
            // Analyser le dernier message ou le contexte pour d√©terminer le type
            const messages = document.querySelectorAll('.message');
            if (messages.length > 0) {
                const lastMessage = messages[messages.length - 1];
                const messageText = lastMessage.textContent.toLowerCase();
                
                if (messageText.includes('audio') || messageText.includes('son') || messageText.includes('microphone') || messageText.includes('haut-parleur')) {
                    return 'audio';
                } else if (messageText.includes('vid√©o') || messageText.includes('projecteur') || messageText.includes('√©cran') || messageText.includes('image')) {
                    return 'vid√©o';
                } else if (messageText.includes('r√©seau') || messageText.includes('internet') || messageText.includes('wifi') || messageText.includes('connexion')) {
                    return 'r√©seau';
                } else {
                    return 'technique';
                }
            }
            return 'technique';
        }
        
        /**
         * G√©n√®re un message g√©n√©rique selon le type de probl√®me
         */
        function getGenericMessage(problemType) {
            const messages = {
                'audio': 'Probl√®me audio signal√© - Microphone, haut-parleurs, volume ou qualit√© sonore',
                'vid√©o': 'Probl√®me vid√©o signal√© - Projecteur, √©cran, qualit√© d\'image ou connectivit√©',
                'r√©seau': 'Probl√®me r√©seau signal√© - Connexion internet, Wi-Fi ou connectivit√© r√©seau',
                'technique': 'Probl√®me technique signal√© - √âquipement, infrastructure ou maintenance g√©n√©rale'
            };
            
            return messages[problemType] || messages['technique'];
        }

        // ===== FONCTIONS DE TH√àME ET NAVIGATION =====
        
        // Basculer le th√®me
        function toggleTheme() {
            const body = document.body;
            const themeIcon = document.getElementById('themeIcon');
            const themeText = document.getElementById('themeText');
            
            if (body.getAttribute('data-theme') === 'dark') {
                body.removeAttribute('data-theme');
                themeIcon.className = 'fas fa-moon';
                themeText.textContent = 'Mode nuit';
                localStorage.removeItem('theme');
                } else {
                body.setAttribute('data-theme', 'dark');
                themeIcon.className = 'fas fa-sun';
                themeText.textContent = 'Mode jour';
                localStorage.setItem('theme', 'dark');
            }
        }

        // Retour √† l'accueil (page des palettes) - PAS la landing page
        function returnToHome() {
            // S'assurer que la page des palettes est visible
            document.getElementById('assistantPage').style.display = 'block';
            document.getElementById('landingPage').style.display = 'none';
            
            // Vider les messages
            const assistantPage = document.getElementById('assistantPage');
            const existingMessages = assistantPage.querySelectorAll('.message');
            existingMessages.forEach(msg => msg.remove());
            
            // ‚úÖ NETTOYAGE : Supprimer toutes les banni√®res d'escalade
            const escalationInterfaces = document.querySelectorAll('.escalation-interface');
            escalationInterfaces.forEach(interface => interface.remove());
            
            const escalationCompact = document.querySelectorAll('.escalation-compact');
            escalationCompact.forEach(compact => compact.remove());
            
            // ‚úÖ NETTOYAGE : Supprimer tous les messages contenant "Actions automatiques ex√©cut√©es"
            document.querySelectorAll('.message').forEach(message => {
                if (message.textContent && message.textContent.includes('Actions automatiques ex√©cut√©es')) {
                    message.remove();
                }
            });
            
            // Afficher les palettes de probl√®mes avec la grille horizontale
            const problemPalettes = document.getElementById('problemPalettes');
            if (problemPalettes) {
                problemPalettes.style.display = 'grid';
                problemPalettes.style.gridTemplateColumns = 'repeat(auto-fit, minmax(250px, 1fr))';
                problemPalettes.style.gap = '2rem';
            }
            
            // Vider les suggestions
            const suggestionsContainer = document.getElementById('suggestions');
            if (suggestionsContainer) {
                suggestionsContainer.innerHTML = '';
            }
            
            console.log('üè† Retour √† l\'accueil (page des palettes)');
        }

        // Appliquer le th√®me sauvegard√© au chargement
        document.addEventListener('DOMContentLoaded', () => {
            // ‚úÖ NETTOYAGE : Supprimer toutes les banni√®res d'escalade r√©siduelles
            const oldEscalationInterfaces = document.querySelectorAll('.escalation-interface');
            oldEscalationInterfaces.forEach(interface => interface.remove());
            
            const oldEscalationCompact = document.querySelectorAll('.escalation-compact');
            oldEscalationCompact.forEach(compact => compact.remove());
            
            // ‚úÖ NETTOYAGE IMM√âDIAT : Supprimer tous les messages "Actions automatiques ex√©cut√©es"
            setTimeout(() => {
                document.querySelectorAll('.message').forEach(message => {
                    if (message.textContent && message.textContent.includes('Actions automatiques ex√©cut√©es')) {
                        message.remove();
                        console.log('üßπ Message "Actions automatiques ex√©cut√©es" supprim√© du DOM');
                    }
                });
            }, 100);
            
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme === 'dark') {
                document.body.setAttribute('data-theme', 'dark');
                document.getElementById('themeIcon').className = 'fas fa-sun';
                document.getElementById('themeText').textContent = 'Mode jour';
            }
        });





        // ===== INITIALISATION =====
        console.log('üéõÔ∏è Assistant Salle AV - Syst√®me initialis√©');
        console.log('üìã Fonctionnalit√©s disponibles :');
        console.log('  ‚Ä¢ Saisie obligatoire de salle');
        console.log('  ‚Ä¢ Cache persistant de salle');
        console.log('  ‚Ä¢ Diagnostic audio automatique');
        console.log('  ‚Ä¢ Diagnostic vid√©o automatique');
        console.log('  ‚Ä¢ Redirection r√©seau');
        console.log('  ‚Ä¢ Redirection SIM');
        console.log('  ‚Ä¢ Mode sombre');
        console.log('  ‚Ä¢ Bouton de retour');
        
// --- end <script> ---


// === Patch: persistence nomSalle ===
(function(){
  if (typeof setRoom === 'function') {
    const __origSetRoom = setRoom;
    window.setRoom = function(room){
      if(!room) return;
      try{ localStorage.setItem('nomSalle', room); }catch(e){}
      return __origSetRoom.call(this, room);
    };
  }
})();


// === Auto-restore salle au chargement ===
document.addEventListener('DOMContentLoaded', function(){
  try{
    var savedRoom = localStorage.getItem('nomSalle');
    if(savedRoom){ setRoom(savedRoom); }
  }catch(e){}
});


// === Secret admin reset (Alt + * then S) ===
(function(){
  var ADMIN_CODE = 'adminsav';
  var lastStarTs = 0;
  var STAR_WINDOW_MS = 2000; // d√©lai max entre * et S

  function ensureOverlayStyles() {
    if (document.getElementById('admin-reset-styles')) return;
    var st = document.createElement('style');
    st.id = 'admin-reset-styles';
    st.textContent = [
      '.admin-overlay{position:fixed;inset:0;display:flex;align-items:center;justify-content:center;',
      'background:rgba(0,0,0,.45);z-index:9999;}',
      '.admin-modal{background:#fff;max-width:480px;width:92%;border-radius:14px;',
      'box-shadow:0 20px 60px rgba(0,0,0,.25);padding:20px 20px 16px;',
      'font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif;}',
      '[data-theme="dark"] .admin-modal{background:#1f2937;color:#e5e7eb;}',
      '.admin-title{font-size:18px;font-weight:700;margin:0 0 6px;}',
      '.admin-sub{font-size:13px;color:#6b7280;margin:0 0 14px;}',
      '[data-theme="dark"] .admin-sub{color:#9ca3af;}',
      '.admin-input{width:100%;padding:10px 12px;border:1px solid #d1d5db;border-radius:10px;',
      'font-size:15px;background:#fff;color:#111827;outline:none;}',
      '[data-theme="dark"] .admin-input{background:#111827;color:#e5e7eb;border-color:#374151;}',
      '.admin-actions{display:flex;gap:10px;justify-content:flex-end;margin-top:14px;}',
      '.admin-btn{padding:10px 14px;border-radius:10px;border:1px solid #d1d5db;cursor:pointer;font-weight:600;}',
      '.admin-btn.primary{background:#3b82f6;border-color:#2563eb;color:#fff;}',
      '.admin-error{color:#dc2626;font-size:13px;margin-top:8px;display:none;}'
    ].join('');
    document.head.appendChild(st);
  }

  function showAdminPrompt() {
    ensureOverlayStyles();
    var ov = document.createElement('div');
    ov.className = 'admin-overlay';
    ov.innerHTML = ''
      + '<div class="admin-modal">'
      + '  <h3 class="admin-title">Acc√®s administrateur</h3>'
      + '  <p class="admin-sub">Entrez le mot de passe pour r√©initialiser la salle sur ce poste.</p>'
      + '  <input type="password" class="admin-input" id="admin-pass" placeholder="Mot de passe">'
      + '  <div class="admin-error" id="admin-error">Mot de passe incorrect.</div>'
      + '  <div class="admin-actions">'
      + '    <button class="admin-btn" id="admin-cancel">Annuler</button>'
      + '    <button class="admin-btn primary" id="admin-ok">Valider</button>'
      + '  </div>'
      + '</div>';
    document.body.appendChild(ov);

    var input = ov.querySelector('#admin-pass');
    var err = ov.querySelector('#admin-error');
    var cancel = ov.querySelector('#admin-cancel');
    var ok = ov.querySelector('#admin-ok');

    function close() { ov.remove(); }
    function submit() {
      var v = input.value || '';
      if (v === ADMIN_CODE) {
        try { localStorage.removeItem('nomSalle'); } catch(e) {}
        // On recharge pour revenir √† l'√©tat initial (saisie salle)
        location.reload();
      } else {
        err.style.display = 'block';
        input.select();
        input.focus();
      }
    }

    cancel.addEventListener('click', close);
    ok.addEventListener('click', submit);
    input.addEventListener('keydown', function(e){
      if (e.key === 'Enter') submit();
      if (e.key === 'Escape') close();
    });

    // Fermer en cliquant hors du modal
    ov.addEventListener('click', function(e){
      if (e.target === ov) close();
    });

    setTimeout(function(){ input.focus(); }, 50);
  }

  // D√©tection Alt + * puis S (sous 2s)
  document.addEventListener('keydown', function(e){
    // √âtape 1 : Alt + * (souvent Shift+8)
    var isStar = (e.key === '*') || (e.key === '8' && e.shiftKey);
    if (e.altKey && isStar) {
      lastStarTs = Date.now();
      return;
    }
    // √âtape 2 : S apr√®s Alt+*
    if ((e.key === 's' || e.key === 'S') && (Date.now() - lastStarTs <= STAR_WINDOW_MS)) {
      e.preventDefault();
      e.stopPropagation();
      showAdminPrompt();
      lastStarTs = 0;
    }
  }, true);
})();
