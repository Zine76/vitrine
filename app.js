        // ===== CONFIGURATION DYNAMIQUE =====
        // R√É¬©cup√É¬©rer le backend depuis les param√É¬®tres URL ou utiliser IP locale par d√É¬©faut
        const urlParams = new URLSearchParams(window.location.search);
        const customBackend = urlParams.get('backend');
        
        // √¢≈ì‚Ä¶ D√É‚Ä∞TECTION AUTOMATIQUE PROTOCOLE (HTTPS si page HTTPS)
        const isSecurePage = location.protocol === 'https:';
        // √¢≈ì‚Ä¶ CONFIGURATION INTELLIGENTE - DNS avec fallback DNS alternatif
        // üö´ NEUTRALIT√â GITHUB : Variables backend configur√©es par vitrine.html
        // Ces variables sont d√©finies dans vitrine.html avant le chargement de ce script
        let API_BASE_URL = window.API_BASE_URL || 'http://localhost:7070';
        const FALLBACK_DNS_URL = window.FALLBACK_DNS_URL || 'http://localhost:7070';
        
        // Test rapide du DNS, sinon utiliser DNS alternatif  
        async function detectBestBackend() {
            try {
                const testResponse = await fetch(`${API_BASE_URL}/api/health`, { 
                    method: 'GET', 
                    signal: AbortSignal.timeout(5000) // √¢≈ì‚Ä¶ CORRIG√É‚Ä∞ : Timeout plus long (5s au lieu de 2s)
                });
                if (testResponse.ok) {
                    console.log('‚úÖ [Config] DNS accessible, utilisation du backend configur√©');
                    return API_BASE_URL;
                }
            } catch (error) {
                console.log('√¢≈°¬†√Ø¬∏¬è [Config] DNS timeout, bascule vers IP directe');
                API_BASE_URL = FALLBACK_DNS_URL;
                currentAPI = FALLBACK_DNS_URL;
                return FALLBACK_DNS_URL;
            }
        }
        
        // √¢≈ì‚Ä¶ INITIALISATION SYNCHRONE AVEC FALLBACK
        let currentAPI = API_BASE_URL; // Par d√É¬©faut
        let backendInitialized = false;
        
        // Fonction d'initialisation avec Promise pour attendre
        const backendInitPromise = (async function initializeBackend() {
            try {
                const detectedAPI = await detectBestBackend();
                currentAPI = detectedAPI || API_BASE_URL; // √¢≈ì‚Ä¶ S'assurer que currentAPI est mis √É¬† jour
                backendInitialized = true;
                console.log(`√∞≈∏≈í¬ê [Config] Backend utilis√É¬©: ${currentAPI}`);
                console.log(`√∞≈∏‚Äì¬º√Ø¬∏¬è [Config] Images depuis: ${ASSETS_BASE}`);
                return currentAPI;
            } catch (error) {
                console.error('√¢¬ù≈í [Config] Erreur initialisation backend:', error);
                backendInitialized = true;
                return currentAPI;
            }
        })();
        
        // Fonction helper pour obtenir l'API courante
        async function getCurrentAPI() {
            if (!backendInitialized) {
                await backendInitPromise;
            }
            return currentAPI;
        }
        
        // √¢≈ì‚Ä¶ CONFIGURATION IMAGES LOCALES
        const ASSETS_BASE = 'assets';
        
        // √¢≈ì‚Ä¶ NOUVEAU: Red√É¬©marrer toutes les connexions SSE apr√É¬®s changement d'API
        function restartSSEConnections() {
            console.log(`√∞≈∏‚Äù‚Äû [SSERestart] Red√É¬©marrage connexions SSE vers: ${currentAPI}`);
            
            // Red√É¬©marrer Chat SSE
            if (getCurrentRoom()) {
                setTimeout(() => {
                    startChatRequestListener();
                }, 100);
            }
            
            // Red√É¬©marrer Status Events SSE
            if (statusEventSource) {
                statusEventSource.close();
                statusEventSource = null;
            }
            if (getCurrentRoom()) {
                setTimeout(() => {
                    startStatusEventSource();
                }, 200);
            }
        }
        
        // √¢≈ì‚Ä¶ MONITORING SIMPLIFI√É‚Ä∞ - BACKEND UNIQUE
        
        // √¢≈ì‚Ä¶ CONFIGURATION TERMIN√É‚Ä∞E
        
        async function testBackendConnectivity(url) {
            try {
                const response = await fetch(`${url}/api/health`, { 
                    method: 'GET',
                    signal: AbortSignal.timeout(3000) // Timeout 3s
                });
                return response.ok;
            } catch (error) {
                console.log(`√¢≈°¬†√Ø¬∏¬è [Connectivity] Backend ${url} non disponible:`, error.message);
                return false;
            }
        }
        
        // √¢≈ì‚Ä¶ FONCTION SIMPLIFI√É‚Ä∞E - BACKEND UNIQUE
        async function ensureBackendConnection() {
            const api = await getCurrentAPI();
            console.log(`√¢≈ì‚Ä¶ [Config] Utilisation backend unique: ${api}`);
            return api;
        }
        
        // √¢≈ì‚Ä¶ FONCTION SIMPLIFI√É‚Ä∞E - APPELS DIRECTS
        let isLoading = false;
        let messageCount = 0;
        let messagesContainer;
        let suggestionsContainer;
        let latestRAGContext = null;
        let isConnected = false;
        const problemInput = document.getElementById('problemInput');
        
        // ===== CHAT SEA VARIABLES =====
        let currentChatId = null;
        let chatEventSource = null;
        let clientID = null;
        let kioskID = null;
        
        // ===== IMAGE SEA2 =====
        function updateSEALogo(imgElement) {
            if (imgElement) {
                console.log('√∞≈∏‚Äì¬º√Ø¬∏¬è [UpdateSEALogo] Tentative de chargement image SEA pour:', imgElement.id || 'sans ID');
                
                // √¢≈ì‚Ä¶ UTILISER IMAGES LOCALES
                imgElement.src = `${ASSETS_BASE}/SEA2.png`;
                
                imgElement.onerror = function() {
                    console.log('√¢¬ù≈í [UpdateSEALogo] √É‚Ä∞chec chargement local');
                    this.src = 'assets/SEA2.png';
                    
                    this.onerror = function() {
                        console.log('√¢¬ù≈í [UpdateSEALogo] √É‚Ä∞chec serveur distant, utilisation fallback');
                        // Fallback vers image directement dans le dossier Annexe
                        this.src = './SEA2.png';
                        
                        this.onerror = function() {
                            console.log('√¢¬ù≈í [UpdateSEALogo] Tous les chemins √É¬©chou√É¬©s, image vide');
                        };
                    };
                };
                
                imgElement.onload = function() {
                    console.log('√¢≈ì‚Ä¶ [UpdateSEALogo] Image SEA charg√É¬©e avec succ√É¬®s depuis:', this.src);
                };
            } else {
                console.log('√¢¬ù≈í [UpdateSEALogo] √É‚Ä∞l√É¬©ment image non trouv√É¬©');
            }
        }
        
        // √¢≈ì‚Ä¶ NOUVEAU : Gestion des tickets de session
        let sessionTickets = [];

        // ===== CACHE DE SALLE PERSISTANT =====
        window.roomCache = {
            room: null,
            pavilion: null,
            roomNumber: null,
            isSet: false
        };

        // ===== DOM ELEMENTS =====
        const landingPage = document.getElementById('landingPage');
        const assistantPage = document.getElementById('assistantPage');
        const roomInput = document.getElementById('roomInput');
        const confirmRoomBtn = document.getElementById('confirmRoomBtn');
        const currentRoomDisplay = document.getElementById('currentRoomDisplay');

        // ===== FONCTIONS DE GESTION DE LA SALLE =====

        /**
         * Gestion des touches pour la saisie de salle
         */
        function handleRoomKeyPress(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                confirmRoom();
            }
        }

        /**
         * D√É¬©finir un exemple de salle
         */
        function setRoomExample(roomName) {
            roomInput.value = roomName;
            roomInput.focus();
        }

        /**
         * Confirmer la salle et passer √É¬† l'assistant
         */
        function confirmRoom() {
            const roomName = roomInput.value.trim();
            
            if (!roomName) {
                showRoomError('√¢≈°¬†√Ø¬∏¬è Veuillez entrer un num√É¬©ro de salle');
                return;
            }

            // Valider le format de salle
            if (!isValidRoomFormat(roomName)) {
                showRoomError('√¢≈°¬†√Ø¬∏¬è Format non reconnu. Exemples : A-1750, B-2500, SH-R200');
                return;
            }

            // Extraire les informations de salle
            const roomInfo = parseRoomInfo(roomName);
            
            // Stocker dans le cache persistant
            setRoomCache(roomInfo);
            
            // ===== VERROUILLAGE DE SALLE =====
            // Activer le verrouillage persistant
            try {
                localStorage.setItem('vitrine.room.lock', JSON.stringify({
                    locked: true,
                    name: roomInfo.fullRoom,
                    setAt: new Date().toISOString()
                }));
                console.log('√∞≈∏‚Äù‚Äô [Lock] Salle verrouill√É¬©e:', roomInfo.fullRoom);
                
                // Appliquer l'interface verrouill√É¬©e
                document.documentElement.classList.add('is-room-locked');
            } catch (error) {
                console.warn('√¢≈°¬†√Ø¬∏¬è [Lock] Erreur verrouillage:', error);
            }
            
            // Passer √É¬† l'assistant
            showAssistant();
            
            // ===== CHAT SEA : D√É¬©marrer l'√É¬©coute des demandes de chat =====
            startChatRequestListener();
            
            // ===== STATUS EVENTS : D√É¬©marrer l'√É¬©coute des changements de statut =====
            startStatusEventSource();
        }

        /**
         * Valider le format de salle
         */
        function isValidRoomFormat(roomName) {
            const roomPattern = /^([a-zA-Z]{1,2})-?([a-zA-Z]?\d{3,4})$/i;
            return roomPattern.test(roomName);
        }

        /**
         * Parser les informations de salle
         */
        function parseRoomInfo(roomName) {
            const roomMatch = roomName.match(/^([a-zA-Z]{1,2})-?([a-zA-Z]?\d{3,4})$/i);
            if (roomMatch) {
                const pavilion = roomMatch[1].toUpperCase();
                const roomNumber = roomMatch[2].toUpperCase();
                const fullRoom = `${pavilion}-${roomNumber}`;
                
                return {
                    fullRoom: fullRoom,
                    pavilion: pavilion,
                    roomNumber: roomNumber
                };
            }
            return null;
        }

        /**
         * D√É¬©finir le cache de salle (version de base)
         */
        function setRoomCache(roomInfo) {
            window.roomCache = {
                room: roomInfo.fullRoom,
                pavilion: roomInfo.pavilion,
                roomNumber: roomInfo.roomNumber,
                isSet: true,
                podioInfo: null // Sera enrichi par setRoomCacheWithPodio
            };

            console.log(`√∞≈∏¬è¬¢ [RoomCache] Salle d√É¬©finie : ${roomInfo.fullRoom}, Pavillon : ${roomInfo.pavilion}`);
            
            // √∞≈∏‚Ä†‚Ä¢ Enrichir automatiquement avec infos Podio
            enrichRoomWithPodioInfo(roomInfo.fullRoom);
        }

        /**
         * Enrichir le cache de salle avec les informations Podio
         */
        async function enrichRoomWithPodioInfo(roomName) {
            try {
                console.log(`√∞≈∏¬è¬¢ [PodioEnrich] Enrichissement Podio pour: ${roomName}`);
                
                const podioInfo = await podioRoomCache.getRoomInfo(roomName);
                
                if (podioInfo && window.roomCache && window.roomCache.isSet) {
                    // √∞≈∏‚Ä†‚Ä¢ Enrichir le cache existant
                    window.roomCache.podioInfo = podioInfo;
                    
                    console.log(`√¢≈ì‚Ä¶ [PodioEnrich] Cache enrichi:`, podioInfo);
                    
                    // √∞≈∏≈Ω¬® Mettre √É¬† jour l'affichage
                    updateRoomDisplayWithPodio(roomName, podioInfo);
                } else {
                    console.warn(`√¢≈°¬†√Ø¬∏¬è [PodioEnrich] Pas d'infos Podio pour ${roomName} - affichage normal`);
                }
                
            } catch (error) {
                console.warn(`√¢¬ù≈í [PodioEnrich] Erreur enrichissement pour ${roomName}:`, error.message);
                // Degradation graceful - l'affichage normal continue
            }
        }

        /**
         * Mettre √É¬† jour l'affichage de la salle avec les infos Podio
         */
        function updateRoomDisplayWithPodio(roomName, podioInfo = null) {
            const currentRoomDisplay = document.getElementById('currentRoomDisplay');
            if (!currentRoomDisplay) return;
            
            if (podioInfo) {
                // √∞≈∏‚Ä†‚Ä¢ Affichage enrichi avec infos Podio - COULEURS ADAPTATIVES
                const isDarkMode = document.documentElement.getAttribute('data-theme') === 'dark';
                const textColor = isDarkMode ? 'white' : '#3b82f6';
                const iconColor = isDarkMode ? 'white' : '#3b82f6';
                
                currentRoomDisplay.innerHTML = `
                    <strong style="color: ${textColor}; font-weight: 700;">${roomName}</strong>
                    <small style="display: block; color: ${textColor}; font-size: 0.9rem; margin-top: 0.5rem; line-height: 1.4; font-weight: 600; text-shadow: ${isDarkMode ? '0 2px 4px rgba(0,0,0,0.8)' : 'none'};">
                        √∞≈∏‚Äú¬ç ${podioInfo.pavillon} - ${podioInfo.bassin}<br>
                        √∞≈∏¬è‚Ä∫√Ø¬∏¬è ${podioInfo.type} | <span style="color: ${textColor} !important; font-weight: 800; font-size: 1.1rem; text-shadow: ${isDarkMode ? '0 2px 6px rgba(0,0,0,0.9)' : 'none'};"><i class="fas fa-users" style="color: ${isDarkMode ? 'white' : '#3b82f6'} !important; -webkit-text-fill-color: ${isDarkMode ? 'white' : '#3b82f6'} !important;"></i> <span style="color: ${textColor} !important;">${podioInfo.capacite}</span></span>
                    </small>
                `;
                console.log(`√∞≈∏≈Ω¬® [RoomDisplay] Affichage enrichi pour ${roomName}`);
            } else {
                // √∞≈∏‚Äù‚Äû Affichage normal (fallback)
                currentRoomDisplay.textContent = roomName;
                console.log(`√∞≈∏≈Ω¬® [RoomDisplay] Affichage normal pour ${roomName}`);
            }
        }

        /**
         * Afficher l'assistant avec la salle en cache
         */
        function showAssistant() {
            if (!window.roomCache.isSet) {
                console.error('Tentative d\'affichage assistant sans salle en cache');
                return;
            }

            // Masquer la landing page
            landingPage.style.display = 'none';
            
            // Afficher l'assistant
            assistantPage.style.display = 'block';
            
            // Mettre √É¬† jour les affichages de salle avec infos Podio si disponibles
            updateRoomDisplayWithPodio(window.roomCache.room, window.roomCache.podioInfo);
            
            // Initialiser la connexion au backend
            checkConnection().then(connected => {
                console.log(`√∞≈∏‚Äù‚Äî Connexion backend: ${connected ? 'OK' : '√É‚Ä∞CHEC'}`);
                // √¢≈ì‚Ä¶ NOUVEAU : Mettre √É¬† jour le statut initial
                updateSystemStatus(connected);
            });
            
            // √¢≈ì‚Ä¶ NOUVEAU : V√É¬©rification p√É¬©riodique de la connexion (toutes les 10 secondes)
            setInterval(async () => {
                await checkConnection();
            }, 10000);
            
            // Focus sur l'input principal
            setTimeout(() => {
                // Focus sur la premi√É¬®re palette
                const firstPalette = document.querySelector('.palette');
                if (firstPalette) {
                    firstPalette.focus();
                }
            }, 300);
        }

        /**
         * Changer de salle (retour √É¬† la landing page)
         */
        function changeRoom() {
            // R√É¬©initialiser le cache
            window.roomCache.isSet = false;
            
            // Nettoyer les inputs
            roomInput.value = '';
            
            // √∞≈∏‚Äù‚Äù Fermer l'EventSource de statut
            if (statusEventSource) {
                statusEventSource.close();
                statusEventSource = null;
                console.log('√∞≈∏‚Äù‚Äù [StatusEvents] EventSource de statut ferm√É¬©');
            }
            
            // √∞≈∏‚Äù‚Äù Masquer le message de statut
            hideTicketStatusMessage();
            
            // Retour √É¬† la landing page
            assistantPage.style.display = 'none';
            landingPage.style.display = 'flex';
            
            // Focus sur l'input de salle
            setTimeout(() => {
                roomInput.focus();
            }, 300);
            
            console.log('√∞≈∏¬è¬† Retour √É¬† la landing page (changer de salle)');
        }
        
        /**
         * Gestion du th√É¬®me hybride intelligent
         */
        function toggleTheme() {
            const body = document.body;
            const themeIcon = document.getElementById('themeIcon');
            const themeText = document.getElementById('themeText');
            const headerTitle = document.getElementById('headerTitle');
            
            if (body.getAttribute('data-theme') === 'dark') {
                // Passer au mode clair
                body.removeAttribute('data-theme');
                themeIcon.className = 'fas fa-moon';
                themeText.textContent = 'Mode nuit';
                localStorage.setItem('vitrine-theme', 'light');
                // Mode jour : titre en NOIR
                if (headerTitle) headerTitle.style.color = 'black';
                console.log('√∞≈∏≈í≈æ Mode clair activ√É¬©');
            } else {
                // Passer au mode sombre
                body.setAttribute('data-theme', 'dark');
                themeIcon.className = 'fas fa-sun';
                themeText.textContent = 'Mode jour';
                localStorage.setItem('vitrine-theme', 'dark');
                // Mode nuit : titre reste NOIR (demande utilisateur)
                if (headerTitle) headerTitle.style.color = 'black';
                console.log('√∞≈∏≈í‚Ñ¢ Mode sombre activ√É¬©');
            }
        }
        
        /**
         * Initialisation automatique du th√É¬®me
         */
        function initializeTheme() {
            const savedTheme = localStorage.getItem('vitrine-theme');
            const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            
            // Priorit√É¬© : 1) Sauvegarde utilisateur, 2) Pr√É¬©f√É¬©rence syst√É¬®me, 3) Mode clair par d√É¬©faut
            if (savedTheme === 'dark' || (!savedTheme && prefersDark)) {
                document.body.setAttribute('data-theme', 'dark');
                const themeIcon = document.getElementById('themeIcon');
                const themeText = document.getElementById('themeText');
                if (themeIcon && themeText) {
                    themeIcon.className = 'fas fa-sun';
                    themeText.textContent = 'Mode jour';
                }
                console.log('√∞≈∏≈í‚Ñ¢ Mode sombre initialis√É¬© (pr√É¬©f√É¬©rence syst√É¬®me ou sauvegarde)');
            } else {
                document.body.removeAttribute('data-theme');
                console.log('√∞≈∏≈í≈æ Mode clair initialis√É¬©');
            }
        }
        
        /**
         * √É‚Ä∞couter les changements de pr√É¬©f√É¬©rence syst√É¬®me
         */
        function setupThemeListener() {
            const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
            
            mediaQuery.addEventListener('change', (e) => {
                // Seulement si l'utilisateur n'a pas d√É¬©fini de pr√É¬©f√É¬©rence manuelle
                if (!localStorage.getItem('vitrine-theme')) {
                    if (e.matches) {
                        document.body.setAttribute('data-theme', 'dark');
                        console.log('√∞≈∏≈í‚Ñ¢ Mode sombre activ√É¬© (pr√É¬©f√É¬©rence syst√É¬®me)');
                    } else {
                        document.body.removeAttribute('data-theme');
                        console.log('√∞≈∏≈í≈æ Mode clair activ√É¬© (pr√É¬©f√É¬©rence syst√É¬®me)');
                    }
                }
            });
        }

        /**
         * Afficher une erreur de salle
         */
        function showRoomError(message) {
            // Chercher un message d'erreur existant
            let errorDiv = document.querySelector('.room-error-message');
            
            if (!errorDiv) {
                // Cr√É¬©er le message d'erreur
                errorDiv = document.createElement('div');
                errorDiv.className = 'room-error-message';
                errorDiv.style.cssText = `
                    background: rgba(239, 68, 68, 0.1);
                    border: 1px solid rgba(239, 68, 68, 0.3);
                    color: #ef4444;
                    padding: 0.75rem;
                    border-radius: 8px;
                    margin-top: 1rem;
                    text-align: center;
                    font-weight: 500;
                `;
                
                // Ins√É¬©rer apr√É¬®s le container de saisie
                const container = document.querySelector('.room-input-container');
                container.parentNode.insertBefore(errorDiv, container.nextSibling);
            }
            
            errorDiv.textContent = message;
            
            // Supprimer apr√É¬®s 3 secondes
            setTimeout(() => {
                if (errorDiv && errorDiv.parentNode) {
                    errorDiv.remove();
                }
            }, 3000);
        }

        /**
         * Obtenir la salle courante depuis le cache
         */
        function getCurrentRoom() {
            return window.roomCache.isSet ? window.roomCache.room : null;
        }

        /**
         * V√É¬©rifie si une salle est d√É¬©finie
         */
        function hasRoomSet() {
            return window.roomCache && window.roomCache.isSet;
        }

        /**
         * Met √É¬† jour les suggestions
         */
        function updateSuggestions(suggestions) {
            const suggestionsContainer = document.getElementById('suggestions');
            if (suggestionsContainer && suggestions.length > 0) {
                suggestionsContainer.innerHTML = suggestions.map(suggestion => 
                    `<button class="suggestion-btn" onclick="sendExampleMessage('${suggestion}')">${suggestion}</button>`
                ).join('');
            }
        }

        /**
         * Met √É¬† jour le bouton d'envoi
         */
        function updateSendButton(loading) {
            const sendBtn = document.getElementById('sendBtn');
            if (!sendBtn) return;
            
            if (loading) {
                sendBtn.disabled = true;
                sendBtn.innerHTML = '√¢¬è¬≥ Traitement...';
            } else if (!isConnected) {
                sendBtn.disabled = true;
                sendBtn.innerHTML = '√¢≈°¬†√Ø¬∏¬è Syst√É¬®me non pr√É¬™t';
            } else {
                sendBtn.disabled = false;
                sendBtn.innerHTML = '√∞≈∏‚Äú¬§ Signaler';
            }
        }

        // √¢≈ì‚Ä¶ NOUVEAU : Fonction pour d√É¬©tecter les salles mentionn√É¬©es dans les messages
        function detectRoomInMessage(message) {
            // Pattern pour d√É¬©tecter les salles (ex: A-1750, B-2500, J-2430)
            const roomPattern = /\b([a-zA-Z]{1,2})-?([a-zA-Z]?\d{3,4})\b/gi;
            const matches = message.match(roomPattern);
            
            if (matches) {
                // Normaliser le format (ex: a-1750 -> A-1750)
                return matches.map(match => {
                    const normalized = match.replace(/[-\s]/g, '');
                    const roomMatch = normalized.match(/^([a-zA-Z]{1,2})([a-zA-Z]?\d{3,4})$/i);
                    if (roomMatch) {
                        return `${roomMatch[1].toUpperCase()}-${roomMatch[2].toUpperCase()}`;
                    }
                    return match.toUpperCase();
                });
            }
            return null;
        }

        // √¢≈ì‚Ä¶ NOUVEAU : Fonction pour v√É¬©rifier si un ticket existe d√É¬©j√É¬†
        function hasExistingTicket(room = null) {
            const targetRoom = room || getCurrentRoom();
            return sessionTickets.some(ticket => ticket.room === targetRoom);
        }
        
        // √¢≈ì‚Ä¶ NOUVEAU : Fonction pour ajouter un ticket √É¬† la session
        function addTicketToSession(ticketData) {
            const ticket = {
                number: ticketData.ticket_number || ticketData.id,
                room: ticketData.room,
                timestamp: new Date().toISOString(),
                title: ticketData.title || 'Ticket SEA',
                status: 'created'
            };
            
            sessionTickets.push(ticket);
            console.log(`√∞≈∏≈Ω¬´ [Session] Ticket ajout√É¬©:`, ticket);
            return ticket;
        }
        
        // √¢≈ì‚Ä¶ NOUVEAU : Fonction pour obtenir le dernier ticket de la session
        function getLastSessionTicket(room = null) {
            const targetRoom = room || getCurrentRoom();
            const roomTickets = sessionTickets.filter(ticket => ticket.room === targetRoom);
            return roomTickets.length > 0 ? roomTickets[roomTickets.length - 1] : null;
        }

        // ===== FONCTIONS PRINCIPALES R√É‚Ä∞ELLES =====

        function clearInput() {
            problemInput.value = '';
            
            // √¢≈ì‚Ä¶ NOUVEAU: Afficher √É¬† nouveau les palettes de probl√É¬®mes
            const problemPalettes = document.getElementById('problemPalettes');
            if (problemPalettes) {
                problemPalettes.style.display = 'block';
            }
            
            // √¢≈ì‚Ä¶ NOUVEAU : Supprimer TOUS les messages et interfaces pr√É¬©c√É¬©dents
            const assistantResponse = document.getElementById('assistantResponse');
            if (assistantResponse) {
                assistantResponse.remove();
            }
            
            const autoResult = document.querySelector('.auto-result');
            if (autoResult) {
                autoResult.remove();
            }
            
            const escalationInterface = document.getElementById('escalation-interface');
            if (escalationInterface) {
                escalationInterface.remove();
            }
            
            const resultMessage = document.querySelector('.result-message');
            if (resultMessage) {
                resultMessage.remove();
            }
            
            const simBanner = document.querySelector('.sim-banner');
            if (simBanner) {
                simBanner.remove();
            }
            
            // √¢≈ì‚Ä¶ NOUVEAU : Vider les suggestions
            const suggestions = document.getElementById('suggestions');
            if (suggestions) {
                suggestions.innerHTML = '';
            }
            
            // Supprimer tous les r√É¬©sultats d'actions automatiques
            const autoResults = document.querySelectorAll('.auto-result');
            autoResults.forEach(result => result.remove());
            
            // Supprimer toutes les interfaces d'escalade
            const escalationInterfaces = document.querySelectorAll('.escalation-interface');
            escalationInterfaces.forEach(interface => interface.remove());
        }

        /**
         * V√É¬©rifie la connexion au backend
         */
        async function checkConnection() {
            try {
                // √¢≈ì‚Ä¶ BACKEND UNIQUE - PAS BESOIN DE MODIFICATION
                const apiUrl = await ensureBackendConnection();
                const response = await fetch(`${apiUrl}/api/health`);
                const wasConnected = isConnected;
                isConnected = response.ok;
                
                // √¢≈ì‚Ä¶ NOUVEAU : Mettre √É¬† jour le statut si changement
                if (wasConnected !== isConnected) {
                    updateSystemStatus(isConnected);
                }
                
                return isConnected;
            } catch (error) {
                console.error('Erreur de connexion:', error);
                const wasConnected = isConnected;
                isConnected = false;
                
                // √¢≈ì‚Ä¶ NOUVEAU : Mettre √É¬† jour le statut en cas d'erreur
                if (wasConnected !== isConnected) {
                    updateSystemStatus(isConnected);
                }
                
                return false;
            }
        }

        /**
         * √¢≈ì‚Ä¶ NOUVEAU : Met √É¬† jour l'indicateur de statut syst√É¬®me
         */
        function updateSystemStatus(connected) {
            const statusIndicator = document.querySelector('.status-indicator span');
            const statusDot = document.querySelector('.status-dot');
            
            if (statusIndicator && statusDot) {
                if (connected) {
                    statusIndicator.textContent = 'Syst√É¬®me op√É¬©rationnel';
                    statusDot.classList.remove('offline');
                    console.log('√¢≈ì‚Ä¶ [SystemStatus] Syst√É¬®me op√É¬©rationnel');
                } else {
                    statusIndicator.textContent = 'Syst√É¬®me hors ligne';
                    statusDot.classList.add('offline');
                    console.log('√¢¬ù≈í [SystemStatus] Syst√É¬®me hors ligne');
                }
            }
            
            // Mettre √É¬† jour l'√É¬©tat du bouton d'envoi
            updateSendButton(false);
        }

        /**
         * Envoie un message d'exemple (comme dans l'original)
         */
        function sendExampleMessage(message) {
            // G√É¬©rer les suggestions sp√É¬©ciales
            if (message === 'Nouveau probl√É¬®me AV' || message === 'Nouveau probl√É¬®me') {
                clearInput();
                problemInput.focus();
                return;
            }
            
            if (message === 'Autre probl√É¬®me audio') {
                clearInput();
                addMessage('system', '√∞≈∏‚Äù≈† D√É¬©crivez votre probl√É¬®me audio :', {
                    suggestions: ['Pas de son', 'Microphone en sourdine', 'Bruit parasite', 'Volume trop bas']
                });
                problemInput.focus();
                return;
            }
            
            if (message === 'Autre probl√É¬®me vid√É¬©o') {
                clearInput();
                addMessage('system', '√∞≈∏‚Äú¬Ω√Ø¬∏¬è D√É¬©crivez votre probl√É¬®me vid√É¬©o :', {
                    suggestions: ['√É‚Ä∞cran noir', 'Pas d\'image', 'Qualit√É¬© d√É¬©grad√É¬©e', 'Projecteur ne s\'allume pas']
                });
                problemInput.focus();
                return;
            }
            
            if (message === 'Vider la barre') {
                clearInput();
                problemInput.focus();
                return;
            }
            
            if (message === 'Autre salle') {
                clearInput();
                problemInput.focus();
                addMessage('system', '√∞≈∏‚Äú¬ç <strong>Nom de la salle ?</strong>', {
                    suggestions: ['A-1750', 'B-2500', 'C-3000', 'D-4000', 'SH-R200', 'DS-4000']
                });
                return;
            }
            
            if (message === 'Copier num√É¬©ro ticket') {
                // Chercher le dernier num√É¬©ro de ticket dans les messages
                const messages = document.querySelectorAll('.message.system');
                for (let i = messages.length - 1; i >= 0; i--) {
                    const messageContent = messages[i].textContent;
                    const ticketMatch = messageContent.match(/Num√É¬©ro\s*:\s*([A-Z0-9-]+)/);
                    if (ticketMatch) {
                        const ticketNumber = ticketMatch[1];
                        navigator.clipboard.writeText(ticketNumber).then(() => {
                            addMessage('system', `√∞≈∏‚Äú‚Äπ Num√É¬©ro de ticket <strong>${ticketNumber}</strong> copi√É¬© dans le presse-papier.`, {
                                suggestions: ['Nouveau probl√É¬®me', 'Merci']
                            });
                        }).catch(() => {
                            addMessage('system', `√∞≈∏‚Äú‚Äπ Num√É¬©ro de ticket: <strong>${ticketNumber}</strong> (copie manuelle n√É¬©cessaire)`, {
                                suggestions: ['Nouveau probl√É¬®me', 'Merci']
                            });
                        });
                        return;
                    }
                }
                addMessage('system', '√¢¬ù≈í Aucun num√É¬©ro de ticket trouv√É¬© √É¬† copier.', {
                    suggestions: ['Nouveau probl√É¬®me']
                });
                return;
            }
            
            if (message === 'Merci pour l\'information') {
                addMessage('system', '√∞≈∏‚Äò¬ç N\'h√É¬©sitez pas √É¬† revenir pour tout probl√É¬®me audiovisuel !', {
                    suggestions: ['Probl√É¬®me projecteur', 'Probl√É¬®me audio', 'Probl√É¬®me r√É¬©seau']
                });
                return;
            }
            
            // Pour les probl√É¬®mes r√É¬©seau, afficher la banni√É¬®re Services Informatiques
            if (message === 'Probl√É¬®me de r√É¬©seau') {
                handleNetworkProblem(message);
                return;
            }
            
            // Pour les autres probl√É¬®mes (syst√É¬®me qui ne r√É¬©pond plus), afficher banni√É¬®re SIM
            if (message === 'Syst√É¬®me qui ne r√É¬©pond plus') {
                handleNonAudiovisualProblem(message);
                return;
            }
            
            // Pour les probl√É¬®mes audio/vid√É¬©o, envoyer au backend
            if (isConnected) {
                // √¢≈ì‚Ä¶ NOUVEAU: D√É¬©marrer timer d'escalade pour les clics palette
                const currentRoom = getCurrentRoom();
                let problemType = null;
                
                if (message === 'Probl√É¬®me Vid√É¬©o' || message.toLowerCase().includes('vid√É¬©o') || message.toLowerCase().includes('projecteur')) {
                    problemType = 'video';
                    // √¢≈ì‚Ä¶ CORRECTION BACKEND : Message simple comme la r√É¬©f√É¬©rence qui fonctionne
                    if (message === 'Probl√É¬®me Vid√É¬©o') {
                        message = '√É‚Ä∞cran noir projecteur';
                    }
                } else if (message === 'Probl√É¬®me Audio' || message.toLowerCase().includes('audio') || message.toLowerCase().includes('son')) {
                    problemType = 'audio';
                }
                
                if (problemType && !escalationTimeoutId) {
                    console.log(`√¢¬è¬∞ [EscalationTimeout] D√É¬©marrage timer palette pour probl√É¬®me ${problemType}`);
                    startEscalationTimeout(problemType, currentRoom);
                }
                
                problemInput.value = message;
                sendProblemReport();
            } else {
                addMessage('system', '√¢≈°¬†√Ø¬∏¬è Syst√É¬®me en cours d\'initialisation. Veuillez patienter.', {
                    suggestions: ['Patienter', 'Recharger la page']
                });
            }
        }

        // ===== FONCTIONS D'ANALYSE DE MESSAGE =====



        // Fonction principale pour envoyer le probl√É¬®me au backend
        async function sendProblemReport() {
            const message = problemInput.value.trim();
            
            if (!message) {
                addMessage('system', '√¢¬ù≈í Veuillez d√É¬©crire votre probl√É¬®me.', {
                    suggestions: ['Probl√É¬®me projecteur', 'Probl√É¬®me audio', 'Probl√É¬®me r√É¬©seau']
                });
                return;
            }
            
            if (!isConnected) {
                addMessage('system', '√¢≈°¬†√Ø¬∏¬è Syst√É¬®me en cours d\'initialisation. Veuillez patienter ou recharger la page.', {
                    suggestions: ['Patienter', 'Recharger la page']
                });
                return;
            }

            // √¢≈ì‚Ä¶ NOUVEAU : Afficher l'overlay de chargement diagnostic
            showDiagnosticLoading();
            
            // √¢≈ì‚Ä¶ NOUVEAU: D√É¬©marrer le timer d'escalade pour √É¬©viter les blocages
            const currentRoom = getCurrentRoom();
            
            // Identifier le type de probl√É¬®me pour le timer
            let problemType = null;
            if (message.toLowerCase().includes('vid√É¬©o') || message.toLowerCase().includes('projecteur') || message.toLowerCase().includes('√É¬©cran')) {
                problemType = 'video';
            } else if (message.toLowerCase().includes('audio') || message.toLowerCase().includes('son') || message.toLowerCase().includes('micro')) {
                problemType = 'audio';
            }
            
            // D√É¬©marrer le timer d'escalade si c'est un probl√É¬®me AV (√É¬©viter les doublons)
            if (problemType && !escalationTimeoutId) {
                console.log(`√¢¬è¬∞ [EscalationTimeout] D√É¬©marrage timer d'escalade pour probl√É¬®me ${problemType}`);
                startEscalationTimeout(problemType, currentRoom);
            }
            
            // √¢≈ì‚Ä¶ NOUVELLE VALIDATION : V√É¬©rifier la coh√É¬©rence de salle
            const detectedRooms = detectRoomInMessage(message);
            
            if (detectedRooms && detectedRooms.length > 0) {
                // V√É¬©rifier si une salle diff√É¬©rente est mentionn√É¬©e
                const mentionedRoom = detectedRooms[0]; // Premi√É¬®re salle d√É¬©tect√É¬©e
                
                if (mentionedRoom !== currentRoom) {
                    addMessage('system', `√¢≈°¬†√Ø¬∏¬è <strong>Attention :</strong> Vous √É¬™tes pr√É¬©sentement dans la salle <strong>${currentRoom}</strong>.<br><br>Je suis votre assistant uniquement pour cette salle. Si vous avez un probl√É¬®me dans une autre salle, veuillez vous y rendre et utiliser l'assistant local.`, {
                        suggestions: ['Continuer avec ' + currentRoom, 'Changer de salle', 'Nouveau probl√É¬®me']
                    });
                    return;
                }
            }
            
            // √¢≈ì‚Ä¶ NOUVELLE VALIDATION : V√É¬©rifier les tickets existants
            if (hasExistingTicket(currentRoom)) {
                const lastTicket = getLastSessionTicket(currentRoom);
                showExistingTicketBanner(lastTicket);
                return;
            }
            
            // √¢≈ì‚Ä¶ NOUVELLE STRAT√É‚Ä∞GIE : Analyser le type de probl√É¬®me avec salle toujours connue
            const messageAnalysis = analyzeMessageType(message);
            console.log(`√∞≈∏‚Äù¬ç [MessageAnalysis] Salle: ${getCurrentRoom()}, Type: ${messageAnalysis.type}, Cat√É¬©gorie: ${messageAnalysis.category}`);
            
            // Variable pour stocker le r√É¬©sultat d'analyse d'√É¬©quipement
            let analysisResult = null;
            
            // Traiter selon le type de probl√É¬®me
            switch (messageAnalysis.type) {
                case 4: // Hors scope
                    handleOutOfScopeMessage(message);
                    return;
                
                case 3: // Non-audiovisuel  
                    handleNonAudiovisualProblem(message);
                    return;
                
                case 2: // AV externe - Redirection directe vers SEA avec salle
                    handleExternalAVProblemWithRoom(message);
                    return;
                
                case 1: // AV syst√É¬®me - Analyse am√É¬©lior√É¬©e avec √É¬©quipements de la salle
                    console.log(`√∞≈∏≈Ω¬Ø [SystemAV] Analyse syst√É¬®me pour salle ${getCurrentRoom()}: "${message}"`);
                    
                    // √¢≈ì‚Ä¶ NOUVEAU : Mettre √É¬† jour le texte de chargement
                    updateDiagnosticLoadingText('Analyse des √É¬©quipements...', 'Identification des dispositifs audiovisuels');
                    
                    // Nouvelle logique : Analyser les √É¬©quipements avant de continuer
                    analysisResult = await analyzeRoomEquipmentForProblem(message);
                    if (analysisResult.shouldEscalate) {
                        return; // L'escalade a √É¬©t√É¬© g√É¬©r√É¬©e dans la fonction (message utilisateur d√É¬©j√É¬† ajout√É¬©)
                    }
                    
                    // Continuer avec l'analyse syst√É¬®me si pas d'escalade
                    break;
                
                default:
                    // Par d√É¬©faut, traiter comme type 4 (hors scope)
                    handleOutOfScopeMessage(message);
                    return;
            }
            
            // D√É¬©sactiver le bouton pendant le traitement
            updateSendButton(true);
            
            // √¢≈ì‚Ä¶ NOUVEAU : Ne pas afficher le message utilisateur pour les actions automatiques
            const isAutoActionMessage = message.toLowerCase().includes('pas de son') || 
                                       message.toLowerCase().includes('micro') ||
                                       message.toLowerCase().includes('son') ||
                                       message.toLowerCase().includes('audio') ||
                                       message.toLowerCase().includes('sourdine');
            
            // √¢≈ì‚Ä¶ CORRECTION : Ajouter le message utilisateur seulement si pas d'analyse d'√É¬©quipement ET pas d'action automatique
            if (!(analysisResult && analysisResult.userMessageAdded) && !isAutoActionMessage) {
                addMessage('user', message, {});
            }
            
            // √¢≈ì‚Ä¶ CORRECTION UI : Vider l'input seulement apr√É¬®s succ√É¬®s, pas imm√É¬©diatement
            // problemInput.value = '';  // D√É¬©plac√É¬© plus tard
            
            try {
                // √¢≈ì‚Ä¶ NOUVELLE STRAT√É‚Ä∞GIE : Envoyer au backend avec salle toujours incluse
                const currentRoom = getCurrentRoom();
                const fullMessage = `${message} (Salle: ${currentRoom})`;
                
                // √¢≈ì‚Ä¶ NOUVEAU : Mettre √É¬† jour le texte de chargement
                updateDiagnosticLoadingText('Analyse intelligente...', 'Recherche de solutions automatiques');
                
                // √∞≈∏‚Äù¬ç DEBUG : Afficher le message exact envoy√É¬© au backend
                console.log(`√∞≈∏≈Ω¬Ø [DEBUG] Message envoy√É¬© au RAG backend: "${fullMessage}"`);
                
                // √¢≈ì‚Ä¶ S'assurer d'utiliser le bon backend
                await ensureBackendConnection();
                
                const response = await fetch(`${currentAPI}/api/copilot/vitrine`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: fullMessage,
                        context: {
                            session_id: `vitrine_${Date.now()}`,
                            user_id: 'vitrine_user',
                            source: 'vitrine',
                            timestamp: new Date().toISOString(),
                            room_info: {
                                room: window.roomCache.room,
                                pavilion: window.roomCache.pavilion,
                                room_number: window.roomCache.roomNumber
                            }
                        }
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`Erreur serveur (${response.status})`);
                }
                
                const data = await response.json();
                
                if (data.status === 'success') {
                    // Traiter la r√É¬©ponse du Copilot
                    console.log(`√∞≈∏‚Äú¬• [Backend] R√É¬©ponse re√É¬ßue:`, data);
                    processResponse(data);
                    
                    // √¢≈ì‚Ä¶ CORRECTION UI : Vider l'input seulement apr√É¬®s succ√É¬®s
                    problemInput.value = '';
                } else {
                    throw new Error(data.message || 'Erreur lors du traitement');
                }
                
            } catch (error) {
                console.error('Erreur lors de l\'envoi:', error);
                
                // CORRECTION : Ne pas afficher d'erreur bloquante, continuer avec l'analyse
                console.log(`√∞≈∏‚Äù¬ß [ErrorHandling] Erreur API √¢‚Ä†‚Äô Continuer avec l'analyse locale`);
                
                // Cr√É¬©er un contexte RAG local pour continuer le processus
                latestRAGContext = {
                    intent: 'technical_issue',
                    confidence: 0.8,
                    room: getCurrentRoom(),
                    problems: [{
                        room: getCurrentRoom(),
                        device: null,
                        severity: 'medium',
                        reason: 'Probl√É¬®me signal√É¬© n√É¬©cessitant intervention'
                    }],
                    solutions: [],
                    escalation_needed: true,
                    escalation_reason: "Probl√É¬®me technique signal√É¬© - intervention recommand√É¬©e."
                };
                
                // Afficher un message informatif et proposer l'escalade
                addMessage('system', `√∞≈∏‚Äù¬ß Analyse termin√É¬©e pour la salle ${getCurrentRoom()}. Une intervention technique est recommand√É¬©e.`, {
                    suggestions: ['Cr√É¬©er un ticket SEA', 'Appeler SEA au 6135', 'Nouveau probl√É¬®me']
                });
                
                // √¢≈ì‚Ä¶ NOUVEAU : Masquer le sablier uniquement quand on affiche des suggestions (pas de banni√É¬®re)
                hideDiagnosticLoading();
                
            } finally {
                // R√É¬©activer le bouton
                updateSendButton(false);
                
                // CORRECTION : Ne pas faire de retour automatique pour √É¬©viter les interruptions
                // L'utilisateur doit choisir explicitement de cr√É¬©er un ticket
                
                // √¢≈ì‚Ä¶ NOUVEAU : Le sablier reste affich√É¬© jusqu'√É¬† ce qu'une banni√É¬®re sp√É¬©cifique le remplace
                // Plus de masquage syst√É¬©matique ici - seules les banni√É¬®res masquent le sablier
            }
        }

        // ===== FONCTIONS DE DIAGNOSTIC R√É‚Ä∞EL =====

        /**
         * V√É¬©rifie si un message concerne un probl√É¬®me audio
         */
        function isAudioProblem(message) {
            const audioKeywords = ['audio', 'son', 'microphone', 'micro', 'haut-parleur', 'haut parleur', 'volume', 'mute', 'sourdine', 'bruit', '√É¬©cho'];
            return audioKeywords.some(keyword => message.includes(keyword));
        }

        /**
         * V√É¬©rifie si un message concerne un probl√É¬®me vid√É¬©o
         */
        function isVideoProblem(message) {
            const videoKeywords = ['vid√É¬©o', 'projecteur', '√É¬©cran', 'image', 'affichage', 'proj', 'hdmi', 'vga', 'connecteur'];
            return videoKeywords.some(keyword => message.includes(keyword));
        }

        /**
         * √¢≈ì‚Ä¶ FONCTION UNIVERSELLE : D√É¬©tecte le type d'√É¬©quipement disponible dans une salle
         */
        function analyzeRoomEquipmentTypes(devices) {
            if (!devices || !Array.isArray(devices)) {
                return { hasAudio: false, hasVideo: false, summary: 'Aucun √É¬©quipement d√É¬©tect√É¬©' };
            }

            // √¢≈ì‚Ä¶ CORRECTION: D√É¬©tection √É¬©quipements AUDIO (TCC2, Sennheiser, microphones)
            const audioDevices = devices.filter(device => 
                (device.type && (device.type.toLowerCase().includes('audio') || device.type.toLowerCase().includes('microphone'))) ||
                (device.model_name && (device.model_name.toLowerCase().includes('sennheiser') || device.model_name.toLowerCase().includes('tcc2'))) ||
                (device.name && device.name.toLowerCase().includes('tcc2')) ||
                (device.family_name && device.family_name.toLowerCase().includes('sennheiser'))
            );

            // √¢≈ì‚Ä¶ CORRECTION: D√É¬©tection √É¬©quipements VID√É‚Ä∞O (Projecteurs, √É¬©crans, affichages)
            const videoDevices = devices.filter(device => 
                (device.type && device.type.toLowerCase().includes('projector')) ||
                (device.model_name && device.model_name.toLowerCase().includes('projector')) ||
                (device.name && device.name.toLowerCase().includes('proj')) ||
                (device.family_name && device.family_name.toLowerCase().includes('projecteur')) ||
                (device.family_name && device.family_name.toLowerCase().includes('projecteurs'))
            );

            const result = {
                hasAudio: audioDevices.length > 0,
                hasVideo: videoDevices.length > 0,
                audioCount: audioDevices.length,
                videoCount: videoDevices.length,
                summary: `Audio: ${audioDevices.length}, Vid√É¬©o: ${videoDevices.length}`
            };

            console.log(`√∞≈∏‚Äù¬ç [EquipmentTypes] Analyse salle: ${result.summary}`);
            return result;
        }

        /**
         * √¢≈ì‚Ä¶ R√ÉÀÜGLE UNIVERSELLE : Applique la logique d'escalation sym√É¬©trique
         */
        function shouldEscalateBasedOnEquipment(problemType, equipmentTypes, currentRoom) {
            // R√ÉÀÜGLE 1: Probl√É¬®me AUDIO + Aucun √É¬©quipement AUDIO √¢‚Ä†‚Äô Escalade
            if (problemType === 'audio' && !equipmentTypes.hasAudio) {
                console.log(`√∞≈∏‚Äù≈† [UniversalRule] Salle ${currentRoom}: Probl√É¬®me AUDIO d√É¬©tect√É¬© mais aucun √É¬©quipement audio √¢‚Ä†‚Äô ESCALADE DIRECTE`);
                return {
                    shouldEscalate: true,
                    reason: `Aucun √É¬©quipement audio trouv√É¬© dans la salle ${currentRoom}`,
                    intent: 'audio_problem'
                };
            }

            // R√ÉÀÜGLE 2: Probl√É¬®me VID√É‚Ä∞O + Aucun √É¬©quipement VID√É‚Ä∞O √¢‚Ä†‚Äô Escalade  
            if (problemType === 'video' && !equipmentTypes.hasVideo) {
                console.log(`√∞≈∏‚Äú¬Ω√Ø¬∏¬è [UniversalRule] Salle ${currentRoom}: Probl√É¬®me VID√É‚Ä∞O d√É¬©tect√É¬© mais aucun √É¬©quipement vid√É¬©o √¢‚Ä†‚Äô ESCALADE DIRECTE`);
                return {
                    shouldEscalate: true,
                    reason: `Aucun √É¬©quipement vid√É¬©o trouv√É¬© dans la salle ${currentRoom}`,
                    intent: 'video_problem'
                };
            }

            // R√ÉÀÜGLE 3: √É‚Ä∞quipement du bon type disponible √¢‚Ä†‚Äô Continuer analyse
            console.log(`√¢≈ì‚Ä¶ [UniversalRule] Salle ${currentRoom}: √É‚Ä∞quipement ${problemType} disponible √¢‚Ä†‚Äô Continuer avec diagnostic automatique`);
            return {
                shouldEscalate: false,
                reason: `√É‚Ä∞quipement ${problemType} disponible pour diagnostic automatique`,
                intent: `${problemType}_problem`
            };
        }

        /**
         * R√É¬©cup√É¬®re les √É¬©quipements disponibles dans une salle
         */
        async function fetchRoomEquipment(room) {
            try {
                console.log(`√∞≈∏‚Äú‚Äπ [FetchRoomEquipment] R√É¬©cup√É¬©ration √É¬©quipements pour salle ${room}`);
                
                // √¢≈ì‚Ä¶ STRAT√É‚Ä∞GIE HYBRIDE: V√É¬©rifier d'abord si on a des infos de cache (Podio ou NeonDB)
                const roomInfo = await podioRoomCache.getRoomInfo(room);
                
                if (roomInfo && roomInfo.source === 'neondb' && roomInfo.devices) {
                    // Salle trouv√É¬©e via NeonDB avec √É¬©quipements
                    console.log(`√∞≈∏‚Äú‚Äπ [FetchRoomEquipment] √¢≈ì‚Ä¶ Utilisation √É¬©quipements NeonDB pour ${room} (${roomInfo.devices.length})`);
                    
                    const adaptedDevices = roomInfo.devices.map(device => ({
                        id: device.id,
                        device_name: device.name,
                        name: device.name,
                        host: device.host,
                        protocol: device.protocol,
                        device_model_name: device.model_name,
                        device_family_name: device.family_name,
                        family_type: device.family_type,
                        room_name: room
                    }));
                    
                    return {
                        devices: adaptedDevices,
                        total: adaptedDevices.length,
                        noAccess: false,
                        source: 'neondb'
                    };
                }
                
                // √¢≈ì‚Ä¶ PODIO ou pas d'info cach√É¬©e: Essayer l'API √É¬©quipements traditionnelle
                console.log(`√∞≈∏‚Äú‚Äπ [FetchRoomEquipment] Tentative API √É¬©quipements traditionnelle pour ${room}`);
                
                // Essayer d'abord la route /api/devices/public
                let response = await fetch(`${API_BASE_URL}/api/devices/public`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                // Si 404, essayer la route /api/devices
                if (response.status === 404) {
                    console.log(`√∞≈∏‚Äú‚Äπ [FetchRoomEquipment] Route /api/devices/public non trouv√É¬©e, essai avec /api/devices`);
                    response = await fetch(`${API_BASE_URL}/api/devices`, {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' }
                    });
                }
                
                if (!response.ok) {
                    // Permissions ou erreurs √¢‚Ä†‚Äô Essayer fallback NeonDB direct si pas d√É¬©j√É¬† fait
                    if (!roomInfo || roomInfo.source !== 'neondb') {
                        console.log(`√∞≈∏‚Äú‚Äπ [FetchRoomEquipment] √É‚Ä∞chec API traditionnelle √¢‚Ä†‚Äô Tentative NeonDB directe`);
                        return await fetchRoomEquipmentFromNeonDB(room);
                    }
                    
                    console.log(`√∞≈∏‚Äú‚Äπ [FetchRoomEquipment] √É‚Ä∞chec complet pour ${room}`);
                    return { devices: [], total: 0, noAccess: true };
                }
                
                const allDevices = await response.json();
                if (!Array.isArray(allDevices)) {
                    console.warn('√∞≈∏‚Äú‚Äπ [FetchRoomEquipment] R√É¬©ponse API inattendue:', allDevices);
                    return { devices: [], total: 0, noAccess: true };
                }
                
                // Filtrer les √É¬©quipements de la salle sp√É¬©cifique
                const roomDevices = allDevices.filter(device => 
                    device.room_name && device.room_name.toLowerCase() === room.toLowerCase()
                );
                
                console.log(`√∞≈∏‚Äú‚Äπ [FetchRoomEquipment] Salle ${room}: ${roomDevices.length} √É¬©quipement(s) trouv√É¬©(s) via API traditionnelle`);
                
                return {
                    devices: roomDevices,
                    total: roomDevices.length,
                    noAccess: false,
                    source: 'traditional'
                };
                
            } catch (error) {
                console.error('√∞≈∏‚Äú‚Äπ [FetchRoomEquipment] Erreur:', error);
                // Fallback final vers NeonDB
                return await fetchRoomEquipmentFromNeonDB(room);
            }
        }

        /**
         * √¢≈ì‚Ä¶ NOUVEAU: Fonction d√É¬©di√É¬©e pour r√É¬©cup√É¬©rer √É¬©quipements depuis NeonDB directement
         */
        async function fetchRoomEquipmentFromNeonDB(room) {
            try {
                console.log(`√∞≈∏‚Äú‚Äπ [FetchRoomEquipmentFromNeonDB] R√É¬©cup√É¬©ration directe NeonDB pour ${room}`);
                
                const response = await fetch(`${currentAPI}/api/room/equipment?room=${encodeURIComponent(room)}`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                if (!response.ok) {
                    console.log(`√∞≈∏‚Äú‚Äπ [FetchRoomEquipmentFromNeonDB] Erreur HTTP ${response.status}`);
                    
                    // √¢≈ì‚Ä¶ CONTOURNEMENT : √É‚Ä∞quipements en dur pour J-2430 si API √É¬©choue
                    if (room === 'J-2430') {
                        console.log(`√∞≈∏‚Äù¬ß [FallbackJ2430] Utilisation √É¬©quipements en dur pour J-2430`);
                        return {
                            devices: [
                                {
                                    id: 31,
                                    name: "PROJ-J-2430",
                                    device_name: "PROJ-J-2430", 
                                    address: "132.208.119.121",
                                    port: 4352,
                                    technology: "PJLINK",
                                    status: "unknown",
                                    room_name: "J-2430",
                                    device_family_name: "Projecteur",
                                    device_model_name: "Generic Projecteur"
                                },
                                {
                                    id: 32,
                                    name: "DSF-J-2430-A",
                                    device_name: "DSF-J-2430-A",
                                    address: "dsf-j-2430-a.ddns.uqam.ca", 
                                    port: 443,
                                    technology: "MERSIVE",
                                    status: "unknown",
                                    room_name: "J-2430", 
                                    device_family_name: "Mersive",
                                    device_model_name: "Solstice Pod"
                                }
                            ],
                            total: 2,
                            room: "J-2430",
                            status: "hardcoded_fallback"
                        };
                    }
                    
                    return { devices: [], total: 0, noAccess: true };
                }
                
                const data = await response.json();
                if ((data.status !== 'success' && !data.success) || !Array.isArray(data.devices)) {
                    console.warn('√∞≈∏‚Äú‚Äπ [FetchRoomEquipmentFromNeonDB] R√É¬©ponse invalide:', data);
                    return { devices: [], total: 0, noAccess: true };
                }
                
                const adaptedDevices = data.devices.map(device => ({
                    id: device.id,
                    device_name: device.device_name || device.name,
                    name: device.name,
                    host: device.address, // √¢≈ì‚Ä¶ Adapter address √¢‚Ä†‚Äô host
                    protocol: device.technology, // √¢≈ì‚Ä¶ Adapter technology √¢‚Ä†‚Äô protocol  
                    device_model_name: device.device_model_name,
                    device_family_name: device.device_family_name,
                    family_type: device.technology, // √¢≈ì‚Ä¶ Utiliser technology comme family_type
                    room_name: device.room_name || room,
                    address: device.address, // √¢≈ì‚Ä¶ Garder address aussi
                    technology: device.technology, // √¢≈ì‚Ä¶ Garder technology aussi
                    status: device.status, // √¢≈ì‚Ä¶ Ajouter status
                    port: device.port // √¢≈ì‚Ä¶ Ajouter port
                }));
                
                console.log(`√∞≈∏‚Äú‚Äπ [FetchRoomEquipmentFromNeonDB] Salle ${room}: ${adaptedDevices.length} √É¬©quipement(s) trouv√É¬©(s)`);
                
                return {
                    devices: adaptedDevices,
                    total: adaptedDevices.length,
                    noAccess: false,
                    source: 'neondb'
                };
                
            } catch (error) {
                console.error('√∞≈∏‚Äú‚Äπ [FetchRoomEquipmentFromNeonDB] Erreur:', error);
                return { devices: [], total: 0, noAccess: true };
            }
        }

        /**
         * Analyse les √É¬©quipements disponibles dans la salle pour d√É¬©terminer si une escalade imm√É¬©diate est n√É¬©cessaire
         */
        async function analyzeRoomEquipmentForProblem(message) {
            const currentRoom = getCurrentRoom();
            const lowerMessage = message.toLowerCase();
            
            try {
                // R√É¬©cup√É¬©rer les √É¬©quipements de la salle
                const roomEquipment = await fetchRoomEquipment(currentRoom);
                
                // Si pas d'acc√É¬®s direct aux √É¬©quipements, escalader pour les probl√É¬®mes vid√É¬©o/audio
                if (!roomEquipment || roomEquipment.noAccess) {
                    console.log(`√∞≈∏¬è¬¢ [RoomAnalysis] Pas d'acc√É¬®s direct aux √É¬©quipements √¢‚Ä†‚Äô V√É¬©rifier si escalade n√É¬©cessaire`);
                    
                    // √¢≈ì‚Ä¶ CORRECTION CRITIQUE : PERMETTRE AU BACKEND D'ANALYSER LES PROBL√ÉÀÜMES VID√É‚Ä∞O AVANT ESCALADE
                    if (isVideoProblem(lowerMessage)) {
                        console.log(`√∞≈∏‚Äú¬Ω√Ø¬∏¬è [VideoAnalysis] Probl√É¬®me vid√É¬©o d√É¬©tect√É¬© √¢‚Ä†‚Äô TENTER DIAGNOSTIC AUTOMATIQUE BACKEND AVANT ESCALADE`);
                        // √¢≈ì‚Ä¶ CORRECTION CRITIQUE : PERMETTRE AU BACKEND D'ANALYSER AVANT D'ESCALADER
                        // Le backend peut d√É¬©tecter et corriger automatiquement des probl√É¬®mes comme projecteur √É¬©teint + AV mute
                        console.log(`√∞≈∏≈Ω¬Ø [VideoAnalysis] Continuer avec analyse Copilot pour correction automatique possible`);
                        return { shouldEscalate: false, userMessageAdded: false };
                    }
                    
                    if (isAudioProblem(lowerMessage)) {
                        console.log(`√∞≈∏‚Äù≈† [AudioAnalysis] Probl√É¬®me audio d√É¬©tect√É¬© √¢‚Ä†‚Äô TENTER DIAGNOSTIC AUTOMATIQUE BACKEND AVANT ESCALADE`);
                        
                        // √¢≈ì‚Ä¶ CORRECTION CRITIQUE : PERMETTRE AU BACKEND D'ANALYSER AVANT D'ESCALADER
                        // Le backend peut d√É¬©tecter et corriger automatiquement des probl√É¬®mes comme TCC2 en sourdine
                        console.log(`√∞≈∏≈Ω¬Ø [AudioAnalysis] Continuer avec analyse Copilot pour correction automatique possible`);
                        return { shouldEscalate: false, userMessageAdded: false };
                    }
                    
                    // Pour les autres types de probl√É¬®mes, continuer avec l'analyse Copilot
                    console.log(`√∞≈∏‚Äù¬ß [EquipmentAnalysis] Pas d'acc√É¬®s √É¬©quipements √¢‚Ä†‚Äô Continuer avec l'analyse Copilot`);
                    return { shouldEscalate: false, userMessageAdded: false };
                }
                
                // √¢≈ì‚Ä¶ NOUVELLE LOGIQUE UNIVERSELLE : Analyser les √É¬©quipements avec r√É¬®gles sym√É¬©triques
                if (roomEquipment.devices && roomEquipment.devices.length > 0) {
                    console.log(`√∞≈∏‚Äù¬ß [EquipmentAnalysis] ${roomEquipment.devices.length} √É¬©quipement(s) trouv√É¬©(s) pour la salle ${currentRoom}`);
                    
                    // √¢≈ì‚Ä¶ Analyser les types d'√É¬©quipements disponibles
                    const equipmentTypes = analyzeRoomEquipmentTypes(roomEquipment.devices);
                    console.log(`√∞≈∏‚Äù¬ç [EquipmentAnalysis] ${equipmentTypes.summary}`);
                    
                    // √¢≈ì‚Ä¶ D√É¬©terminer le type de probl√É¬®me et appliquer la r√É¬®gle universelle
                    let problemType = null;
                    if (isAudioProblem(lowerMessage)) {
                        problemType = 'audio';
                    } else if (isVideoProblem(lowerMessage)) {
                        problemType = 'video';
                        
                        // √¢≈ì‚Ä¶ CRITIQUE : Analyse sp√É¬©cifique des probl√É¬®mes vid√É¬©o avec gestion projecteurs
                        console.log(`√∞≈∏‚Äú¬Ω√Ø¬∏¬è [EquipmentAnalysis] Probl√É¬®me vid√É¬©o d√É¬©tect√É¬© √¢‚Ä†‚Äô Analyse sp√É¬©cifique projecteurs`);
                        const videoHandled = await handleVideoProblemAnalysis(message, roomEquipment);
                        if (videoHandled) {
                            // Escalade effectu√É¬©e par handleVideoProblemAnalysis
                            return { shouldEscalate: true, userMessageAdded: true };
                        }
                        // Sinon, continuer avec RAG backend (projecteurs d√É¬©tect√É¬©s)
                        console.log(`√∞≈∏‚Äú¬Ω√Ø¬∏¬è [EquipmentAnalysis] Projecteurs d√É¬©tect√É¬©s √¢‚Ä†‚Äô Continuer analyse RAG backend`);
                        return { shouldEscalate: false, userMessageAdded: false };
                    }
                    
                    if (problemType === 'audio') {
                        // √¢≈ì‚Ä¶ Logique audio existante
                        console.log(`√∞≈∏‚Äù¬ß [EquipmentAnalysis] Probl√É¬®me audio d√É¬©tect√É¬© √¢‚Ä†‚Äô Tenter diagnostic automatique Copilot`);
                        
                        // √¢≈ì‚Ä¶ V√É¬©rifier si √É¬©quipements appropri√É¬©s disponibles pour diagnostic
                        const hasAppropriateEquipment = equipmentTypes.hasAudio;
                        
                        // √¢≈ì‚Ä¶ CORRECTION CRITIQUE : TOUJOURS PERMETTRE AU BACKEND D'ANALYSER D'ABORD
                        // M√É¬™me si les √É¬©quipements ne sont pas d√É¬©tect√É¬©s localement, le backend peut avoir
                        // une meilleure connaissance des √É¬©quipements et peut corriger automatiquement
                        console.log(`√∞≈∏≈Ω¬Ø [EquipmentAnalysis] Probl√É¬®me audio √¢‚Ä†‚Äô FORCER ANALYSE BACKEND AVANT ESCALADE`);
                        console.log(`√∞≈∏‚Äù¬ß [EquipmentAnalysis] √É‚Ä∞quipements d√É¬©tect√É¬©s: ${hasAppropriateEquipment ? 'OUI' : 'NON'} - Backend peut avoir plus d'infos`);
                        
                        // Laisser le backend analyser et d√É¬©cider s'il peut corriger automatiquement (ex: TCC2 sourdine)
                        return { shouldEscalate: false, userMessageAdded: false };
                    }
                    
                }
                
                // Si pas d'√É¬©quipements trouv√É¬©s, continuer avec l'analyse Copilot
                console.log(`√∞≈∏‚Äù¬ß [EquipmentAnalysis] Aucun √É¬©quipement trouv√É¬© √¢‚Ä†‚Äô Continuer avec l'analyse Copilot`);
                return { shouldEscalate: false, userMessageAdded: false };
                
            } catch (error) {
                console.error('√∞≈∏‚Äù¬ß [EquipmentAnalysis] Erreur lors de l\'analyse:', error);
                // En cas d'erreur, continuer avec l'analyse Copilot
                return { shouldEscalate: false, userMessageAdded: false };
            }
        }

        // √∞≈∏‚Ä†‚Ä¢ FONCTION POUR V√É‚Ä∞RIFIER L'√É‚Ä∞TAT TEMPS R√É‚Ä∞EL D'UN PROJECTEUR
        async function fetchProjectorRealtimeStatus(deviceName) {
            try {
                console.log(`√∞≈∏‚Äù¬ç [RealtimeStatus] V√É¬©rification temps r√É¬©el pour: ${deviceName}`);
                
                const response = await fetch(`${API_BASE_URL}/api/device/public/realtime-status/${deviceName}`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                if (!response.ok) {
                    console.log(`√¢¬ù≈í [RealtimeStatus] Erreur HTTP ${response.status} pour ${deviceName}`);
                    return null;
                }
                
                const status = await response.json();
                console.log(`√¢≈ì‚Ä¶ [RealtimeStatus] √É‚Ä∞tat temps r√É¬©el r√É¬©cup√É¬©r√É¬© pour ${deviceName}:`, status);
                
                return status;
                
            } catch (error) {
                console.error(`√¢¬ù≈í [RealtimeStatus] Erreur pour ${deviceName}:`, error);
                return null;
            }
        }
        
        /**
         * √¢≈ì‚Ä¶ FONCTION MANQUANTE CRITIQUE : Analyse sp√É¬©cifique des probl√É¬®mes vid√É¬©o
         * Copi√É¬©e depuis assistant-salle-av-copie.html
         */
        async function handleVideoProblemAnalysis(message, roomEquipment) {
            const currentRoom = getCurrentRoom();
            
            // V√É¬©rifier s'il y a des projecteurs dans la salle
            const projectors = (roomEquipment && roomEquipment.devices) ? roomEquipment.devices.filter(device => 
                device.device_type === 'projector' || 
                device.device_family_name?.toLowerCase().includes('projecteur') ||
                device.device_name?.toLowerCase().includes('proj') ||
                device.technology?.toLowerCase().includes('pjlink')
            ) : [];
            
            console.log(`√∞≈∏‚Äú¬Ω√Ø¬∏¬è [VideoAnalysis] Salle ${currentRoom}: ${projectors.length} projecteur(s) d√É¬©tect√É¬©(s)`);
            
            if (projectors.length === 0) {
                // Aucun projecteur d√É¬©tect√É¬©, escalade imm√É¬©diate avec interface standard
                console.log(`√∞≈∏‚Äú¬Ω√Ø¬∏¬è [VideoAnalysis] Aucun projecteur d√É¬©tect√É¬© √¢‚Ä†‚Äô Escalade directe`);
                
                // Cr√É¬©er un contexte RAG artificiel pour l'escalade vid√É¬©o
                latestRAGContext = {
                    intent: 'video_problem',
                    confidence: 0.9,
                    room: currentRoom,
                    problems: [{
                        room: currentRoom,
                        device: null,
                        severity: 'medium'
                    }],
                    solutions: [],
                    escalation_needed: true,
                    escalation_reason: "Aucun projecteur d√É¬©tect√É¬© dans cette salle. L'√É¬©quipement vid√É¬©o pourrait ne pas √É¬™tre r√É¬©f√É¬©renc√É¬© dans le syst√É¬®me de monitoring."
                };
                
                console.log('√∞≈∏≈Ω¬´ [VideoEscalation] Contexte RAG artificiel cr√É¬©√É¬© avec salle:', currentRoom);
                
                // √¢≈ì‚Ä¶ PAS DE MESSAGE EN BAS - Banni√É¬®re SEA directe plus propre
                console.log(`√∞≈∏‚Äú¬Ω√Ø¬∏¬è [VideoAnalysis] Aucun projecteur √¢‚Ä†‚Äô Escalade SEA directe sans message interm√É¬©diaire`);
                
                // √¢≈ì‚Ä¶ ESCALADE SEA IMM√É‚Ä∞DIATE au lieu d'attendre le timeout
                setTimeout(() => {
                    showSEAEscalationBanner(latestRAGContext);
                }, 500); // 0.5 seconde pour feedback imm√É¬©diat
                
                return true; // Escalade effectu√É¬©e
            }
            
            // √¢≈ì‚Ä¶ CRITIQUE : Il y a des projecteurs, cr√É¬©er actions automatiques locales
            console.log(`√∞≈∏‚Äú¬Ω√Ø¬∏¬è [VideoAnalysis] ${projectors.length} projecteur(s) trouv√É¬©(s) √¢‚Ä†‚Äô Cr√É¬©er actions automatiques locales`);
            
            // Cr√É¬©er un contexte RAG artificiel avec actions automatiques pour projecteur
            const projector = projectors[0]; // Prendre le premier projecteur
            console.log(`√∞≈∏≈Ω¬Ø [VideoActions] Cr√É¬©ation actions automatiques pour projecteur: ${projector.device_name || projector.name}`);
            
            latestRAGContext = {
                intent: 'video_problem',
                confidence: 0.9,
                room: currentRoom,
                problems: [{
                    room: currentRoom,
                    device: projector.device_name || projector.name,
                    severity: 'high',
                    reason: 'Probl√É¬®me vid√É¬©o projecteur - √É¬©cran noir'
                }],
                solutions: [],
                escalation_needed: false,
                actions: [
                    {
                        type: 'pjlink_power',
                        device_id: projector.id || 31,
                        command: 'power_on', // √¢≈ì‚Ä¶ Format backend
                        description: `Allumer ${projector.device_name || projector.name}`,
                        parameters: {
                            device_name: projector.device_name || projector.name,
                            power_on: true
                        }
                    },
                    {
                        type: 'pjlink_av_unmute', // √¢≈ì‚Ä¶ Nom correct
                        device_id: projector.id || 31,
                        command: 'av_unmute', // √¢≈ì‚Ä¶ Format backend
                        description: `D√É¬©sactiver AV Mute sur ${projector.device_name || projector.name}`,
                        parameters: {
                            device_name: projector.device_name || projector.name,
                            video_mute: false,
                            audio_mute: false
                        }
                    }
                ],
                auto_executed: true
            };
            
            // √¢≈ì‚Ä¶ V√É‚Ä∞RIFIER D'ABORD L'√É‚Ä∞TAT R√É‚Ä∞EL DU PROJECTEUR AVANT D'AFFICHER BANNI√ÉÀÜRE
            console.log(`√∞≈∏‚Äù¬ç [VideoActions] V√É¬©rification √É¬©tat r√É¬©el projecteur avant affichage banni√É¬®re...`);
            
            try {
                // √¢≈ì‚Ä¶ √É‚Ä∞TAPE 1 : V√É¬©rifier l'√É¬©tat d'alimentation (power) du projecteur
                console.log(`√∞≈∏‚Äù≈í [VideoActions] V√É¬©rification √É¬©tat d'alimentation du projecteur...`);
                
                // √¢≈ì‚Ä¶ ESSAI 1 : Endpoint power-status (nouveau)
                let powerData = null;
                try {
                    const powerResponse = await fetch(`${API_BASE_URL}/api/pjlink/power-status?device=PROJ-${currentRoom}`);
                    if (powerResponse.ok) {
                        powerData = await powerResponse.json();
                        console.log(`√∞≈∏‚Äù≈í [VideoActions] √É‚Ä∞tat alimentation (power-status):`, powerData);
                    }
                } catch (powerError) {
                    console.log(`√¢≈°¬†√Ø¬∏¬è [VideoActions] Endpoint power-status non disponible: ${powerError.message}`);
                }
                
                // √¢≈ì‚Ä¶ ESSAI 2 : Fallback vers av-mute-status (existant) pour d√É¬©tecter si projecteur r√É¬©pond
                if (!powerData) {
                    console.log(`√∞≈∏‚Äù‚Äû [VideoActions] Fallback vers av-mute-status pour d√É¬©tecter connectivit√É¬©...`);
                    const avMuteResponse = await fetch(`${API_BASE_URL}/api/pjlink/av-mute-status?device=PROJ-${currentRoom}`);
                    
                    if (avMuteResponse.ok) {
                        const avMuteData = await avMuteResponse.json();
                        console.log(`√∞≈∏‚Äù‚Ä° [VideoActions] √É‚Ä∞tat AV Mute (fallback):`, avMuteData);
                        
                        // √¢≈ì‚Ä¶ Si projecteur r√É¬©pond mais pas de AV Mute √¢‚Ä†‚Äô ESCALADE DIRECTE
                        if (!avMuteData.av_muted && avMuteData.device) {
                            console.log(`√∞≈∏≈Ω¬Ø [VideoActions] Projecteur R√É‚Ä∞POND + PAS AV Mute √¢‚Ä†‚Äô ESCALADE DIRECTE`);
                            showSEAEscalationBanner(latestRAGContext);
                            return; // √¢≈ì‚Ä¶ ARR√É≈†TER ICI - Pas de banni√É¬®re d'attente
                        }
                        
                        // √¢≈ì‚Ä¶ Si projecteur r√É¬©pond ET AV Mute actif √¢‚Ä†‚Äô Continuer avec correction
                        if (avMuteData.av_muted) {
                            console.log(`√∞≈∏‚Äù‚Ä° [VideoActions] Projecteur R√É‚Ä∞POND + AV Mute actif √¢‚Ä†‚Äô Correction automatique`);
                        }
                    } else {
                        // √¢≈ì‚Ä¶ Si projecteur ne r√É¬©pond pas √¢‚Ä†‚Äô Probablement √É¬©teint, continuer avec allumage
                        console.log(`√∞≈∏‚Äù≈í [VideoActions] Projecteur ne r√É¬©pond pas √¢‚Ä†‚Äô Probablement √É¬©teint, continuer avec allumage`);
                    }
                } else {
                    // √¢≈ì‚Ä¶ Endpoint power-status disponible
                    if (powerData.power === 'off' || powerData.power === 'OFF' || !powerData.power) {
                        console.log(`√∞≈∏‚Äù≈í [VideoActions] Projecteur √É‚Ä∞TEINT √¢‚Ä†‚Äô Continuer avec allumage automatique`);
                    } else {
                        // √¢≈ì‚Ä¶ Projecteur allum√É¬© √¢‚Ä†‚Äô V√É¬©rifier AV Mute
                        console.log(`√∞≈∏‚Äù≈í [VideoActions] Projecteur ALLUM√É‚Ä∞ √¢‚Ä†‚Äô V√É¬©rifier AV Mute...`);
                        const avMuteResponse = await fetch(`${API_BASE_URL}/api/pjlink/av-mute-status?device=PROJ-${currentRoom}`);
                        
                        if (avMuteResponse.ok) {
                            const avMuteData = await avMuteResponse.json();
                            console.log(`√∞≈∏‚Äù‚Ä° [VideoActions] √É‚Ä∞tat AV Mute:`, avMuteData);
                            
                            // √¢≈ì‚Ä¶ Si projecteur allum√É¬© ET pas de AV Mute √¢‚Ä†‚Äô ESCALADE DIRECTE
                            if (!avMuteData.av_muted && avMuteData.device) {
                                console.log(`√∞≈∏≈Ω¬Ø [VideoActions] Projecteur ALLUM√É‚Ä∞ + PAS AV Mute √¢‚Ä†‚Äô ESCALADE DIRECTE`);
                                showSEAEscalationBanner(latestRAGContext);
                                return; // √¢≈ì‚Ä¶ ARR√É≈†TER ICI - Pas de banni√É¬®re d'attente
                            }
                        }
                    }
                }
            } catch (error) {
                console.log(`√¢≈°¬†√Ø¬∏¬è [VideoActions] Erreur v√É¬©rification √É¬©tat: ${error.message} - Continuer avec banni√É¬®re d'attente`);
            }
            
            // √¢≈ì‚Ä¶ BANNI√ÉÀÜRE D'ATTENTE ORANGE pour diagnostic et actions (minimum 15 secondes)
            showWaitingBanner('√∞≈∏‚Äù¬ç Diagnostic du projecteur...', 'V√É¬©rification de l\'√É¬©tat et correction en cours');
            
            // √¢≈ì‚Ä¶ M√É¬©moriser le moment d'affichage pour d√É¬©lai minimum
            window.waitingBannerStartTime = Date.now();
            
            // √¢≈ì‚Ä¶ MESSAGE ADAPTATIF selon l'√É¬©tat probable du projecteur
            console.log(`√∞≈∏¬§‚Äì [VideoActions] Envoi message adaptatif au RAG (seulement si pas escalade directe)`);
            
            // Si c'est un nouveau clic apr√É¬®s une correction, changer le message
            const sessionCorrections = sessionStorage.getItem(`corrections_${currentRoom}`) || '0';
            const nbCorrections = parseInt(sessionCorrections);
            
            let adaptiveMessage;
            if (nbCorrections > 0) {
                // Apr√É¬®s une correction, focus sur l'AV Mute
                adaptiveMessage = "Le projecteur est allum√É¬© mais l'image n'appara√É¬Æt pas - √É¬©cran noir avec AV Mute";
                console.log(`√∞≈∏≈Ω¬Ø [VideoActions] ${nbCorrections} correction(s) pr√É¬©c√É¬©dente(s) √¢‚Ä†‚Äô Focus AV Mute`);
            } else {
                // Premier probl√É¬®me : power on classique
                adaptiveMessage = "Le projecteur ne s'allume pas et l'√É¬©cran reste noir";
                console.log(`√∞≈∏≈Ω¬Ø [VideoActions] Premier probl√É¬®me √¢‚Ä†‚Äô Focus Power ON`);
            }
            
            sendProblemToVitrine(adaptiveMessage, currentRoom);
            
            return true; // Traitement effectu√É¬© localement
        }
        
        // ===== FONCTION POUR APPEL VITRINE =====
        
        async function sendProblemToVitrine(message, roomName) {
            console.log(`√∞≈∏≈í¬ê [VitrineCall] Envoi vers /api/copilot/vitrine: "${message}"`);
            
            try {
                // √¢≈ì‚Ä¶ S'assurer d'utiliser le bon backend
                await ensureBackendConnection();
                
                const response = await fetch(`${currentAPI}/api/copilot/vitrine`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        message: `${message} (Salle: ${roomName})`,
                        context: {
                            session_id: `vitrine_video_${Date.now()}`,
                            user_id: 'vitrine_user',
                            source: 'vitrine',
                            timestamp: new Date().toISOString(),
                            room_info: {
                                room: roomName,
                                pavilion: roomName.split('-')[0], // Ex: J-2430 √¢‚Ä†‚Äô J
                                room_number: roomName.split('-')[1] // Ex: J-2430 √¢‚Ä†‚Äô 2430
                            },
                            equipment_context: roomName === 'J-2430' ? {
                                projectors: [{
                                    id: 31,
                                    name: 'PROJ-J-2430',
                                    address: '132.208.119.121',
                                    technology: 'PJLINK',
                                    status: 'online', // √¢≈ì‚Ä¶ Projecteur maintenant allum√É¬©
                                    issues: ['av_mute_active'] // √¢≈ì‚Ä¶ Mais AV Mute actif
                                }],
                                mersive: [{
                                    id: 32,
                                    name: 'DSF-J-2430-A',
                                    address: 'dsf-j-2430-a.ddns.uqam.ca',
                                    technology: 'MERSIVE',
                                    status: 'online'
                                }]
                            } : null
                        }
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`Erreur serveur (${response.status})`);
                }
                
                const data = await response.json();
                console.log(`√∞≈∏‚Äú¬• [VitrineCall] R√É¬©ponse re√É¬ßue:`, data);
                
                // Traiter la r√É¬©ponse comme les autres r√É¬©ponses backend
                processResponse(data);
                
            } catch (error) {
                console.error(`√¢¬ù≈í [VitrineCall] Erreur:`, error);
                // En cas d'erreur, afficher un message √É¬† l'utilisateur
                showAutoActionResult(
                    { type: 'error', description: 'Appel backend' }, 
                    { success: false, message: `Erreur de connexion backend: ${error.message}` }
                );
            }
        }
        
        // ===== FONCTIONS D'ANALYSE DE MESSAGE =====
        function analyzeMessageType(message) {
            const lowerMessage = message.toLowerCase();
            
            // Mots-cl√É¬©s pour √É¬©quipements AV dans le syst√É¬®me SavQonnect
            const avSystemKeywords = [
                // Projecteurs
                'projecteur', 'projector', 'pjlink', '√É¬©cran', 'screen', 'affichage', 'display',
                'image', 'vid√É¬©o', 'video', 'noir', 'blanc', 'flou', 'floue', 'pixelis√É¬©',
                
                // Audio Sennheiser
                'microphone', 'micro', 'son', 'audio', 'volume', 'sennheiser', 'tcc2',
                'mute', 'muet', 'sourdine', 'gr√É¬©sille', 'parasite', 'larsen',
                
                // Crestron
                'crestron', '√É¬©cran tactile', 'touchscreen', 'panneau de contr√É¬¥le',
                'interface de contr√É¬¥le', 't√É¬©l√É¬©commande'
            ];
            
            // Mots-cl√É¬©s pour √É¬©quipements AV hors syst√É¬®me (mais toujours SEA)
            const avExternalKeywords = [
                // √É‚Ä∞quipements AV g√É¬©n√É¬©riques non sp√É¬©cifiques au syst√É¬®me
                'haut-parleur', 'speaker', 'amplificateur', 'ampli', 'console audio',
                'table de mixage', 'mixer', 'cam√É¬©ra', 'webcam', 'visualiseur',
                'dvd', 'blu-ray', 'lecteur', 'player', 'hdmi', 'vga', 'usb',
                'casque', 'headset', 'casque audio', 'jack', 'connecteur',
                'c√É¬¢ble audio', 'c√É¬¢ble vid√É¬©o', 'adaptateur', 'convertisseur'
            ];
            
            // Mots-cl√É¬©s pour probl√É¬®mes non-audiovisuels
            const nonAVKeywords = [
                // √É‚Ä∞lectricit√É¬©
                '√É¬©lectricit√É¬©', '√É¬©lectrique', 'prise', 'prises', 'courant', 'lumi√É¬®re', '√É¬©clairage',
                'ampoule', 'lampe', 'n√É¬©on', 'disjoncteur', 'fusible', 'interrupteur',
                
                // Plomberie
                'plomberie', 'eau', 'robinet', 'toilette', 'chasse d\'eau', 'lavabo',
                '√É¬©vier', 'fuite', 'bouchon', 'inondation', 'd√É¬©g√É¬¢t d\'eau',
                
                // Chauffage/Climatisation
                'chauffage', 'radiateur', 'calorif√É¬®re', 'thermopompe', 'thermostat',
                'climatisation', 'clim', 'air conditionn√É¬©', 'ventilation', 'temp√É¬©rature',
                
                // Mobilier et structure
                'mobilier', 'chaise', 'table', 'bureau', 'porte', 'fen√É¬™tre', 'serrure',
                'cl√É¬©', 'nettoyage', 'm√É¬©nage', 'poubelle', 'd√É¬©chets'
            ];
            
            // Mots-cl√É¬©s hors scope (pas des probl√É¬®mes)
            const outOfScopeKeywords = [
                // Salutations
                'bonjour', 'bonsoir', 'salut', 'hello', 'hi',
                
                // Questions g√É¬©n√É¬©rales
                'comment √É¬ßa va', 'quoi de neuf', 'comment allez-vous',
                'qu\'est-ce que tu fais', 'que fais-tu',
                
                // Demandes d'aide g√É¬©n√É¬©rale
                'aide-moi', 'peux-tu m\'aider', 'j\'ai besoin d\'aide',
                'que peux-tu faire', 'tes fonctionnalit√É¬©s',
                
                // Discussions
                'parle-moi', 'raconte-moi', 'dis-moi', 'explique-moi',
                'm√É¬©t√É¬©o', 'actualit√É¬©', 'nouvelles', 'sport'
            ];
            
            // V√É¬©rifier si c'est un probl√É¬®me technique valide
            const problemIndicators = [
                'probl√É¬®me', 'panne', 'ne fonctionne pas', 'ne marche pas', 'd√É¬©faillant',
                'en panne', 'cass√É¬©', 'ne s\'allume pas', 'ne r√É¬©pond pas', 'dysfonctionnement',
                'pas de', 'aucun', 'rien', 'bloqu√É¬©', 'fig√É¬©', 'lent', 'erreur'
            ];
            
            const hasProblemIndicator = problemIndicators.some(indicator => 
                lowerMessage.includes(indicator)
            );
            
            // Classification par priorit√É¬©
            
            // 1. V√É¬©rifier si c'est hors scope
            if (outOfScopeKeywords.some(keyword => lowerMessage.includes(keyword))) {
                return {
                    type: 4,
                    category: 'out_of_scope',
                    description: 'Demande hors scope - pas un probl√É¬®me audiovisuel',
                    needsRoom: false
                };
            }
            
            // 2. V√É¬©rifier si c'est non-audiovisuel (priorit√É¬© haute)
            if (nonAVKeywords.some(keyword => lowerMessage.includes(keyword))) {
                console.log(`√∞≈∏¬è¬¢ [NonAV] D√É¬©tection probl√É¬®me non-audiovisuel: "${message}" contient mot-cl√É¬© immeubles`);
                return {
                    type: 3,
                    category: 'non_audiovisual',
                    description: 'Probl√É¬®me non-audiovisuel - service des immeubles',
                    needsRoom: false
                };
            }
            
            // 3. V√É¬©rifier si c'est AV dans le syst√É¬®me
            if (avSystemKeywords.some(keyword => lowerMessage.includes(keyword))) {
                return {
                    type: 1,
                    category: 'av_system',
                    description: 'Probl√É¬®me √É¬©quipement AV dans le syst√É¬®me SavQonnect',
                    needsRoom: !hasRoomInformation(message),
                    hasEquipment: true
                };
            }
            
            // 4. V√É¬©rifier si c'est AV externe
            if (avExternalKeywords.some(keyword => lowerMessage.includes(keyword))) {
                return {
                    type: 2,
                    category: 'av_external',
                    description: 'Probl√É¬®me √É¬©quipement AV hors syst√É¬®me - redirection SEA',
                    needsRoom: !hasRoomInformation(message),
                    hasEquipment: true
                };
            }
            
            // 5. Si c'est un probl√É¬®me mais pas clairement cat√É¬©goris√É¬©
            if (hasProblemIndicator) {
                // Assumer que c'est potentiellement AV si c'est un probl√É¬®me technique
                return {
                    type: 1,
                    category: 'av_system_assumed',
                    description: 'Probl√É¬®me technique - assume √É¬©quipement AV syst√É¬®me',
                    needsRoom: !hasRoomInformation(message),
                    hasEquipment: false
                };
            }
            
            // 6. Par d√É¬©faut, consid√É¬©rer comme hors scope
            return {
                type: 4,
                category: 'out_of_scope',
                description: 'Demande non identifi√É¬©e - hors scope',
                needsRoom: false
            };
        }

        /**
         * V√É¬©rifie si le message contient des informations sur la salle
         */
        function hasRoomInformation(message) {
            // Rechercher les patterns de salle (ex: A-1750, a-1730, B-2500, SH-R200, DS-4000, etc.)
            const roomPattern = /\b([a-zA-Z]{1,2})-?([a-zA-Z]?\d{3,4})\b/i;
            const hasRoom = roomPattern.test(message);
            
            // Rechercher mentions de pavillon/b√É¬¢timent
            const buildingPattern = /\b(pavillon|b√É¬¢timent|building)\s+([a-zA-Z]{1,2})\b/i;
            const hasBuilding = buildingPattern.test(message);
            
            console.log(`√∞≈∏‚Äù¬ç [RoomDetection] Message: "${message}", Pattern d√É¬©tect√É¬©: ${hasRoom || hasBuilding}`);
            return hasRoom || hasBuilding;
        }

        /**
         * G√É¬®re les messages hors scope
         */
        function handleOutOfScopeMessage(message) {
            addMessage('system', '√∞≈∏¬§‚Äì Je suis votre assistant audiovisuel pour cette salle. Je peux vous aider avec les probl√É¬®mes de projecteur, microphone, son, etc. Que puis-je faire pour vous ?', {
                suggestions: ['Probl√É¬®me projecteur', 'Probl√É¬®me audio', 'Probl√É¬®me r√É¬©seau']
            });
        }

        /**
         * G√É¬®re les probl√É¬®mes r√É¬©seau avec banni√É¬®re moderne Services Informatiques
         */
        function handleNetworkProblem(message) {
            console.log('√∞≈∏‚Äô¬ª [SIEscalation] Affichage de la banni√É¬®re Services Informatiques pour probl√É¬®me r√É¬©seau');
            
            // √¢≈ì‚Ä¶ CORRECTION: Fermer toutes les banni√É¬®res SI existantes AVANT d'en cr√É¬©er une nouvelle
            const existingSiBanners = document.querySelectorAll('[id^="escalation_si_"]');
            const existingSiOverlays = document.querySelectorAll('[id^="overlay_escalation_si_"]');
            
            existingSiBanners.forEach(banner => {
                console.log(`√∞≈∏≈°¬´ [CleanupSIBanner] Suppression banni√É¬®re SI existante: ${banner.id}`);
                banner.remove();
            });
            
            existingSiOverlays.forEach(overlay => {
                console.log(`√∞≈∏≈°¬´ [CleanupSIOverlay] Suppression overlay SI existant: ${overlay.id}`);
                overlay.remove();
            });
            
            const currentRoom = getCurrentRoom();
            
            // Cr√É¬©er la banni√É¬®re SI avec overlay plein √É¬©cran
            const escalationId = `escalation_si_${Date.now()}`;
            
            // Cr√É¬©er l'overlay plein √É¬©cran avec flou agressif
            const overlayDiv = document.createElement('div');
            overlayDiv.id = `overlay_${escalationId}`;
            overlayDiv.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(20px);
                z-index: 9998;
                cursor: pointer;
            `;
            
            // Cr√É¬©er la banni√É¬®re SI
            const escalationDiv = document.createElement('div');
            escalationDiv.id = escalationId;
            escalationDiv.className = 'escalation-compact fade-in';
            escalationDiv.style.cssText = `
                background: rgba(255, 255, 255, 0.98);
                border-radius: 12px;
                padding: 2rem;
                color: black !important;
                text-align: center;
                box-shadow: 0 20px 40px rgba(0,0,0,0.3);
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 9999;
                width: 90%;
                max-width: 600px;
                max-height: 80vh;
                overflow-y: auto;
            `;
            
            escalationDiv.innerHTML = `
                <div class="escalation-header" style="margin-bottom: 1.5rem;">
                    <div class="escalation-image-container" style="text-align: center; margin-bottom: 1rem;">
                        <img id="si-logo" src="assets/SI.png" alt="Services Informatiques UQAM" style="max-width: 200px; height: auto; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.2);">
                    </div>
                    <div class="escalation-text">
                        <strong style="color: black !important; font-weight: 600; font-size: 1.4rem; display: block; margin-bottom: 0.5rem;">Services Informatiques UQAM</strong>
                        <span class="escalation-subtitle" style="color: black !important; font-weight: 700; font-size: 1.1rem;">Probl√É¬®me r√É¬©seau - Salle ${currentRoom}</span>
                    </div>
                    </div>
                    
                <div class="si-contact-content" style="margin: 1.5rem 0; text-align: left;">
                    <p style="color: black !important; font-size: 1rem; line-height: 1.5; margin-bottom: 1.5rem;">
                        Pour les probl√É¬®mes de r√É¬©seau, connectivit√É¬© Internet, Wi-Fi, ou √É¬©quipements informatiques dans la salle ${currentRoom}, veuillez contacter les Services Informatiques.
                    </p>
                    
                    <div class="si-contact-info" style="background: rgba(0,0,0,0.05); padding: 1rem; border-radius: 8px; margin: 1rem 0;">
                        <div class="si-contact-primary" style="display: flex; align-items: center; margin-bottom: 0.75rem; gap: 0.5rem;">
                            <span style="font-size: 1.2rem;">√∞≈∏‚Äú≈æ</span>
                            <strong style="color: black !important; font-size: 1.1rem;">SI : 514-987-3000</strong>
                            <span style="color: black !important; opacity: 0.7; font-size: 0.9rem;">(poste 5050)</span>
                            </div>
                        <div class="si-contact-secondary" style="display: flex; align-items: center; gap: 0.5rem;">
                            <span style="font-size: 1.2rem;">√∞≈∏≈í¬ê</span>
                            <a href="https://servicesinformatiques.uqam.ca/" target="_blank" style="color: #2196F3; text-decoration: none; font-weight: 500;">servicesinformatiques.uqam.ca</a>
                        </div>
                            </div>
                        </div>
                        
                <div class="escalation-actions" style="display: flex; gap: 1rem; justify-content: center; margin-top: 1.5rem;">
                    <button class="escalation-btn secondary" onclick="closeEscalationBanner('${escalationId}')" style="
                        color: black !important;
                        background: rgba(255,255,255,0.2);
                        border: 1px solid rgba(255,255,255,0.3);
                        padding: 0.75rem 1.5rem;
                        border-radius: 8px;
                        cursor: pointer;
                        font-weight: 500;
                        font-size: 0.9rem;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,255,255,0.3)'" onmouseout="this.style.background='rgba(255,255,255,0.2)'">
                        √¢≈ì‚Ä¢ Fermer
                    </button>
                    <button class="escalation-btn primary" onclick="window.open('tel:514-987-3000', '_self')" style="
                        color: black !important;
                        background: rgba(255,255,255,0.9);
                        border: none;
                        padding: 0.75rem 1.5rem;
                        border-radius: 8px;
                        cursor: pointer;
                        font-weight: 500;
                        font-size: 0.9rem;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,255,255,1)'" onmouseout="this.style.background='rgba(255,255,255,0.9)'">
                        √∞≈∏‚Äú≈æ Appeler SI
                    </button>
                    <button class="escalation-btn primary" onclick="window.open('https://servicesinformatiques.uqam.ca/', '_blank')" style="
                        color: black !important;
                        background: rgba(255,255,255,0.9);
                        border: none;
                        padding: 0.75rem 1.5rem;
                        border-radius: 8px;
                        cursor: pointer;
                        font-weight: 500;
                        font-size: 0.9rem;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,255,255,1)'" onmouseout="this.style.background='rgba(255,255,255,0.9)'">
                        √∞≈∏≈í¬ê Site web
                    </button>
                        </div>
            `;
            
            // √¢≈ì‚Ä¶ CORRECTION: Fermer au clic sur l'overlay mais PAS sur les √É¬©l√É¬©ments internes
            overlayDiv.onclick = (event) => {
                if (event.target === overlayDiv) {
                    closeEscalationBanner(escalationId);
                }
            };
            
            // √¢≈ì‚Ä¶ Emp√É¬™cher la propagation des √É¬©v√É¬©nements depuis la banni√É¬®re
            escalationDiv.onclick = (event) => {
                event.stopPropagation();
            };
            
            // Ajouter l'overlay et la banni√É¬®re au body
            document.body.appendChild(overlayDiv);
            document.body.appendChild(escalationDiv);
            
            console.log(`√∞≈∏‚Äô¬ª [SIBanner] Banni√É¬®re Services Informatiques affich√É¬©e pour salle ${currentRoom}`);
        }

        /**
         * G√É¬®re les probl√É¬®mes non-audiovisuels avec banni√É¬®re moderne SIM
         */
        function handleNonAudiovisualProblem(message) {
            console.log('√∞≈∏¬è¬¢ [SIMEscalation] Affichage de la banni√É¬®re SIM pour probl√É¬®me non-audiovisuel');
            
            // √¢≈ì‚Ä¶ CORRECTION: Fermer toutes les banni√É¬®res SIM existantes AVANT d'en cr√É¬©er une nouvelle
            const existingSimBanners = document.querySelectorAll('[id^="escalation_sim_"]');
            const existingSimOverlays = document.querySelectorAll('[id^="overlay_escalation_sim_"]');
            
            existingSimBanners.forEach(banner => {
                console.log(`√∞≈∏≈°¬´ [CleanupSIMBanner] Suppression banni√É¬®re SIM existante: ${banner.id}`);
                banner.remove();
            });
            
            existingSimOverlays.forEach(overlay => {
                console.log(`√∞≈∏≈°¬´ [CleanupSIMOverlay] Suppression overlay SIM existant: ${overlay.id}`);
                overlay.remove();
            });
            
            const currentRoom = getCurrentRoom();
            
            // Cr√É¬©er la banni√É¬®re SIM avec overlay plein √É¬©cran
            const escalationId = `escalation_sim_${Date.now()}`;
            
            // Cr√É¬©er l'overlay plein √É¬©cran avec flou agressif
            const overlayDiv = document.createElement('div');
            overlayDiv.id = `overlay_${escalationId}`;
            overlayDiv.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(20px);
                z-index: 9998;
                cursor: pointer;
            `;
            
            // Cr√É¬©er la banni√É¬®re SIM
            const escalationDiv = document.createElement('div');
            escalationDiv.id = escalationId;
            escalationDiv.className = 'escalation-compact fade-in';
            escalationDiv.style.cssText = `
                background: rgba(255, 255, 255, 0.98);
                border-radius: 12px;
                padding: 2rem;
                color: black !important;
                text-align: center;
                box-shadow: 0 20px 40px rgba(0,0,0,0.3);
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 9999;
                width: 90%;
                max-width: 600px;
                max-height: 80vh;
                overflow-y: auto;
            `;
            
            escalationDiv.innerHTML = `
                <div class="escalation-header" style="margin-bottom: 1.5rem;">
                    <div class="escalation-image-container" style="text-align: center; margin-bottom: 1rem;">
                        <img id="sim-logo" src="assets/SIM.png" alt="Service des Immeubles UQAM" style="max-width: 200px; height: auto; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.2);">
                    </div>
                    <div class="escalation-text">
                        <strong style="color: black !important; font-weight: 600; font-size: 1.4rem; display: block; margin-bottom: 0.5rem;">Service des Immeubles UQAM</strong>
                        <span class="escalation-subtitle" style="color: black !important; font-weight: 700; font-size: 1.1rem;">Probl√É¬®me non-audiovisuel - Salle ${currentRoom}</span>
                    </div>
                </div>
                
                <div class="sim-contact-content" style="margin: 1.5rem 0; text-align: left;">
                    <p style="color: black !important; font-size: 1rem; line-height: 1.5; margin-bottom: 1.5rem;">
                        Pour les probl√É¬®mes d'infrastructure, d'√É¬©lectricit√É¬©, de plomberie, de chauffage ou de climatisation dans la salle ${currentRoom}, veuillez contacter le Service des Immeubles.
                    </p>
                    
                    <div class="sim-contact-info" style="background: rgba(0,0,0,0.05); padding: 1rem; border-radius: 8px; margin: 1rem 0;">
                        <div class="sim-contact-primary" style="display: flex; align-items: center; margin-bottom: 0.75rem; gap: 0.5rem;">
                            <span style="font-size: 1.2rem;">√∞≈∏‚Äú≈æ</span>
                            <strong style="color: black !important; font-size: 1.1rem;">SIM : 514-987-3141</strong>
                            <span style="color: black !important; opacity: 0.7; font-size: 0.9rem;">(poste 3141)</span>
                        </div>
                        <div class="sim-contact-secondary" style="display: flex; align-items: center; gap: 0.5rem;">
                            <span style="font-size: 1.2rem;">√∞≈∏≈í¬ê</span>
                            <a href="https://sim.uqam.ca/" target="_blank" style="color: #2196F3; text-decoration: none; font-weight: 500;">sim.uqam.ca</a>
                        </div>
                    </div>
                </div>
                
                <div class="escalation-actions" style="display: flex; gap: 1rem; justify-content: center; margin-top: 1.5rem;">
                    <button class="escalation-btn secondary" onclick="closeEscalationBanner('${escalationId}')" style="
                        color: black !important;
                        background: rgba(255,255,255,0.2);
                        border: 1px solid rgba(255,255,255,0.3);
                        padding: 0.75rem 1.5rem;
                        border-radius: 8px;
                        cursor: pointer;
                        font-weight: 500;
                        font-size: 0.9rem;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,255,255,0.3)'" onmouseout="this.style.background='rgba(255,255,255,0.2)'">
                        √¢≈ì‚Ä¢ Fermer
                    </button>
                    <button class="escalation-btn primary" onclick="window.open('tel:514-987-3141', '_self')" style="
                        color: black !important;
                        background: rgba(255,255,255,0.9);
                        border: none;
                        padding: 0.75rem 1.5rem;
                        border-radius: 8px;
                        cursor: pointer;
                        font-weight: 500;
                        font-size: 0.9rem;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,255,255,1)'" onmouseout="this.style.background='rgba(255,255,255,0.9)'">
                        √∞≈∏‚Äú≈æ Appeler SIM
                    </button>
                    <button class="escalation-btn primary" onclick="window.open('https://sim.uqam.ca/', '_blank')" style="
                        color: black !important;
                        background: rgba(255,255,255,0.9);
                        border: none;
                        padding: 0.75rem 1.5rem;
                        border-radius: 8px;
                        cursor: pointer;
                        font-weight: 500;
                        font-size: 0.9rem;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,255,255,1)'" onmouseout="this.style.background='rgba(255,255,255,0.9)'">
                        √∞≈∏≈í¬ê Site web
                    </button>
                </div>
            `;
            
            // √¢≈ì‚Ä¶ CORRECTION: Fermer au clic sur l'overlay mais PAS sur les √É¬©l√É¬©ments internes
            overlayDiv.onclick = (event) => {
                if (event.target === overlayDiv) {
                    closeEscalationBanner(escalationId);
                }
            };
            
            // √¢≈ì‚Ä¶ Emp√É¬™cher la propagation des √É¬©v√É¬©nements depuis la banni√É¬®re
            escalationDiv.onclick = (event) => {
                event.stopPropagation();
            };
            
            // Ajouter l'overlay et la banni√É¬®re au body
            document.body.appendChild(overlayDiv);
            document.body.appendChild(escalationDiv);
            
            console.log(`√∞≈∏¬è¬¢ [SIMBanner] Banni√É¬®re SIM affich√É¬©e pour salle ${currentRoom}`);
        }

        /**
         * G√É¬®re les probl√É¬®mes AV externes avec salle
         */
        function handleExternalAVProblemWithRoom(message) {
            const currentRoom = getCurrentRoom();
            addMessage('system', `√∞≈∏‚Äú≈æ <strong>Contact SEA</strong><br><br>Pour ce type d'√É¬©quipement dans la salle ${currentRoom}, veuillez contacter directement le SEA au <strong>6135</strong>.`, {
                suggestions: ['Appeler SEA', 'Probl√É¬®me syst√É¬®me', 'Autre salle']
            });
        }

        // √¢≈ì‚Ä¶ NOUVEAU: Timer d'escalade automatique pour √É¬©viter les blocages
        let escalationTimeoutId = null;
        
        function startEscalationTimeout(problemType, room) {
            // Annuler le timer pr√É¬©c√É¬©dent si existant
            if (escalationTimeoutId) {
                clearTimeout(escalationTimeoutId);
            }
            
            escalationTimeoutId = setTimeout(() => {
                console.log(`√¢¬è¬∞ [EscalationTimeout] Timeout atteint pour probl√É¬®me ${problemType} √¢‚Ä†‚Äô Escalade forc√É¬©e`);
                
                // √¢≈ì‚Ä¶ CORRECTION: V√É¬©rifier les tickets existants AVANT l'escalade par timeout
                if (hasExistingTicket(room)) {
                    const lastTicket = getLastSessionTicket(room);
                    console.log(`√∞≈∏≈Ω¬´ [EscalationTimeout] Timeout mais ticket ${lastTicket.number} existe √¢‚Ä†‚Äô Banni√É¬®re ticket existant`);
                    showExistingTicketBanner(lastTicket);
                } else {
                    showSEAEscalationBanner({
                        intent: `${problemType}_problem`,
                        confidence: 0.95,
                        room: room,
                        escalation_needed: true,
                        escalation_reason: `Aucune correction automatique trouv√É¬©e - Intervention technique requise`
                    });
                }
            }, 10000); // √¢≈ì‚Ä¶ 10 secondes pour laisser le temps au RAG de r√É¬©pondre
        }
        
        function clearEscalationTimeout() {
            if (escalationTimeoutId) {
                clearTimeout(escalationTimeoutId);
                escalationTimeoutId = null;
                console.log('√¢¬è¬∞ [EscalationTimeout] Timer d\'escalade annul√É¬©');
            }
        }

        // ===== BANNI√ÉÀÜRE D'ALLUMAGE PROJECTEUR (inspir√É¬©e modale PJLink) =====
        
        function showProjectorPoweringBanner(roomName) {
            console.log(`√∞≈∏‚Äù≈í [ProjectorPower] Banni√É¬®re allumage projecteur pour ${roomName}`);
            
            // √¢≈ì‚Ä¶ CORRECTION : Masquer le sablier diagnostic car banni√É¬®re projecteur prend le relais
            hideDiagnosticLoading();
            console.log('√¢≈ì‚Ä¶ [ProjectorPower] Sablier diagnostic masqu√É¬© - Banni√É¬®re projecteur prend le relais');
            
            // Supprimer une √É¬©ventuelle banni√É¬®re existante
            const existingBanner = document.getElementById('projector-powering-banner');
            if (existingBanner) {
                existingBanner.remove();
            }
            
            // Cr√É¬©er la banni√É¬®re d'allumage
            const banner = document.createElement('div');
            banner.id = 'projector-powering-banner';
            banner.className = 'projector-powering-banner show';
            
            banner.innerHTML = `
                <div class="powering-content">
                    <div class="powering-icon">
                        <i class="fas fa-power-off warming-rotation"></i>
                    </div>
                    <div class="powering-text">
                        <h3>√∞≈∏‚Äù≈í Allumage du projecteur en cours...</h3>
                        <p>Salle ${roomName} - Patientez pendant la mise sous tension</p>
                        <div class="power-progress">
                            <div class="progress-bar">
                                <div class="progress-fill warming-fill"></div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.appendChild(banner);
            
            // Commencer la surveillance de l'√É¬©tat du projecteur
            startProjectorStatusMonitoring(roomName);
        }
        
        function startProjectorStatusMonitoring(roomName) {
            console.log(`√∞≈∏‚Äò¬Å√Ø¬∏¬è [ProjectorMonitoring] Surveillance √É¬©tat projecteur ${roomName}`);
            
            let checkCount = 0;
            const maxChecks = 30; // 30 checks = 30 secondes max
            
            const monitoringInterval = setInterval(async () => {
                checkCount++;
                console.log(`√∞≈∏‚Äù¬ç [ProjectorMonitoring] Check ${checkCount}/${maxChecks} pour ${roomName}`);
                
                try {
                    // √¢≈ì‚Ä¶ UTILISER API TEMPS R√É‚Ä∞EL au lieu du cache
                    const response = await fetch(`${currentAPI}/api/room/equipment?room=${encodeURIComponent(roomName)}&refresh=true`);
                    
                    if (response.ok) {
                        const data = await response.json();
                        if (data.status === 'success' && data.devices) {
                            const projector = data.devices.find(d => d.technology === 'PJLINK' || d.family_type === 'PJLINK');
                            
                            if (projector) {
                                console.log(`√∞≈∏‚Äú≈† [ProjectorMonitoring] √É‚Ä∞tat projecteur: ${projector.status}, Power: ${projector.power_state}`);
                                
                                // √¢≈ì‚Ä¶ CRIT√ÉÀÜRES PLUS LARGES pour d√É¬©tecter l'allumage
                                const isProjectorOn = projector.status === 'online' || 
                                                    projector.status === 'ON' || 
                                                    projector.power_state === 'ON' ||
                                                    projector.power_state === 'WARMUP' ||
                                                    projector.power_state === 'WARMING_UP';
                                
                                if (isProjectorOn) {
                                    console.log(`√¢≈ì‚Ä¶ [ProjectorMonitoring] Projecteur allum√É¬© ! Transition vers AV Mute`);
                                    clearInterval(monitoringInterval);
                                    
                                    // √¢≈ì‚Ä¶ ATTENDRE 3 SECONDES avant AV Mute (temps de stabilisation)
                                    setTimeout(() => {
                                        updateProjectorBannerToAVMute(roomName);
                                        
                                                                // √¢≈ì‚Ä¶ V√É‚Ä∞RIFIER ET CORRIGER AV MUTE automatiquement
                        setTimeout(async () => {
                            console.log(`√∞≈∏≈Ω¬Ø [ProjectorMonitoring] V√É¬©rification √É¬©tat AV Mute temps r√É¬©el`);
                            await checkAndFixAVMuteStatus(roomName, projector.name || projector.device_name || `PROJ-${roomName}`);
                        }, 2000);
                                    }, 3000);
                                    return;
                                }
                            }
                        }
                    }
                    
                    // √¢≈ì‚Ä¶ FALLBACK : Si apr√É¬®s 10 checks toujours pas d√É¬©tect√É¬©, forcer AV Mute
                    if (checkCount >= 10) {
                        console.log(`√∞≈∏≈Ω¬Ø [ProjectorMonitoring] Fallback apr√É¬®s 10s √¢‚Ä†‚Äô Forcer correction AV Mute`);
                        clearInterval(monitoringInterval);
                        updateProjectorBannerToAVMute(roomName);
                        
                        setTimeout(async () => {
                            console.log(`√∞≈∏≈Ω¬Ø [ProjectorMonitoring] Fallback - V√É¬©rification AV Mute`);
                            await checkAndFixAVMuteStatus(roomName, `PROJ-${roomName}`); // Nom bas√É¬© sur la salle
                        }, 2000);
                        return;
                    }
                    
                } catch (error) {
                    console.log(`√¢≈°¬†√Ø¬∏¬è [ProjectorMonitoring] Erreur surveillance: ${error.message}`);
                }
                
                // Timeout apr√É¬®s 30 secondes
                if (checkCount >= maxChecks) {
                    console.log(`√¢¬è¬∞ [ProjectorMonitoring] Timeout surveillance pour ${roomName}`);
                    clearInterval(monitoringInterval);
                    hideProjectorPoweringBanner();
                }
            }, 1000); // Check toutes les secondes
        }
        
        function updateProjectorBannerToAVMute(roomName) {
            const banner = document.getElementById('projector-powering-banner');
            if (!banner) return;
            
            console.log(`√∞≈∏≈Ω¬Ø [ProjectorBanner] Transition vers AV Mute pour ${roomName}`);
            
            // Mettre √É¬† jour le contenu pour AV Mute
            const content = banner.querySelector('.powering-content');
            if (content) {
                content.innerHTML = `
                    <div class="powering-icon">
                        <i class="fas fa-eye-slash av-mute-pulse"></i>
                    </div>
                    <div class="powering-text">
                        <h3>√∞≈∏‚Äú¬∫ Projecteur allum√É¬© - Correction AV Mute...</h3>
                        <p>Salle ${roomName} - Activation de l'affichage</p>
                        <div class="power-progress">
                            <div class="progress-bar">
                                <div class="progress-fill success-fill"></div>
                            </div>
                        </div>
                    </div>
                `;
            }
            
            // Auto-hide apr√É¬®s 15 secondes (plus de temps pour voir)
            setTimeout(() => {
                hideProjectorPoweringBanner();
            }, 15000);
        }
        
        function hideProjectorPoweringBanner() {
            const banner = document.getElementById('projector-powering-banner');
            if (banner) {
                banner.classList.remove('show');
                setTimeout(() => {
                    if (banner.parentNode) {
                        banner.parentNode.removeChild(banner);
                    }
                }, 300);
                console.log(`√∞≈∏≈°¬´ [ProjectorBanner] Banni√É¬®re allumage masqu√É¬©e`);
            }
        }
        
        // √¢≈ì‚Ä¶ NOUVELLE FONCTION : V√É¬©rifier et corriger AV Mute temps r√É¬©el
        async function checkAndFixAVMuteStatus(roomName, projectorName) {
            console.log(`√∞≈∏‚Äù‚Ä° [AVMuteCheck] V√É¬©rification √É¬©tat AV Mute pour ${projectorName} (${roomName})`);
            
            try {
                // √¢≈ì‚Ä¶ √É‚Ä∞TAPE 1 : V√É¬©rifier l'√É¬©tat actuel AV Mute
                console.log(`√∞≈∏≈í¬ê [AVMuteCheck] URL appel√É¬©e: ${API_BASE_URL}/api/pjlink/av-mute-status?device=${encodeURIComponent(projectorName)}`);
                const statusResponse = await fetch(`${API_BASE_URL}/api/pjlink/av-mute-status?device=${encodeURIComponent(projectorName)}`);
                
                console.log(`√∞≈∏‚Äú¬° [AVMuteCheck] R√É¬©ponse statut: ${statusResponse.status} ${statusResponse.statusText}`);
                
                if (!statusResponse.ok) {
                    console.log(`√¢¬ù≈í [AVMuteCheck] Erreur r√É¬©cup√É¬©ration statut: ${statusResponse.status}`);
                    const errorText = await statusResponse.text();
                    console.log(`√∞≈∏‚Äú‚Äû [AVMuteCheck] D√É¬©tails erreur: ${errorText}`);
                    return;
                }
                
                const statusData = await statusResponse.json();
                console.log(`√∞≈∏‚Äú≈† [AVMuteCheck] Statut AV Mute:`, statusData);
                
                // √¢≈ì‚Ä¶ √É‚Ä∞TAPE 2 : Si AV Mute actif √¢‚Ä†‚Äô Le corriger
                if (statusData.av_muted) {
                    console.log(`√∞≈∏‚Äù‚Ä° [AVMuteCheck] AV Mute d√É¬©tect√É¬© √¢‚Ä†‚Äô Correction automatique`);
                    
                    // √¢≈ì‚Ä¶ BANNI√ÉÀÜRE D'ATTENTE ORANGE pendant correction (minimum 15 secondes)
                    showWaitingBanner('√∞≈∏‚Äù¬ß Correction AV Mute en cours...', 'D√É¬©sactivation du mode muet sur le projecteur');
                    window.waitingBannerStartTime = Date.now(); // √¢≈ì‚Ä¶ Nouveau timestamp
                    
                    // √¢≈ì‚Ä¶ Utiliser l'endpoint direct AV Mute public (sans auth)
                    console.log(`√∞≈∏‚Äù¬ß [AVMuteCheck] Correction directe AV Mute sur ${projectorName}`);
                    const fixResponse = await fetch(`${API_BASE_URL}/api/pjlink/av-mute-control`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            device_name: projectorName,
                            video_mute: false,
                            audio_mute: false
                        })
                    });
                    
                    if (fixResponse.ok) {
                        const fixData = await fixResponse.json();
                        console.log(`√¢≈ì‚Ä¶ [AVMuteCheck] AV Mute corrig√É¬© avec succ√É¬®s:`, fixData);
                        
                        // √¢≈ì‚Ä¶ ATTENDRE MINIMUM 15 SECONDES pour que le client voie la banni√É¬®re d'attente
                        console.log(`√¢¬è¬≥ [AVMuteCheck] Banni√É¬®re d'attente visible pendant 15s minimum...`);
                        setTimeout(async () => {
                            console.log(`√∞≈∏‚Äù¬ç [AVMuteCheck] V√É¬©rification post-correction...`);
                            const verifyResponse = await fetch(`${API_BASE_URL}/api/pjlink/av-mute-status?device=${encodeURIComponent(projectorName)}`);
                            if (verifyResponse.ok) {
                                const verifyData = await verifyResponse.json();
                                console.log(`√∞≈∏‚Äú≈† [AVMuteCheck] √É‚Ä∞tat post-correction:`, verifyData);
                                
                                if (!verifyData.av_muted) {
                                    console.log(`√∞≈∏≈Ω‚Ä∞ [AVMuteCheck] SUCC√ÉÀÜS CONFIRM√É‚Ä∞ : AV Mute vraiment d√É¬©sactiv√É¬© !`);
                                } else {
                                    console.log(`√¢≈°¬†√Ø¬∏¬è [AVMuteCheck] PROBL√ÉÀÜME : AV Mute toujours actif apr√É¬®s correction !`);
                                }
                            }
                            
                            // √¢≈ì‚Ä¶ MASQUER BANNI√ÉÀÜRE D'ATTENTE et afficher succ√É¬®s
                            console.log(`√∞≈∏≈Ω¬Ø [AVMuteCheck] Masquer banni√É¬®re d'attente apr√É¬®s 15s minimum`);
                            hideWaitingBanner();
                            setTimeout(() => {
                                // √¢≈ì‚Ä¶ AFFICHER BANNI√ÉÀÜRE SUCC√ÉÀÜS APR√ÉÀÜS masquage banni√É¬®re d'attente
                                showAutoActionResult(
                                    { 
                                        type: 'av_mute_correction', 
                                        description: 'Correction AV Mute termin√É¬©e' 
                                    }, 
                                    { 
                                        success: true, 
                                        message: `AV Mute d√É¬©sactiv√É¬© sur ${projectorName} - Image restaur√É¬©e !` 
                                    }
                                );
                            }, 500);
                        }, 15000); // √¢≈ì‚Ä¶ 15 secondes minimum pour banni√É¬®re d'attente
                        
                    } else {
                        const errorData = await fixResponse.json();
                        console.log(`√¢¬ù≈í [AVMuteCheck] √É‚Ä∞chec correction AV Mute: ${fixResponse.status}`, errorData);
                    }
                    
                } else {
                    console.log(`√¢≈ì‚Ä¶ [AVMuteCheck] AV Mute d√É¬©j√É¬† inactif - Aucune correction n√É¬©cessaire`);
                    
                    // √¢≈ì‚Ä¶ CORRECTION : Ne pas afficher de banni√É¬®re de succ√É¬®s pr√É¬©matur√É¬©e
                    // Laisser la banni√É¬®re d'attente active jusqu'√É¬† la fin compl√É¬®te du processus
                    console.log(`√∞≈∏≈Ω¬Ø [AVMuteCheck] Projecteur op√É¬©rationnel - Continuer avec la s√É¬©quence normale`);
                    
                    // √¢≈ì‚Ä¶ La banni√É¬®re d'attente sera masqu√É¬©e par la logique principale quand tout sera termin√É¬©
                }
                
                            } catch (error) {
                console.log(`√¢≈°¬†√Ø¬∏¬è [AVMuteCheck] Erreur v√É¬©rification AV Mute: ${error.message}`);
            }
        }
        
        // √¢≈ì‚Ä¶ FONCTION DE TEST MANUAL (temporaire)
        window.testAVMute = function() {
            const room = getCurrentRoom();
            if (room) {
                console.log(`√∞≈∏¬ß¬™ [TEST] Test manuel AV Mute pour ${room}`);
                checkAndFixAVMuteStatus(room, `PROJ-${room}`);
            } else {
                console.log(`√¢¬ù≈í [TEST] Aucune salle s√É¬©lectionn√É¬©e`);
            }
        }

        // √¢≈ì‚Ä¶ NOUVELLE FONCTION DE TEST : V√É¬©rifier banni√É¬®re d'attente
        window.testWaitingBanner = function() {
            console.log(`√∞≈∏¬ß¬™ [TEST] Test banni√É¬®re d'attente`);
            showWaitingBanner('√∞≈∏¬ß¬™ Test banni√É¬®re d\'attente', 'Ceci est un test de la banni√É¬®re orange');
            
            // Masquer automatiquement apr√É¬®s 5 secondes
            setTimeout(() => {
                hideWaitingBanner();
                console.log(`√¢≈ì‚Ä¶ [TEST] Banni√É¬®re d'attente masqu√É¬©e automatiquement`);
            }, 5000);
        }

        // √¢≈ì‚Ä¶ NOUVELLE FONCTION DE TEST : V√É¬©rifier √É¬©tat complet projecteur
        window.testProjectorStatus = async function() {
            const room = getCurrentRoom();
            if (!room) {
                console.log(`√¢¬ù≈í [TEST] Aucune salle s√É¬©lectionn√É¬©e`);
                return;
            }
            
            console.log(`√∞≈∏¬ß¬™ [TEST] Test √É¬©tat complet projecteur pour ${room}`);
            
            try {
                // Test 1: Power status
                console.log(`√∞≈∏‚Äù≈í [TEST] Test endpoint power-status...`);
                const powerResponse = await fetch(`${API_BASE_URL}/api/pjlink/power-status?device=PROJ-${room}`);
                if (powerResponse.ok) {
                    const powerData = await powerResponse.json();
                    console.log(`√¢≈ì‚Ä¶ [TEST] Power status:`, powerData);
                } else {
                    console.log(`√¢¬ù≈í [TEST] Power status non disponible: ${powerResponse.status}`);
                }
                
                // Test 2: AV Mute status
                console.log(`√∞≈∏‚Äù‚Ä° [TEST] Test endpoint av-mute-status...`);
                const avMuteResponse = await fetch(`${API_BASE_URL}/api/pjlink/av-mute-status?device=PROJ-${room}`);
                if (avMuteResponse.ok) {
                    const avMuteData = await avMuteResponse.json();
                    console.log(`√¢≈ì‚Ä¶ [TEST] AV Mute status:`, avMuteData);
                } else {
                    console.log(`√¢¬ù≈í [TEST] AV Mute status non disponible: ${avMuteResponse.status}`);
                }
                
            } catch (error) {
                console.log(`√¢¬ù≈í [TEST] Erreur test: ${error.message}`);
            }
        }

        // √¢≈ì‚Ä¶ NOUVELLE FONCTION DE TEST : Forcer masquage banni√É¬®re d'attente
        window.forceHideWaitingBanner = function() {
            console.log(`√∞≈∏¬ß¬™ [TEST] For√É¬ßage masquage banni√É¬®re d'attente`);
            hideWaitingBanner();
            console.log(`√¢≈ì‚Ä¶ [TEST] Banni√É¬®re d'attente forc√É¬©ment masqu√É¬©e`);
        }

        /**
         * Traite la r√É¬©ponse du backend (comme dans l'original)
         */
        function processResponse(data) {
            if (!data) return;

            console.log('√∞≈∏‚Äú¬• [Frontend] R√É¬©ponse re√É¬ßue:', data);
            
            // √¢≈ì‚Ä¶ GESTION INTELLIGENTE du timer d'escalade selon la r√É¬©ponse
            if (data.auto_executed) {
                // Action corrective prise √¢‚Ä†‚Äô Annuler le timer car probl√É¬®me potentiellement r√É¬©solu
                console.log('√¢≈ì‚Ä¶ [EscalationTimeout] Action automatique ex√É¬©cut√É¬©e - Timer annul√É¬© (probl√É¬®me corrig√É¬©)');
                clearEscalationTimeout();
            } else {
                // Pas d'action corrective √¢‚Ä†‚Äô Garder le timer pour escalade si besoin
                console.log('√¢¬è¬∞ [EscalationTimeout] Aucune action automatique - Timer maintenu pour escalade √É¬©ventuelle');
            }
            
            // √¢≈ì‚Ä¶ CORRECTION CRITIQUE : EX√É‚Ä∞CUTION AUTOMATIQUE DES ACTIONS (comme assistant-salle-av-copie.html)
            if (data.auto_executed && data.actions && data.actions.length > 0) {
                console.log('√∞≈∏‚Äù‚Äû [ProcessResponse] Ex√É¬©cution automatique des actions re√É¬ßues');
                setTimeout(() => {
                    executeAutoActions(data.actions);
                }, 1000); // Attendre 1 seconde pour que le message soit affich√É¬©
            }
            
                            // √¢≈ì‚Ä¶ Si action r√É¬©ussie, incr√É¬©menter compteur et v√É¬©rifier AV Mute
                if (data.auto_executed && data.auto_result && data.auto_result.includes('√¢≈ì‚Ä¶')) {
                    console.log('√∞≈∏≈Ω¬Ø [ProcessResponse] Action r√É¬©ussie - Incr√É¬©menter compteur de corrections');
                    
                    // Incr√É¬©menter le compteur de corrections pour adapter le message suivant
                    const currentRoom = getCurrentRoom();
                    if (currentRoom) {
                        const sessionCorrections = sessionStorage.getItem(`corrections_${currentRoom}`) || '0';
                        const nbCorrections = parseInt(sessionCorrections);
                        sessionStorage.setItem(`corrections_${currentRoom}`, `${nbCorrections + 1}`);
                        console.log(`√∞≈∏‚Äú≈† [ProcessResponse] Corrections pour ${currentRoom}: ${nbCorrections + 1}`);
                        
                        // √¢≈ì‚Ä¶ FORCER V√É‚Ä∞RIFICATION AV MUTE apr√É¬®s action r√É¬©ussie
                        if (data.auto_result.includes('Allumer')) {
                            console.log('√∞≈∏‚Äù‚Ä° [ProcessResponse] Action allumage d√É¬©tect√É¬©e - V√É¬©rification AV Mute dans 3s');
                            setTimeout(async () => {
                                await checkAndFixAVMuteStatus(currentRoom, `PROJ-${currentRoom}`);
                            }, 3000); // 3 secondes pour stabilisation
                        }
                    }
                }
                
                // √¢≈ì‚Ä¶ CORRECTION : G√É¬©rer le cas o√É¬π auto_executed est true mais actions est vide (action d√É¬©j√É¬† ex√É¬©cut√É¬©e c√É¬¥t√É¬© serveur)
            if (data.auto_executed && (!data.actions || data.actions.length === 0)) {
                console.log('√∞≈∏‚Äù‚Äû [ProcessResponse] Action d√É¬©j√É¬† ex√É¬©cut√É¬©e c√É¬¥t√É¬© serveur - MASQUER BANNI√ÉÀÜRE D\'ATTENTE');
                
                // √¢≈ì‚Ä¶ ANNULER IMM√É‚Ä∞DIATEMENT le timer d'escalade car action d√É¬©j√É¬† ex√É¬©cut√É¬©e
                clearEscalationTimeout();
                console.log('√∞≈∏≈°¬´ [ProcessResponse] Timer escalade annul√É¬© - Action d√É¬©j√É¬† ex√É¬©cut√É¬©e c√É¬¥t√É¬© serveur');
                
                // √¢≈ì‚Ä¶ MASQUER LA BANNI√ÉÀÜRE D'ATTENTE apr√É¬®s un d√É¬©lai minimum (adaptatif selon le type d'action)
                const bannerStartTime = window.waitingBannerStartTime || Date.now();
                const elapsedTime = Date.now() - bannerStartTime;
                
                // √¢≈ì‚Ä¶ CORRECTION : D√É¬©lai adaptatif selon le type d'action
                let minimumTime = 5000; // Par d√É¬©faut 5 secondes
                
                // Pour les projecteurs, attendre plus longtemps pour l'allumage complet
                if (data.solutions && data.solutions.some(sol => 
                    sol.actions && sol.actions.some(act => act.type === 'pjlink_power')
                )) {
                    minimumTime = 15000; // 15 secondes minimum pour les projecteurs
                    console.log(`√∞≈∏‚Äù≈í [ProcessResponse] Action projecteur d√É¬©tect√É¬©e - D√É¬©lai minimum √É¬©tendu √É¬† ${minimumTime}ms`);
                }
                
                const remainingTime = Math.max(0, minimumTime - elapsedTime);
                console.log(`√¢¬è¬≥ [ProcessResponse] Banni√É¬®re affich√É¬©e depuis ${elapsedTime}ms, masquer dans ${remainingTime}ms`);
                
                setTimeout(() => {
                    hideWaitingBanner();
                    console.log('√¢≈ì‚Ä¶ [ProcessResponse] Banni√É¬®re d\'attente masqu√É¬©e apr√É¬®s action serveur');
                    
                    // √¢≈ì‚Ä¶ AFFICHER BANNI√ÉÀÜRE SUCC√ÉÀÜS APR√ÉÀÜS masquage banni√É¬®re d'attente
                    setTimeout(() => {
                        showAutoActionResult(
                            { 
                                type: 'auto_correction', 
                                description: 'Correction automatique termin√É¬©e' 
                            }, 
                            { 
                                success: true, 
                                message: 'Probl√É¬®me r√É¬©solu automatiquement par le syst√É¬®me !' 
                            }
                        );
                    }, 500);
                }, remainingTime);
                
                return; // √¢≈ì‚Ä¶ STOPPER le traitement pour √É¬©viter escalade
            }
            
            // √∞≈∏‚Äù¬ç DEBUG: Analyser les actions pour comprendre pourquoi l'escalade ne se d√É¬©clenche pas
            if (data.actions && data.actions.length > 0) {
                console.log('√∞≈∏‚Äù¬ç [DEBUG] Actions trouv√É¬©es:');
                data.actions.forEach((action, index) => {
                    console.log(`  ${index}: Type: ${action.type}, Command: ${action.command}, Label: ${action.label}`);
                    console.log(`      Description: ${action.description}`);
                });
            }

            // √¢≈ì‚Ä¶ LOGIQUE PROFESSIONNELLE AM√É‚Ä∞LIOR√É‚Ä∞E : D√É¬©tecter "Tout fonctionne mais client insiste"
            const hasOnlyEscalationActions = data.actions && data.actions.length > 0 && 
                                           data.actions.every(action => 
                                               action.type === 'create_sea_ticket' || 
                                               action.command === 'create_ticket' ||
                                               action.label?.includes('Ticket SEA') ||
                                               action.label?.includes('Escalade')
                                           );
            
            // √¢≈ì‚Ä¶ NOUVELLE LOGIQUE: Actions techniques non auto-ex√É¬©cut√É¬©es = √É¬©quipements fonctionnels
            const hasTechnicalActionsNotExecuted = data.actions && data.actions.length > 0 && 
                                                  data.actions.some(action => 
                                                      (action.type === 'pjlink_power' || 
                                                       action.type === 'pjlink_av_mute' || 
                                                       action.type === 'sennheiser_mute') && 
                                                      !data.auto_executed
                                                  );
            
            // √¢≈ì‚Ä¶ ESCALADE SIMPLIFI√É‚Ä∞E : Si pas d'auto-correction, escalade directe imm√É¬©diate
            if ((data.intent === 'video_problem' || data.intent === 'audio_problem') && 
                !data.auto_executed) {
                
                const problemType = data.intent === 'video_problem' ? 'vid√É¬©o' : 'audio';
                console.log(`√∞≈∏≈Ω¬Ø [EscaladeDirecte] Probl√É¬®me ${problemType.toUpperCase()} sans correction automatique √¢‚Ä†‚Äô ESCALADE IMM√É‚Ä∞DIATE`);
                
                // √¢≈ì‚Ä¶ CORRECTION: V√É¬©rifier les tickets existants AVANT d'afficher la banni√É¬®re SEA
                const currentRoom = getCurrentRoom();
                if (hasExistingTicket(currentRoom)) {
                    const lastTicket = getLastSessionTicket(currentRoom);
                    console.log(`√∞≈∏≈Ω¬´ [TicketExistant] Ticket d√É¬©j√É¬† cr√É¬©√É¬© ${lastTicket.number} √¢‚Ä†‚Äô Affichage banni√É¬®re ticket existant au lieu de SEA`);
                    showExistingTicketBanner(lastTicket);
                    clearEscalationTimeout();
                    return;
                }
                
                // Annuler le timer car on escalade maintenant
                clearEscalationTimeout();
                
                showSEAEscalationBanner({
                    intent: data.intent,
                    confidence: 0.9,
                    room: currentRoom,
                    escalation_needed: true,
                    escalation_reason: `Probl√É¬®me ${problemType} signal√É¬© - Intervention technique requise`
                });
                return; // √¢≈ì‚Ä¶ STOP - Escalade directe sans message
            }

            // √¢≈ì‚Ä¶ LOGIQUE SIMPLIFI√É‚Ä∞E FINALE : Plus de traitement complexe
            // Stocker juste le contexte pour les tickets si besoin
            latestRAGContext = data.rag_context || data;

            // √¢≈ì‚Ä¶ LOGIQUE SIMPLIFI√É‚Ä∞E : Supprimer TOUS les messages de diagnostic en bas
            // L'utilisateur veut seulement : Correction automatique OU escalade directe
            // Pas de messages interm√É¬©diaires "diagnostic", "probl√É¬®me mineur", etc.
            
            console.log('√∞≈∏≈°¬´ [ProcessResponse] TOUS les messages de diagnostic supprim√É¬©s - Logique binaire uniquement');
            // Plus de messages en bas du chat - Banni√É¬®res uniquement
        }

        /**
         * D√É¬©termine la raison de l'escalade (comme dans l'original)
         */
        function determineEscalationReason(data, escalationActions) {
            if (escalationActions.length > 0) {
                return "Le syst√É¬®me recommande de cr√É¬©er un ticket SEA pour ce probl√É¬®me.";
            }
            if (data.confidence && data.confidence < 0.6) {
                return "Le syst√É¬®me n'est pas s√É¬ªr de pouvoir r√É¬©soudre ce probl√É¬®me automatiquement.";
            }
            if (data.solutions && data.solutions.length === 0 && data.problems && data.problems.length > 0) {
                return "Aucune solution automatique n'a √É¬©t√É¬© trouv√É¬©e pour ce probl√É¬®me.";
            }
            return "Une intervention technique pourrait √É¬™tre n√É¬©cessaire.";
        }

        /**
         * Affiche √É¬† nouveau les palettes de probl√É¬®mes
         */
        function showProblemPalettes() {
            const problemPalettes = document.getElementById('problemPalettes');
            const assistantResponse = document.getElementById('assistantResponse');
            
            // Afficher les palettes
            if (problemPalettes) {
                problemPalettes.style.display = 'block';
            }
            
            // Supprimer la r√É¬©ponse de l'assistant
            if (assistantResponse) {
                assistantResponse.remove();
            }
            
            // Supprimer tous les r√É¬©sultats d'actions automatiques
            const autoResults = document.querySelectorAll('.auto-result');
            autoResults.forEach(result => result.remove());
            
            // Supprimer toutes les interfaces d'escalade
            const escalationInterfaces = document.querySelectorAll('.escalation-interface');
            escalationInterfaces.forEach(interface => interface.remove());
        }

        /**
         * Ex√É¬©cute les actions automatiques
         */
        async function executeAutoActions(actions) {
            // √¢≈ì‚Ä¶ AFFICHER BANNI√ÉÀÜRE D'ATTENTE ORANGE pendant ex√É¬©cution des actions
            showWaitingBanner('√∞≈∏‚Äù¬ß Ex√É¬©cution des corrections...', 'Veuillez patienter pendant l\'application des solutions');
            
            for (const action of actions) {
                try {
                    console.log(`√∞≈∏‚Äù‚Äû Ex√É¬©cution action automatique: ${action.type}`);
                    
                    // √¢≈ì‚Ä¶ Mettre √É¬† jour le message de la banni√É¬®re selon l'action
                    if (action.type === 'pjlink_power') {
                        showWaitingBanner('√∞≈∏‚Äù≈í Allumage du projecteur...', 'D√É¬©marrage en cours, veuillez patienter');
                    } else if (action.type === 'pjlink_av_unmute') {
                        showWaitingBanner('√∞≈∏‚Äù¬ß Correction AV Mute...', 'D√É¬©sactivation du mode muet sur le projecteur');
                    }
                    
                    // Ex√É¬©cuter l'action r√É¬©elle selon son type
                    let result;
                    switch (action.type) {
                        case 'sennheiser_mute':
                            result = await executeAction('sennheiser_mute', action.device_id, {
                                host: action.device_name || action.host,
                                mute: action.mute
                            });
                            break;
                            
                        case 'pjlink_power':
                            result = await executeAction('pjlink_power', action.device_id, {
                                device_name: action.device_name,
                                power_on: action.power_on
                            });
                            break;
                            
                        case 'pjlink_av_unmute':
                            result = await executeAction('pjlink_av_mute', action.device_id, {
                                device_name: action.device_name,
                                video_mute: action.video_mute,
                                audio_mute: action.audio_mute
                            });
                            break;
                            
                        default:
                            console.warn(`Type d'action non reconnu: ${action.type}`);
                            result = { success: true, message: 'Action simul√É¬©e' };
                    }
                    
                    // Afficher le r√É¬©sultat dans une banni√É¬®re de succ√É¬®s
                    if (result && result.success) {
                        showAutoActionResult(action, result);
                    }
                    
                } catch (error) {
                    console.error(`Erreur lors de l'ex√É¬©cution de l'action ${action.type}:`, error);
                    showAutoActionResult(action, { success: false, message: error.message });
                }
            }
            
            // √¢≈ì‚Ä¶ MASQUER BANNI√ÉÀÜRE D'ATTENTE apr√É¬®s toutes les actions termin√É¬©es
            hideWaitingBanner();
            
            // Retour automatique √É¬† l'accueil apr√É¬®s toutes les actions
            setTimeout(() => {
                console.log('√∞≈∏‚Äù‚Äû [AutoActions] Retour automatique √É¬† l\'accueil apr√É¬®s actions compl√É¬®tes');
                returnToHome();
            }, 3000);
        }

        /**
         * Affiche le r√É¬©sultat d'une action automatique
         */
        function showAutoActionResult(action, result) {
            console.log(`√∞≈∏‚Äú≈† [AutoActionResult] ${action.type}: ${result.success ? 'SUCC√ÉÀÜS' : '√É‚Ä∞CHEC'} - ${result.message}`);
            
            if (result.success) {
                // √¢≈ì‚Ä¶ CORRECTION : Annuler le timer d'escalade car probl√É¬®me r√É¬©solu automatiquement
                clearEscalationTimeout();
                console.log('√∞≈∏≈°¬´ [EscalationTimeout] Timer d\'escalade annul√É¬© suite √É¬† correction automatique r√É¬©ussie');
                
                // √¢≈ì‚Ä¶ BANNI√ÉÀÜRE INTERACTIVE DE CORRECTION avec question OUI/NON
                showInteractiveCorrectionBanner(action, result);
            } else {
                // √¢¬ù≈í Petite banni√É¬®re d'erreur (droite)
                const bannerDiv = document.createElement('div');
                bannerDiv.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: linear-gradient(135deg, #f44336 0%, #d32f2f 100%);
                    color: white;
                    padding: 1rem 1.5rem;
                    border-radius: 10px;
                    z-index: 9999;
                    box-shadow: 0 4px 20px rgba(0,0,0,0.3);
                    animation: slideInRight 0.3s ease-out;
                    max-width: 400px;
                    font-size: 0.9rem;
                    line-height: 1.4;
                `;
                
                bannerDiv.innerHTML = `
                    <div style="display: flex; align-items: center; gap: 0.5rem;">
                        <span style="font-size: 1.2rem;">√¢¬ù≈í</span>
                        <span><strong>${action.description || action.type}</strong></span>
                    </div>
                    <div style="margin-top: 0.5rem; opacity: 0.9; font-size: 0.85rem;">
                        ${result.message || 'Erreur lors de l\'ex√É¬©cution'}
                    </div>
                `;
                
                document.body.appendChild(bannerDiv);
                
                // Supprimer automatiquement apr√É¬®s 4 secondes
                setTimeout(() => {
                    if (bannerDiv.parentNode) {
                        bannerDiv.style.animation = 'slideOutRight 0.3s ease-in';
                        setTimeout(() => bannerDiv.remove(), 300);
                    }
                }, 4000);
            }
        }

        /**
         * √¢≈ì‚Ä¶ NOUVELLE FONCTION : Banni√É¬®re interactive de correction avec question OUI/NON
         */
        function showInteractiveCorrectionBanner(action, result) {
            console.log(`√∞≈∏≈Ω¬Ø [InteractiveCorrection] Affichage banni√É¬®re interactive: ${action.description}`);
            
            // √¢≈ì‚Ä¶ NOUVEAU : Masquer l'overlay de chargement AU MOMENT EXACT d'afficher la banni√É¬®re
            hideDiagnosticLoading();
            
            const bannerId = `interactive-correction-${Date.now()}`;
            
            // Cr√É¬©er l'overlay plein √É¬©cran avec flou
            const overlayDiv = document.createElement('div');
            overlayDiv.id = `overlay-${bannerId}`;
            overlayDiv.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.7);
                backdrop-filter: blur(10px);
                -webkit-backdrop-filter: blur(10px);
                z-index: 9998;
                cursor: pointer;
            `;
            
            // Cr√É¬©er la banni√É¬®re interactive avec style moderne
            const bannerDiv = document.createElement('div');
            bannerDiv.id = bannerId;
            bannerDiv.style.cssText = `
                background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
                color: white;
                border-radius: 16px;
                padding: 2.5rem;
                text-align: center;
                box-shadow: 0 25px 50px rgba(76, 175, 80, 0.4);
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 9999;
                width: 90%;
                max-width: 600px;
                animation: fadeIn 0.4s ease-out;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            `;
            
            bannerDiv.innerHTML = `
                <div style="font-size: 4rem; margin-bottom: 1.5rem;">√¢≈ì‚Ä¶</div>
                <h2 style="margin: 0 0 1rem 0; font-size: 1.8rem; font-weight: 600;">Correction automatique termin√É¬©e !</h2>
                
                <div style="background: rgba(255,255,255,0.15); padding: 1.5rem; border-radius: 12px; margin: 2rem 0;">
                    <p style="margin: 0.5rem 0; font-size: 1.1rem;"><strong>√∞≈∏‚Äù¬ß Action effectu√É¬©e :</strong> ${action.description || 'Correction automatique'}</p>
                    <p style="margin: 0.5rem 0; font-size: 1.1rem;"><strong>√∞≈∏¬è¬¢ Salle :</strong> ${getCurrentRoom()}</p>
                    <p style="margin: 0.5rem 0; font-size: 1.1rem;"><strong>√∞≈∏‚Äú¬ù D√É¬©tails :</strong> ${result.message || 'Probl√É¬®me r√É¬©solu automatiquement'}</p>
                </div>
                
                <div style="margin: 2rem 0;">
                    <h3 style="margin: 0 0 1.5rem 0; font-size: 1.4rem; font-weight: 500;">Votre probl√É¬®me est-il r√É¬©gl√É¬© ?</h3>
                    
                    <div style="display: flex; gap: 1rem; justify-content: center; flex-wrap: wrap;">
                        <button id="btn-oui-${bannerId}" style="
                            background: linear-gradient(135deg, #2196F3 0%, #1976D2 100%);
                            color: white;
                            border: none;
                            padding: 1rem 2rem;
                            border-radius: 12px;
                            font-size: 1.1rem;
                            font-weight: 600;
                            cursor: pointer;
                            transition: all 0.3s ease;
                            box-shadow: 0 4px 15px rgba(33, 150, 243, 0.3);
                            min-width: 120px;
                        " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                            √¢≈ì‚Ä¶ OUI
                        </button>
                        
                        <button id="btn-non-${bannerId}" style="
                            background: linear-gradient(135deg, #FF9800 0%, #F57C00 100%);
                            color: white;
                            border: none;
                            padding: 1rem 2rem;
                            border-radius: 12px;
                            font-size: 1.1rem;
                            font-weight: 600;
                            cursor: pointer;
                            transition: all 0.3s ease;
                            box-shadow: 0 4px 15px rgba(255, 152, 0, 0.3);
                            min-width: 120px;
                        " onmouseover="this.style.transform='scale(1.05)'" onmouseout="this.style.transform='scale(1)'">
                            √¢¬ù≈í NON
                        </button>
                    </div>
                </div>
                
                <div style="margin-top: 1.5rem; opacity: 0.8; font-size: 0.9rem;">
                    Cliquez sur OUI si le probl√É¬®me est r√É¬©solu, ou NON pour demander une intervention technique
                </div>
            `;
            
            document.body.appendChild(overlayDiv);
            document.body.appendChild(bannerDiv);
            
            // √¢≈ì‚Ä¶ GESTION CLIC BOUTON OUI
            const btnOui = document.getElementById(`btn-oui-${bannerId}`);
            if (btnOui) {
                btnOui.addEventListener('click', () => {
                console.log('√¢≈ì‚Ä¶ [InteractiveCorrection] Utilisateur confirme - Probl√É¬®me r√É¬©solu');
                
                // Masquer la banni√É¬®re avec animation
                bannerDiv.style.animation = 'fadeOut 0.3s ease-in';
                overlayDiv.style.animation = 'fadeOut 0.3s ease-in';
                
                setTimeout(() => {
                    if (bannerDiv.parentNode) bannerDiv.parentNode.removeChild(bannerDiv);
                    if (overlayDiv.parentNode) overlayDiv.parentNode.removeChild(overlayDiv);
                }, 300);
                
                // Retour √É¬† l'accueil
                setTimeout(() => {
                    returnToHome();
                }, 500);
                });
            }
            
            // √¢≈ì‚Ä¶ GESTION CLIC BOUTON NON
            const btnNon = document.getElementById(`btn-non-${bannerId}`);
            if (btnNon) {
                btnNon.addEventListener('click', () => {
                console.log('√¢¬ù≈í [InteractiveCorrection] Utilisateur confirme - Probl√É¬®me persiste');
                
                // Masquer la banni√É¬®re interactive
                bannerDiv.style.animation = 'fadeOut 0.3s ease-in';
                overlayDiv.style.animation = 'fadeOut 0.3s ease-in';
                
                setTimeout(() => {
                    if (bannerDiv.parentNode) bannerDiv.parentNode.removeChild(bannerDiv);
                    if (overlayDiv.parentNode) overlayDiv.parentNode.removeChild(overlayDiv);
                }, 300);
                
                // √¢≈ì‚Ä¶ AFFICHER BANNI√ÉÀÜRE ESCALADE apr√É¬®s masquage
                setTimeout(() => {
                    const currentRoom = getCurrentRoom();
                    showSEAEscalationBanner({
                        intent: 'video_problem',
                        confidence: 0.9,
                        room: currentRoom,
                        escalation_needed: true,
                        escalation_reason: `Probl√É¬®me persiste apr√É¬®s correction automatique - Intervention technique requise`
                    });
                }, 500);
                });
            }
            
            // √¢≈ì‚Ä¶ GESTION CLIC OVERLAY (fermeture)
            overlayDiv.addEventListener('click', (e) => {
                if (e.target === overlayDiv) {
                    console.log('√∞≈∏‚Äù‚Äû [InteractiveCorrection] Fermeture par clic overlay');
                    
                    bannerDiv.style.animation = 'fadeOut 0.3s ease-in';
                    overlayDiv.style.animation = 'fadeOut 0.3s ease-in';
                    
                    setTimeout(() => {
                        if (bannerDiv.parentNode) bannerDiv.parentNode.removeChild(bannerDiv);
                        if (overlayDiv.parentNode) overlayDiv.parentNode.removeChild(overlayDiv);
                    }, 300);
                }
            });
        }

        // ======================== BANNIERE D'ATTENTE ORANGE ========================
        function showWaitingBanner(title, subtitle) {
            console.log(`√¢¬è¬≥ [WaitingBanner] Affichage banni√É¬®re d'attente: ${title}`);
            
            // √¢≈ì‚Ä¶ CORRECTION : Masquer le sablier diagnostic car banni√É¬®re d'attente prend le relais
            hideDiagnosticLoading();
            console.log('√¢≈ì‚Ä¶ [WaitingBanner] Sablier diagnostic masqu√É¬© - Banni√É¬®re d\'attente prend le relais');
            
            // Supprimer toute banni√É¬®re d'attente existante
            hideWaitingBanner();
            
            const banner = document.createElement('div');
            banner.id = 'waiting-banner';
            banner.className = 'waiting-banner-overlay';
            
            banner.innerHTML = `
                <div class="waiting-banner-content">
                    <div class="waiting-banner-icon">
                        <div class="waiting-spinner"></div>
                    </div>
                    <h2 class="waiting-banner-title">${title}</h2>
                    <p class="waiting-banner-subtitle">${subtitle}</p>
                    <div class="waiting-progress-bar">
                        <div class="waiting-progress-fill"></div>
                    </div>
                </div>
            `;
            
            document.body.appendChild(banner);
            
            // Animation d'entr√É¬©e
            setTimeout(() => {
                banner.classList.add('visible');
            }, 50);
        }
        
        function hideWaitingBanner() {
            const existingBanner = document.getElementById('waiting-banner');
            if (existingBanner) {
                console.log(`√∞≈∏≈°¬´ [WaitingBanner] Masquage banni√É¬®re d'attente`);
                existingBanner.classList.add('fade-out');
                setTimeout(() => {
                    if (existingBanner.parentNode) {
                        existingBanner.parentNode.removeChild(existingBanner);
                    }
                }, 300);
            }
        }

        /**
         * Affiche une banni√É¬®re de succ√É¬®s plein √É¬©cran (style SEA mais verte)
         */
        function showSuccessBanner(action, result) {
            const confirmationId = `success_${Date.now()}`;
            
            // Cr√É¬©er l'overlay plein √É¬©cran avec flou agressif
            const overlayDiv = document.createElement('div');
            overlayDiv.id = `overlay_${confirmationId}`;
            overlayDiv.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(20px);
                -webkit-backdrop-filter: blur(20px);
                z-index: 9998;
                cursor: pointer;
            `;
            
            // Cr√É¬©er la banni√É¬®re de succ√É¬®s avec style moderne
            const successDiv = document.createElement('div');
            successDiv.id = confirmationId;
            successDiv.style.cssText = `
                background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
                color: white;
                border-radius: 12px;
                padding: 2rem;
                text-align: center;
                box-shadow: 0 20px 40px rgba(76, 175, 80, 0.4);
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 9999;
                width: 90%;
                max-width: 500px;
                animation: fadeIn 0.3s ease-out;
            `;
            
            successDiv.innerHTML = `
                <div style="font-size: 3rem; margin-bottom: 1rem;">√¢≈ì‚Ä¶</div>
                <h3 style="margin: 0 0 1rem 0; font-size: 1.5rem; font-weight: 600;">Probl√É¬®me r√É¬©solu automatiquement !</h3>
                <div style="background: rgba(255,255,255,0.15); padding: 1.25rem; border-radius: 10px; margin: 1.5rem 0;">
                    <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>√∞≈∏‚Äù¬ß Action :</strong> ${action.description || 'Correction automatique'}</p>
                    <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>√∞≈∏¬è¬¢ Salle :</strong> ${getCurrentRoom()}</p>
                    <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>√¢≈°¬° Statut :</strong> Corrig√É¬© en temps r√É¬©el</p>
                </div>
                <p style="margin: 1.5rem 0; opacity: 0.95; font-size: 1rem; line-height: 1.4;">
                    ${result.message || 'Le syst√É¬®me a d√É¬©tect√É¬© et corrig√É¬© automatiquement le probl√É¬®me. Aucune intervention manuelle n√É¬©cessaire !'}
                </p>
                <button onclick="closeSuccessBanner('${confirmationId}')" style="
                    background: rgba(255,255,255,0.2);
                    border: 1px solid rgba(255,255,255,0.4);
                    color: white;
                    padding: 0.85rem 2rem;
                    border-radius: 8px;
                    cursor: pointer;
                    margin-top: 1rem;
                    font-size: 1rem;
                    font-weight: 500;
                    transition: all 0.3s ease;
                " onmouseover="this.style.background='rgba(255,255,255,0.3)'" onmouseout="this.style.background='rgba(255,255,255,0.2)'">
                    √∞≈∏≈Ω‚Ä∞ Parfait !
                </button>
            `;
            
            // Fermer au clic sur l'overlay
            overlayDiv.onclick = () => closeSuccessBanner(confirmationId);
            
            // Ajouter l'overlay et la banni√É¬®re au body
            document.body.appendChild(overlayDiv);
            document.body.appendChild(successDiv);
            
            // √¢≈ì‚Ä¶ FERMETURE AUTOMATIQUE APR√ÉÀÜS 15 SECONDES (plus visible)
            setTimeout(() => {
                closeSuccessBanner(confirmationId);
            }, 15000);
            
            console.log(`√∞≈∏≈Ω‚Ä∞ [SuccessBanner] Banni√É¬®re de succ√É¬®s affich√É¬©e pour: ${action.description}`);
        }

        /**
         * Ferme la banni√É¬®re de succ√É¬®s
         */
        function closeSuccessBanner(confirmationId) {
            const overlay = document.getElementById(`overlay_${confirmationId}`);
            const banner = document.getElementById(confirmationId);
            
            if (overlay) overlay.remove();
            if (banner) banner.remove();
            
            // Retour automatique √É¬† l'accueil apr√É¬®s fermeture
            console.log('√∞≈∏¬è¬† [SuccessBanner] Retour automatique √É¬† l\'accueil');
            returnToHome();
        }

        /**
         * Ex√É¬©cute une action sur un √É¬©quipement
         */
        async function executeAction(actionType, deviceId, parameters) {
            try {
                console.log(`√∞≈∏‚Äù‚Äû [ExecuteAction] Ex√É¬©cution de l'action : ${actionType}...`);
                
                let endpoint = '';
                let payload = {};
                
                // D√É¬©terminer l'endpoint selon le type d'action
                switch (actionType) {
                    case 'sennheiser_mute':
                        endpoint = '/api/device-action/sennheiser/set-mute';
                        payload = {
                            host: parameters.host || parameters.device_name,
                            mute: parameters.mute
                        };
                        break;
                    
                    case 'pjlink_power':
                        endpoint = '/api/device-action/pjlink/power';
                        payload = {
                            device_name: parameters.device_name,
                            power_on: parameters.power_on
                        };
                        break;
                    
                    case 'pjlink_av_mute':
                        endpoint = '/api/device-action/pjlink/av-mute';
                        payload = {
                            device_name: parameters.device_name,
                            video_mute: parameters.video_mute || false,
                            audio_mute: parameters.audio_mute || false
                        };
                        break;
                        
                    case 'pjlink_av_unmute':
                        // √¢≈ì‚Ä¶ CORRECTION JUMEL√É‚Ä∞E : Traitement sp√É¬©cial pour AV Mute invisible + banni√É¬®re
                        try {
                            const response = await fetch(`${API_BASE_URL}/api/device/public/av-mute/${parameters.device_name}`, {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' }
                            });
                            
                            if (response.ok) {
                                const result = await response.json();
                                console.log(`√¢≈ì‚Ä¶ [ExecuteAction] AV Mute d√É¬©sactiv√É¬© avec succ√É¬®s sur ${parameters.device_name}`);
                                
                                // √¢≈ì‚Ä¶ SIMULATION : Cr√É¬©er une r√É¬©ponse comme si c'√É¬©tait auto-ex√É¬©cut√É¬© par le RAG
                                return {
                                    success: true,
                                    auto_executed: true, // √¢≈ì‚Ä¶ MARQUER comme auto-ex√É¬©cut√É¬©
                                    auto_result: `√¢≈ì‚Ä¶ AV Mute d√É¬©sactiv√É¬© automatiquement sur ${parameters.device_name}`,
                                    simulated_rag_response: true
                                };
                            } else {
                                throw new Error(`Erreur HTTP ${response.status}`);
                            }
                        } catch (error) {
                            console.error(`√¢¬ù≈í [ExecuteAction] Erreur AV Mute pour ${parameters.device_name}:`, error);
                            throw error;
                        }
                        return; // √É‚Ä∞viter l'ex√É¬©cution du code standard
                        
                    default:
                        throw new Error(`Type d'action non support√É¬©: ${actionType}`);
                }
                
                // Ex√É¬©cuter l'action
                const response = await fetch(`${API_BASE_URL}${endpoint}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(payload)
                });
                
                if (!response.ok) {
                    throw new Error(`Erreur HTTP: ${response.status}`);
                }
                
                const result = await response.json();
                
                if (result.success) {
                    console.log(`√¢≈ì‚Ä¶ [ExecuteAction] Action ex√É¬©cut√É¬©e avec succ√É¬®s: ${result.message}`);
                    
                    // √¢≈ì‚Ä¶ NOUVEAU: Logique s√É¬©quentielle pour allumage de projecteur
                    if (actionType === 'pjlink_power' && parameters.power_on === true) {
                        const deviceName = parameters.device_name || 'Projecteur';
                        console.log(`√¢¬è¬±√Ø¬∏¬è [SequentialLogic] Allumage d√É¬©tect√É¬© pour ${deviceName} - D√É¬©marrage banni√É¬®re d'attente`);
                        
                        // Afficher la banni√É¬®re d'attente avec s√É¬©quence compl√É¬®te
                        showSequentialProjectorBanner(deviceName, 'power_on', {
                            maxDuration: 35,
                            checkAfterPowerOn: true
                        });
                    }
                    
                    return result;
                } else {
                    throw new Error(result.message || '√É‚Ä∞chec de l\'ex√É¬©cution');
                }
                
            } catch (error) {
                console.error('√¢¬ù≈í [ExecuteAction] Erreur lors de l\'ex√É¬©cution de l\'action:', error);
                throw error;
            }
        }

        /**
         * √¢≈ì‚Ä¶ NOUVEAU: Affiche une banni√É¬®re d'attente pour l'allumage de projecteur
         */
        function showSequentialProjectorBanner(deviceName, actionType, options = {}) {
            const bannerId = `seq_projector_${Date.now()}`;
            console.log(`√∞≈∏≈Ω¬¨ [SequentialBanner] D√É¬©marrage banni√É¬®re ${actionType} pour ${deviceName}`);
            
            // Supprimer les banni√É¬®res existantes
            document.querySelectorAll('.sequential-banner-overlay').forEach(banner => banner.remove());
            
            // Configuration selon le type d'action
            const config = getSequentialBannerConfig(actionType, deviceName, options);
            
            // Cr√É¬©er l'overlay
            const overlayDiv = document.createElement('div');
            overlayDiv.id = `overlay_${bannerId}`;
            overlayDiv.className = 'sequential-banner-overlay';
            overlayDiv.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.9);
                backdrop-filter: blur(20px);
                z-index: 9999;
                display: flex;
                align-items: center;
                justify-content: center;
            `;
            
            // Cr√É¬©er la banni√É¬®re
            const bannerDiv = document.createElement('div');
            bannerDiv.id = bannerId;
            bannerDiv.className = 'sequential-banner fade-in';
            bannerDiv.style.cssText = `
                background: ${config.background};
                border-radius: 20px;
                padding: 3rem;
                color: white;
                text-align: center;
                box-shadow: 0 30px 60px rgba(0,0,0,0.5);
                max-width: 600px;
                width: 90%;
                position: relative;
                overflow: hidden;
                border: 2px solid ${config.borderColor};
            `;
            
            bannerDiv.innerHTML = config.html;
            
            // Ajouter les animations CSS
            addSequentialBannerStyles();
            
            // Ajouter au DOM
            overlayDiv.appendChild(bannerDiv);
            document.body.appendChild(overlayDiv);
            
            // D√É¬©marrer la logique s√É¬©quentielle selon le type
            switch (actionType) {
                case 'power_on':
                    startPowerOnSequence(bannerId, deviceName, options);
                    break;
                case 'av_unmute':
                    startAVUnmuteSequence(bannerId, deviceName, options);
                    break;
                case 'monitoring':
                    startMonitoringSequence(bannerId, deviceName, options);
                    break;
            }
            
            return bannerId;
        }
        
        /**
         * √¢≈ì‚Ä¶ NOUVEAU: Configuration des banni√É¬®res selon le type d'action
         */
        function getSequentialBannerConfig(actionType, deviceName, options) {
            const configs = {
                power_on: {
                    background: 'linear-gradient(135deg, #1e40af 0%, #3b82f6 50%, #60a5fa 100%)',
                    borderColor: '#3b82f6',
                    html: `
                        <div class="sequential-content">
                            <div class="projector-icon-animated" style="font-size: 4rem; margin-bottom: 1.5rem; animation: powerBlink 1.2s infinite;">√∞≈∏‚Äú¬Ω√Ø¬∏¬è</div>
                            <h3 style="margin: 0 0 1rem 0; font-size: 1.6rem; font-weight: 700;">Allumage en cours</h3>
                            <p style="margin: 0 0 2rem 0; font-size: 1.2rem; opacity: 0.95;">Le projecteur <strong>${deviceName}</strong> d√É¬©marre...</p>
                            
                            <div class="progress-section">
                                <div class="status-text" style="font-size: 1rem; margin-bottom: 1rem; opacity: 0.8;">
                                    √∞≈∏‚Äù≈í Envoi de la commande d'allumage
                                </div>
                                
                                <div class="real-time-monitor" style="background: rgba(255,255,255,0.1); border-radius: 12px; padding: 1.5rem; margin: 1.5rem 0;">
                                    <div class="monitor-title" style="font-weight: 600; margin-bottom: 1rem;">Surveillance temps r√É¬©el</div>
                                    <div class="monitor-status" id="monitor_${deviceName}" style="font-family: monospace; font-size: 0.9rem;">
                                        √¢¬è¬≥ V√É¬©rification de l'√É¬©tat...
                                    </div>
                                </div>
                                
                                <div class="countdown-section" style="margin-top: 2rem;">
                                    <div class="countdown-timer" style="font-size: 1.1rem; font-weight: 600; color: #fbbf24;">
                                        √¢¬è¬±√Ø¬∏¬è Surveillance active - Maximum 45s
                                    </div>
                                </div>
                            </div>
                            
                            <p style="margin: 2rem 0 0 0; font-size: 0.85rem; opacity: 0.7;">
                                √¢≈°¬° Analyse automatique AV Mute apr√É¬®s allumage confirm√É¬©
                            </p>
                        </div>
                    `
                },
                av_unmute: {
                    background: 'linear-gradient(135deg, #059669 0%, #10b981 50%, #34d399 100%)',
                    borderColor: '#10b981',
                    html: `
                        <div class="sequential-content">
                            <div class="correction-icon" style="font-size: 4rem; margin-bottom: 1.5rem; animation: successPulse 1s infinite;">√¢≈ì‚Ä¶</div>
                            <h3 style="margin: 0 0 1rem 0; font-size: 1.6rem; font-weight: 700;">Correction AV Mute</h3>
                            <p style="margin: 0 0 1.5rem 0; font-size: 1.2rem; opacity: 0.95;">
                                D√É¬©sactivation AV Mute sur <strong>${deviceName}</strong>
                            </p>
                            
                            <div class="correction-progress" style="background: rgba(255,255,255,0.15); border-radius: 10px; padding: 1.5rem; margin: 1rem 0;">
                                <div style="font-weight: 600; margin-bottom: 0.5rem;">√∞≈∏‚Äù‚Ä° √¢‚Ä†‚Äô √∞≈∏‚Äú¬Ω√Ø¬∏¬è Commande envoy√É¬©e</div>
                                <div style="font-size: 0.9rem; opacity: 0.8;">L'image devrait appara√É¬Ætre imm√É¬©diatement</div>
                            </div>
                            
                            <p style="margin: 1.5rem 0 0 0; font-size: 0.85rem; opacity: 0.7;">
                                Cette banni√É¬®re se fermera automatiquement dans 3 secondes
                            </p>
                        </div>
                    `
                }
            };
            
            return configs[actionType] || configs.power_on;
        }
        
        /**
         * √¢≈ì‚Ä¶ NOUVEAU: Ajouter les styles CSS pour les banni√É¬®res s√É¬©quentielles
         */
        function addSequentialBannerStyles() {
            if (!document.getElementById('sequential-banner-styles')) {
                const style = document.createElement('style');
                style.id = 'sequential-banner-styles';
                style.textContent = `
                    @keyframes powerBlink {
                        0%, 50% { opacity: 1; transform: scale(1) rotate(0deg); }
                        25% { opacity: 0.7; transform: scale(1.15) rotate(-2deg); }
                        75% { opacity: 1; transform: scale(0.95) rotate(2deg); }
                    }
                    
                    @keyframes successPulse {
                        0%, 100% { opacity: 1; transform: scale(1); }
                        50% { opacity: 0.8; transform: scale(1.1); }
                    }
                    
                    @keyframes monitorGlow {
                        0%, 100% { box-shadow: 0 0 5px rgba(59, 130, 246, 0.3); }
                        50% { box-shadow: 0 0 15px rgba(59, 130, 246, 0.6); }
                    }
                    
                    .real-time-monitor {
                        animation: monitorGlow 2s infinite;
                    }
                `;
                document.head.appendChild(style);
            }
        }

        /**
         * √¢≈ì‚Ä¶ NOUVEAU: G√É¬®re le compte √É¬† rebours de la banni√É¬®re d'attente
         */
        function startCountdown(bannerId, totalSeconds) {
            const banner = document.getElementById(bannerId);
            if (!banner) return;
            
            const progressBar = banner.querySelector('.progress-bar');
            const countdownTimer = banner.querySelector('.countdown-timer');
            
            let remainingSeconds = totalSeconds;
            
            const interval = setInterval(() => {
                remainingSeconds--;
                
                // Mettre √É¬† jour le timer
                if (countdownTimer) {
                    countdownTimer.textContent = `${remainingSeconds}s`;
                }
                
                // Mettre √É¬† jour la barre de progression
                if (progressBar) {
                    const progress = ((totalSeconds - remainingSeconds) / totalSeconds) * 100;
                    progressBar.style.width = `${progress}%`;
                }
                
                // Fin du compte √É¬† rebours
                if (remainingSeconds <= 0) {
                    clearInterval(interval);
                    // Fermer la banni√É¬®re et v√É¬©rifier l'√É¬©tat
                    setTimeout(() => {
                        closeWaitingBanner(bannerId);
                        // √¢≈ì‚Ä¶ NOUVEAU: D√É¬©clencher une nouvelle v√É¬©rification automatique
                        recheckProjectorStatus();
                    }, 1000);
                }
            }, 1000);
            
            // Stocker l'interval pour pouvoir l'annuler si n√É¬©cessaire
            if (banner) {
                banner.dataset.intervalId = interval;
            }
        }
        
        /**
         * √¢≈ì‚Ä¶ NOUVEAU: Ferme la banni√É¬®re d'attente
         */
        function closeWaitingBanner(bannerId) {
            const banner = document.getElementById(bannerId);
            const overlay = document.getElementById(`overlay_${bannerId}`);
            
            if (banner && banner.dataset.intervalId) {
                clearInterval(parseInt(banner.dataset.intervalId));
            }
            
            if (overlay) {
                overlay.remove();
            }
        }
        
        /**
         * √¢≈ì‚Ä¶ NOUVEAU: S√É¬©quence d'allumage avec surveillance temps r√É¬©el
         */
        async function startPowerOnSequence(bannerId, deviceName, options) {
            console.log(`√∞≈∏‚Äù≈í [PowerOnSequence] D√É¬©marrage surveillance pour ${deviceName}`);
            
            const maxDuration = 45; // 45 secondes maximum
            const checkInterval = 3; // V√É¬©rifier toutes les 3 secondes
            let elapsed = 0;
            let powerOnDetected = false;
            
            const updateMonitorStatus = (status, isSuccess = false) => {
                const monitor = document.getElementById(`monitor_${deviceName}`);
                if (monitor) {
                    monitor.innerHTML = status;
                    if (isSuccess) {
                        monitor.style.color = '#10b981';
                        monitor.style.fontWeight = '600';
                    }
                }
            };
            
            const interval = setInterval(async () => {
                elapsed += checkInterval;
                
                try {
                    // V√É¬©rifier l'√É¬©tat du projecteur
                    const currentRoom = getCurrentRoom();
                    const equipmentData = await fetchRoomEquipment(currentRoom);
                    
                    // √¢≈ì‚Ä¶ CORRECTION: Utiliser equipmentData.devices (pas equipmentData directement)
                    if (!equipmentData || !equipmentData.devices || !Array.isArray(equipmentData.devices)) {
                        console.warn(`√¢≈°¬†√Ø¬∏¬è [PowerOnSequence] Donn√É¬©es √É¬©quipements invalides: ${JSON.stringify(equipmentData)}`);
                        updateMonitorStatus(`√¢≈°¬†√Ø¬∏¬è Erreur acc√É¬®s √É¬©quipements (${elapsed}s)`);
                        return;
                    }
                    
                    console.log(`√∞≈∏‚Äù¬ç [PowerOnSequence] ${equipmentData.devices.length} √É¬©quipements trouv√É¬©s en salle ${currentRoom}`);
                    
                    // Chercher le projecteur par nom complet ou partiel
                    const projector = equipmentData.devices.find(d => {
                        const deviceNameMatch = d.device_name === deviceName || 
                                              (d.device_name && d.device_name.includes(deviceName.replace('PROJ-', ''))) ||
                                              d.name === deviceName ||
                                              (d.name && d.name.includes(deviceName.replace('PROJ-', '')));
                        const isProjectorType = (d.device_model_name && d.device_model_name.toLowerCase().includes('proj')) ||
                                              (d.device_family_name && d.device_family_name.toLowerCase().includes('proj')) ||
                                              (d.name && d.name.toLowerCase().includes('proj'));
                        return deviceNameMatch || isProjectorType;
                    });
                    
                    if (projector) {
                        console.log(`√∞≈∏‚Äù¬ç [PowerOnSequence] Projecteur trouv√É¬©: ${projector.device_name || projector.name}, √É‚Ä∞tat: ${projector.status} (${elapsed}s)`);
                        
                        if (projector.status === 'online' || projector.status === 'power_on') {
                            powerOnDetected = true;
                            updateMonitorStatus('√¢≈ì‚Ä¶ Projecteur allum√É¬© - Analyse AV Mute...', true);
                            clearInterval(interval);
                            
                            // D√É¬©lai pour laisser le projecteur se stabiliser
                            setTimeout(() => {
                                startAVMuteAnalysis(bannerId, deviceName, projector);
                            }, 2000);
                            return;
                        } else {
                            updateMonitorStatus(`√¢¬è¬≥ Allumage en cours... √É‚Ä∞tat: ${projector.status} (${elapsed}s/${maxDuration}s)`);
                        }
                    } else {
                        console.log(`√∞≈∏‚Äù¬ç [PowerOnSequence] √É‚Ä∞quipements disponibles:`, equipmentData.devices.map(d => ({ name: d.device_name || d.name, status: d.status })));
                        updateMonitorStatus(`√¢≈°¬†√Ø¬∏¬è Projecteur ${deviceName} non trouv√É¬© (${elapsed}s)`);
                    }
                    
                } catch (error) {
                    console.error(`√¢¬ù≈í [PowerOnSequence] Erreur v√É¬©rification: ${error}`);
                    updateMonitorStatus(`√¢¬ù≈í Erreur v√É¬©rification (${elapsed}s)`);
                }
                
                // Timeout apr√É¬®s 45 secondes - V√É‚Ä∞RIFICATION FINALE AVANT ESCALADE
                if (elapsed >= maxDuration) {
                    clearInterval(interval);
                    if (!powerOnDetected) {
                        console.log(`√∞≈∏‚Äù¬ç [PowerOnSequence] TIMEOUT ${maxDuration}s atteint - V√É¬©rification finale avant escalade pour ${deviceName}`);
                        updateMonitorStatus('√¢¬è¬∞ Timeout atteint - V√É¬©rification finale...');
                        
                        setTimeout(async () => {
                            try {
                                // √¢≈ì‚Ä¶ DERNI√ÉÀÜRE V√É‚Ä∞RIFICATION avant escalade
                                const currentRoom = getCurrentRoom();
                                const equipmentData = await fetchRoomEquipment(currentRoom);
                                
                                if (equipmentData && equipmentData.devices && Array.isArray(equipmentData.devices)) {
                                    const projector = equipmentData.devices.find(d => {
                                        const deviceNameMatch = d.device_name === deviceName || 
                                                              (d.device_name && d.device_name.includes(deviceName.replace('PROJ-', ''))) ||
                                                              d.name === deviceName ||
                                                              (d.name && d.name.includes(deviceName.replace('PROJ-', '')));
                                        const isProjectorType = (d.device_model_name && d.device_model_name.toLowerCase().includes('proj')) ||
                                                              (d.device_family_name && d.device_family_name.toLowerCase().includes('proj')) ||
                                                              (d.name && d.name.toLowerCase().includes('proj'));
                                        return deviceNameMatch || isProjectorType;
                                    });
                                    
                                                                        // √¢≈ì‚Ä¶ CORRECTION : Utiliser v√É¬©rification temps r√É¬©el au lieu du cache statique
                                    console.log(`√∞≈∏‚Äù¬ç [PowerOnSequence] V√É¬©rification temps r√É¬©el finale pour ${deviceName}...`);
                                    
                                    try {
                                        const realtimeStatus = await fetchProjectorRealtimeStatus(deviceName);
                                        
                                        if (realtimeStatus && realtimeStatus.is_online) {
                                            const powerOn = realtimeStatus.power_status === 'on' || realtimeStatus.power_status === 'ON';
                                            const hasAVMute = realtimeStatus.av_mute_video || realtimeStatus.av_mute_audio;
                                            
                                            console.log(`√¢≈ì‚Ä¶ [PowerOnSequence] √É‚Ä∞tat temps r√É¬©el: power=${realtimeStatus.power_status}, AVMute=${hasAVMute}`);
                                            
                                            if (powerOn) {
                                                if (hasAVMute) {
                                                    console.log(`√∞≈∏‚Äù‚Ä° [PowerOnSequence] AV Mute d√É¬©tect√É¬© √¢‚Ä†‚Äô Correction automatique invisible`);
                                                    updateMonitorStatus('√∞≈∏‚Äù‚Ä° Correction AV Mute automatique...');

                                                    // √¢≈ì‚Ä¶ Correction AV Mute INVISIBLE
                                                    const avMuteResponse = await fetch(`${API_BASE_URL}/api/device/public/av-mute/${deviceName}`, {
                                                        method: 'POST',
                                                        headers: { 'Content-Type': 'application/json' }
                                                    });
                                                    
                                                    if (avMuteResponse.ok) {
                                                        console.log(`√¢≈ì‚Ä¶ [PowerOnSequence] PROBL√ÉÀÜME R√É‚Ä∞SOLU: AV Mute corrig√É¬© sur ${deviceName}`);
                                                        updateMonitorStatus('√¢≈ì‚Ä¶ Probl√É¬®me vid√É¬©o r√É¬©solu !', true);
                                                        
                                                        // √¢≈ì‚Ä¶ AFFICHER BANNI√ÉÀÜRE DE SUCC√ÉÀÜS (pas d'escalade)
                                                        setTimeout(() => {
                                                            closeSequentialBanner(bannerId);
                                                            showAutoResultBanner(`√¢≈ì‚Ä¶ Probl√É¬®me vid√É¬©o r√É¬©solu automatiquement sur ${deviceName}`);
                                                        }, 2000);
                                                        return;
                                                    }
                                                } else {
                                                    // √¢≈ì‚Ä¶ CORRECTION LOGIQUE : Projecteur allum√É¬© sans AV Mute, mais probl√É¬®me vid√É¬©o signal√É¬© √¢‚Ä†‚Äô V√É¬©rification approfondie
                                                    console.log(`√∞≈∏≈Ω¬Ø [PowerOnSequence] Projecteur ${deviceName} allum√É¬© sans AV Mute - V√É¬©rification si probl√É¬®me persiste`);
                                                    updateMonitorStatus('√∞≈∏‚Äù¬ç Projecteur fonctionnel - V√É¬©rification probl√É¬®me persistant...');
                                                    
                                                    // √¢≈ì‚Ä¶ NOUVELLE LOGIQUE : Au lieu de consid√É¬©rer le probl√É¬®me r√É¬©solu, escalader si probl√É¬®me persiste
                                                    setTimeout(() => {
                                                        closeSequentialBanner(bannerId);
                                                        // D√É¬©clencher l'escalade car √É¬©quipement fonctionne mais probl√É¬®me persiste
                                                        setTimeout(() => {
                                                            console.log('√∞≈∏≈Ω¬Ø [PowerOnSequence] Escalade - √É‚Ä∞quipement fonctionnel mais probl√É¬®me vid√É¬©o persiste');
                                                            showSEAEscalationBanner({
                                                                intent: 'video_problem',
                                                                confidence: 0.9,
                                                                room: getCurrentRoom(),
                                                                problems: [{
                                                                    room: getCurrentRoom(),
                                                                    device: deviceName,
                                                                    severity: 'medium',
                                                                    reason: `Projecteur ${deviceName} allum√É¬© et fonctionnel mais probl√É¬®me vid√É¬©o persistant`
                                                                }],
                                                                escalation_needed: true,
                                                                escalation_reason: `Projecteur ${deviceName} op√É¬©rationnel mais probl√É¬®me vid√É¬©o non r√É¬©solu - Diagnostic sp√É¬©cialis√É¬© requis`
                                                            });
                                                        }, 500);
                                                    }, 2000);
                                                    return;
                                                }
                                            }
                                        }
                                    } catch (realtimeError) {
                                        console.error(`√¢≈°¬†√Ø¬∏¬è [PowerOnSequence] Erreur v√É¬©rification temps r√É¬©el:`, realtimeError);
                                    }
                                }
                                
                                // √¢¬ù≈í Si toujours pas allum√É¬© apr√É¬®s v√É¬©rification finale
                                console.log(`√¢¬ù≈í [PowerOnSequence] V√É‚Ä∞RIFICATION FINALE √É‚Ä∞CHOU√É‚Ä∞E: Projecteur ${deviceName} toujours pas allum√É¬© - Escalade n√É¬©cessaire`);
                                updateMonitorStatus('√¢¬ù≈í Projecteur non allum√É¬© - Escalade technicien');
                                
                                setTimeout(() => {
                                    closeSequentialBanner(bannerId);
                                    // Escalade automatique apr√É¬®s v√É¬©rification finale
                                    showSEAEscalationBanner({
                                        intent: 'video_problem',
                                        confidence: 0.8,
                                        room: getCurrentRoom(),
                                        escalation_reason: `√É‚Ä∞chec allumage ${deviceName} apr√É¬®s ${maxDuration}s + v√É¬©rification finale`
                                    });
                                }, 2000);
                                
                            } catch (error) {
                                console.error(`√¢¬ù≈í [PowerOnSequence] Erreur v√É¬©rification finale:`, error);
                                updateMonitorStatus('√¢¬ù≈í Erreur v√É¬©rification - Escalade technicien');
                                
                                setTimeout(() => {
                                    closeSequentialBanner(bannerId);
                                    showSEAEscalationBanner({
                                        intent: 'video_problem',
                                        confidence: 0.8,
                                        room: getCurrentRoom(),
                                        escalation_reason: `Erreur technique v√É¬©rification finale ${deviceName}`
                                    });
                                }, 2000);
                            }
                        }, 1000);
                    }
                }
            }, checkInterval * 1000);
        }
        
        /**
         * √¢≈ì‚Ä¶ NOUVEAU: Analyse automatique AV Mute apr√É¬®s allumage
         */
        async function startAVMuteAnalysis(bannerId, deviceName, projectorData = null) {
            console.log(`√∞≈∏‚Äù‚Ä° [AVMuteAnalysis] Analyse AV Mute pour ${deviceName}`, projectorData);
            
            const updateMonitorStatus = (status, isSuccess = false) => {
                const monitor = document.getElementById(`monitor_${deviceName}`);
                if (monitor) {
                    monitor.innerHTML = status;
                    if (isSuccess) {
                        monitor.style.color = '#10b981';
                        monitor.style.fontWeight = '600';
                    }
                }
            };
            
            try {
                updateMonitorStatus('√∞≈∏‚Äù¬ç Analyse AV Mute en cours...');
                
                // Attendre un peu pour que le projecteur se stabilise
                await new Promise(resolve => setTimeout(resolve, 3000));
                
                // √¢≈ì‚Ä¶ M√É‚Ä∞THODE 1: Tenter diagnostic direct en interrogeant le probl√É¬®me vid√É¬©o
                console.log(`√∞≈∏‚Äù‚Ä° [AVMuteAnalysis] Tentative diagnostic AV Mute via probl√É¬®me vid√É¬©o`);
                
                // √¢≈ì‚Ä¶ S'assurer d'utiliser le bon backend
                await ensureBackendConnection();
                
                const currentRoom = getCurrentRoom();
                const response = await fetch(`${currentAPI}/api/copilot/chat`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        message: `√É‚Ä∞cran noir projecteur ${deviceName}`,
                        room: currentRoom,
                        context: {
                            sequential_check: true,
                            av_mute_analysis: true,
                            target_device: deviceName,
                            force_projector_check: true
                        }
                    })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('√∞≈∏‚Äù¬ç [AVMuteAnalysis] R√É¬©ponse backend diagnostic:', data);
                    
                    // Chercher des actions de correction AV Mute
                    const avMuteActions = data.actions ? data.actions.filter(action => 
                        action.type === 'pjlink_av_unmute' || 
                        action.type === 'pjlink_av_mute' ||
                        (action.description && action.description.toLowerCase().includes('av mute')) ||
                        (action.description && action.description.toLowerCase().includes('d√É¬©sactiver') && action.description.toLowerCase().includes('mute'))
                    ) : [];
                    
                    console.log(`√∞≈∏‚Äù‚Ä° [AVMuteAnalysis] Actions AV Mute trouv√É¬©es:`, avMuteActions);
                    
                    if (avMuteActions.length > 0) {
                        updateMonitorStatus('√∞≈∏‚Äù‚Ä° AV Mute d√É¬©tect√É¬© - Correction automatique...');
                        
                        // Prendre la premi√É¬®re action AV unmute trouv√É¬©e
                        const avMuteAction = avMuteActions[0];
                        console.log(`√∞≈∏‚Äù‚Ä° [AVMuteAnalysis] Ex√É¬©cution action:`, avMuteAction);
                        
                        try {
                            // Construire les param√É¬®tres pour l'action
                            const actionParams = {
                                device_name: deviceName,
                                video_mute: false,
                                audio_mute: false,
                                ...avMuteAction.parameters
                            };
                            
                            await executeAction('pjlink_av_mute', avMuteAction.device_id || 0, actionParams);
                            updateMonitorStatus('√¢≈ì‚Ä¶ AV Mute corrig√É¬© - Projecteur op√É¬©rationnel !', true);
                            
                            setTimeout(() => {
                                closeSequentialBanner(bannerId);
                            }, 3000);
                            
                        } catch (actionError) {
                            console.error(`√¢¬ù≈í [AVMuteAnalysis] Erreur ex√É¬©cution action:`, actionError);
                            updateMonitorStatus('√¢≈°¬†√Ø¬∏¬è Erreur correction AV Mute - V√É¬©rifiez manuellement');
                            setTimeout(() => {
                                closeSequentialBanner(bannerId);
                            }, 4000);
                        }
                        
                    } else {
                        // √¢≈ì‚Ä¶ CORRECTION ESCALADE : Pas d'AV Mute d√É¬©tect√É¬© sur projecteur allum√É¬© √¢‚Ä†‚Äô Escalade SEA
                        console.log(`√∞≈∏≈Ω¬Ø [AVMuteAnalysis] Aucun AV Mute d√É¬©tect√É¬© sur projecteur allum√É¬© ${deviceName} √¢‚Ä†‚Äô Escalade requise`);
                        updateMonitorStatus('√∞≈∏≈Ω¬Ø Projecteur op√É¬©rationnel - Escalade technique n√É¬©cessaire...');
                        
                        // Pr√É¬©parer le contexte d'escalade
                        const escalationContext = {
                            intent: 'video_problem',
                            confidence: 0.9,
                            room: getCurrentRoom(),
                            problems: [{
                                room: getCurrentRoom(),
                                device: deviceName,
                                severity: 'medium',
                                reason: `Probl√É¬®me vid√É¬©o persistant sur ${deviceName} - √É‚Ä∞quipement fonctionnel mais probl√É¬®me non r√É¬©solu`
                            }],
                            solutions: [],
                            escalation_needed: true,
                            escalation_reason: `Projecteur ${deviceName} fonctionnel mais probl√É¬®me vid√É¬©o persiste - Diagnostic approfondi requis`
                        };
                        
                        // Fermer la banni√É¬®re et escalader
                        setTimeout(() => {
                            closeSequentialBanner(bannerId);
                            // D√É¬©clencher l'escalade SEA apr√É¬®s fermeture
                            setTimeout(() => {
                                console.log('√∞≈∏≈Ω¬Ø [AVMuteAnalysis] D√É¬©clenchement escalade SEA pour probl√É¬®me non r√É¬©solu');
                                showSEAEscalationBanner(escalationContext);
                            }, 500);
                        }, 1500);
                    }
                    
                } else {
                    console.error(`√¢¬ù≈í [AVMuteAnalysis] Erreur HTTP ${response.status}`);
                    updateMonitorStatus('√¢≈°¬†√Ø¬∏¬è Erreur diagnostic - Projecteur probablement op√É¬©rationnel');
                    setTimeout(() => {
                        closeSequentialBanner(bannerId);
                    }, 3000);
                }
                    
                } catch (error) {
                console.error(`√¢¬ù≈í [AVMuteAnalysis] Erreur g√É¬©n√É¬©rale:`, error);
                updateMonitorStatus('√¢¬ù≈í Erreur analyse AV Mute - V√É¬©rifiez manuellement');
                setTimeout(() => {
                    closeSequentialBanner(bannerId);
                }, 3000);
            }
        }
        
        /**
         * √¢≈ì‚Ä¶ NOUVEAU: S√É¬©quence pour correction AV Mute directe
         */
        function startAVUnmuteSequence(bannerId, deviceName, options) {
            console.log(`√¢≈ì‚Ä¶ [AVUnmuteSequence] Correction AV Mute pour ${deviceName}`);
            
            // Fermer automatiquement apr√É¬®s 3 secondes
            setTimeout(() => {
                closeSequentialBanner(bannerId);
            }, 3000);
        }
        
        /**
         * √¢≈ì‚Ä¶ NOUVEAU: S√É¬©quence de monitoring g√É¬©n√É¬©rique
         */
        function startMonitoringSequence(bannerId, deviceName, options) {
            console.log(`√∞≈∏‚Äò‚Ç¨ [MonitoringSequence] Surveillance g√É¬©n√É¬©rique pour ${deviceName}`);
            
            // Pour l'instant, fermer apr√É¬®s 5 secondes
            setTimeout(() => {
                closeSequentialBanner(bannerId);
            }, 5000);
        }

        /**
         * √¢≈ì‚Ä¶ NOUVEAU: Fermer la banni√É¬®re s√É¬©quentielle
         */
        function closeSequentialBanner(bannerId) {
            const banner = document.getElementById(bannerId);
            const overlay = document.getElementById(`overlay_${bannerId}`);
            
            if (overlay) {
                overlay.style.opacity = '0';
                overlay.style.transform = 'scale(0.95)';
                
                setTimeout(() => {
                    overlay.remove();
                    console.log(`√∞≈∏¬è¬Å [SequentialBanner] Banni√É¬®re ${bannerId} ferm√É¬©e`);
                }, 300);
            }
        }

        /**
         * √¢≈ì‚Ä¶ ANCIEN: Re-v√É¬©rifie l'√É¬©tat du projecteur apr√É¬®s allumage (OBSOL√ÉÀÜTE)
         */
        async function recheckProjectorStatus() {
            console.log('√∞≈∏‚Äù¬ç [SequentialCheck] Re-v√É¬©rification de l\'√É¬©tat du projecteur apr√É¬®s allumage');
            
            // R√É¬©-envoyer automatiquement la demande de probl√É¬®me vid√É¬©o pour v√É¬©rification
            try {
                // √¢≈ì‚Ä¶ S'assurer d'utiliser le bon backend
                await ensureBackendConnection();
                
                const currentRoom = getCurrentRoom();
                const response = await fetch(`${currentAPI}/api/copilot/chat`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        message: 'V√É¬©rification post-allumage projecteur', // Message technique pour re-check
                        room: currentRoom,
                        context: {
                            sequential_check: true,
                            auto_recheck: true
                        }
                    })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('√¢≈ì‚Ä¶ [SequentialCheck] V√É¬©rification post-allumage termin√É¬©e');
                    processResponse(data);
                } else {
                    console.error('√¢¬ù≈í [SequentialCheck] Erreur lors de la re-v√É¬©rification');
                    // En cas d'erreur, afficher directement la banni√É¬®re SEA
                    showSEAEscalationBanner({
                        intent: 'video_problem',
                        confidence: 0.8,
                        room: currentRoom,
                        escalation_reason: 'V√É¬©rification post-allumage √É¬©chou√É¬©e - intervention technique requise'
                    });
                }
            } catch (error) {
                console.error('√¢¬ù≈í [SequentialCheck] Erreur r√É¬©seau:', error);
            }
        }

        /**
         * Affiche la banni√É¬®re de confirmation des actions automatiques
         * avec le m√É¬™me style que les banni√É¬®res SIM/SEA
         */
        function showAutoResultBanner(autoResult) {
            // √¢≈ì‚Ä¶ CORRECTION: Fermer toutes les banni√É¬®res auto-result existantes AVANT d'en cr√É¬©er une nouvelle
            const existingAutoBanners = document.querySelectorAll('[id^="auto_result_"]');
            const existingAutoOverlays = document.querySelectorAll('[id^="overlay_auto_result_"]');
            
            existingAutoBanners.forEach(banner => {
                console.log(`√∞≈∏≈°¬´ [CleanupAutoBanner] Suppression banni√É¬®re auto-result existante: ${banner.id}`);
                banner.remove();
            });
            
            existingAutoOverlays.forEach(overlay => {
                console.log(`√∞≈∏≈°¬´ [CleanupAutoOverlay] Suppression overlay auto-result existant: ${overlay.id}`);
                overlay.remove();
            });
            
            // √¢≈ì‚Ä¶ NETTOYAGE TOTAL : Supprimer TOUS les messages du chat avant d'afficher la banni√É¬®re
            const assistantPage = document.getElementById('assistantPage');
            if (assistantPage) {
                const allMessages = assistantPage.querySelectorAll('.message');
                allMessages.forEach(message => {
                    message.remove();
                    console.log('√∞≈∏¬ß¬π Message supprim√É¬© du chat avant banni√É¬®re');
                });
            }
            
            // √¢≈ì‚Ä¶ MASQUER les palettes pendant l'affichage de la banni√É¬®re
            const problemPalettes = document.getElementById('problemPalettes');
            if (problemPalettes) {
                problemPalettes.style.display = 'none';
            }
            
            const bannerId = `auto_result_${Date.now()}`;
            
            // Cr√É¬©er l'overlay plein √É¬©cran avec flou
            const overlayDiv = document.createElement('div');
            overlayDiv.id = `overlay_${bannerId}`;
            overlayDiv.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(20px);
                z-index: 9998;
                cursor: pointer;
            `;
            
            // Cr√É¬©er la banni√É¬®re de confirmation
            const bannerDiv = document.createElement('div');
            bannerDiv.id = bannerId;
            bannerDiv.className = 'auto-result-banner fade-in';
            bannerDiv.style.cssText = `
                background: linear-gradient(135deg, #10b981 0%, #059669 100%);
                border-radius: 12px;
                padding: 2rem;
                color: white !important;
                text-align: center;
                box-shadow: 0 20px 40px rgba(0,0,0,0.3);
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 9999;
                width: 90%;
                max-width: 500px;
                border: 2px solid #10b981;
            `;
            
            bannerDiv.innerHTML = `
                <div class="auto-result-header" style="margin-bottom: 1.5rem;">
                    <div style="font-size: 3rem; margin-bottom: 1rem;">√¢≈ì‚Ä¶</div>
                    <div class="auto-result-text">
                        <strong style="color: white !important; font-weight: 600; font-size: 1.4rem; display: block; margin-bottom: 0.5rem;">Action Automatique R√É¬©ussie</strong>
                        <span style="color: white !important; font-weight: 500; font-size: 1.1rem;">${autoResult}</span>
                    </div>
                </div>
                
                <div style="margin-top: 2rem;">
                    <button 
                        onclick="closeAutoResultBanner('${bannerId}')" 
                        style="
                            background: rgba(255, 255, 255, 0.2);
                            border: 1px solid rgba(255, 255, 255, 0.3);
                            color: white !important;
                            padding: 0.75rem 2rem;
                            border-radius: 6px;
                font-weight: 600;
                            cursor: pointer;
                            font-size: 1rem;
                            transition: all 0.3s ease;
                        "
                        onmouseover="this.style.background='rgba(255, 255, 255, 0.3)'"
                        onmouseout="this.style.background='rgba(255, 255, 255, 0.2)'"
                    >
                        Fermer
                    </button>
                </div>
            `;
            
            // √¢≈ì‚Ä¶ CORRECTION: Fermer au clic sur l'overlay mais PAS sur les √É¬©l√É¬©ments internes
            overlayDiv.onclick = (event) => {
                if (event.target === overlayDiv) {
                    closeAutoResultBanner(bannerId);
                }
            };
            
            // √¢≈ì‚Ä¶ Emp√É¬™cher la propagation des √É¬©v√É¬©nements depuis la banni√É¬®re
            bannerDiv.onclick = (event) => {
                event.stopPropagation();
            };
            
            // Ajouter l'overlay et la banni√É¬®re au body
            document.body.appendChild(overlayDiv);
            overlayDiv.appendChild(bannerDiv);
            
            // Auto-fermeture apr√É¬®s 5 secondes
            setTimeout(() => {
                closeAutoResultBanner(bannerId);
            }, 5000);
        }

        /**
         * Ferme la banni√É¬®re de confirmation automatique
         */
        function closeAutoResultBanner(bannerId) {
            // Supprimer l'overlay
            const overlayDiv = document.getElementById(`overlay_${bannerId}`);
            if (overlayDiv) {
                overlayDiv.remove();
            }
            
            // √¢≈ì‚Ä¶ REMETTRE les palettes apr√É¬®s fermeture de la banni√É¬®re
            const problemPalettes = document.getElementById('problemPalettes');
            if (problemPalettes) {
                problemPalettes.style.display = 'grid';
                problemPalettes.style.gridTemplateColumns = 'repeat(auto-fit, minmax(250px, 1fr))';
                problemPalettes.style.gap = '2rem';
            }
        }

        /**
         * Affiche la banni√É¬®re SEA centr√É¬©e avec overlay (comme les autres banni√É¬®res)
         */
        function showSEAEscalationBanner(data) {
            // √¢≈ì‚Ä¶ CORRECTION: Fermer toutes les banni√É¬®res SEA existantes AVANT d'en cr√É¬©er une nouvelle
            const existingSeaBanners = document.querySelectorAll('[id^="escalation_sea_"]');
            const existingSeaOverlays = document.querySelectorAll('[id^="overlay_escalation_sea_"]');
            
            existingSeaBanners.forEach(banner => {
                console.log(`√∞≈∏≈°¬´ [CleanupSEABanner] Suppression banni√É¬®re SEA existante: ${banner.id}`);
                banner.remove();
            });
            
            existingSeaOverlays.forEach(overlay => {
                console.log(`√∞≈∏≈°¬´ [CleanupSEAOverlay] Suppression overlay SEA existant: ${overlay.id}`);
                overlay.remove();
            });
            
            const escalationId = `escalation_sea_${Date.now()}`;
            const currentRoom = getCurrentRoom();
            
            // Cr√É¬©er l'overlay plein √É¬©cran avec flou
            const overlayDiv = document.createElement('div');
            overlayDiv.id = `overlay_${escalationId}`;
            overlayDiv.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(20px);
                z-index: 9998;
                cursor: pointer;
            `;
            
            // Cr√É¬©er la banni√É¬®re SEA
            const escalationDiv = document.createElement('div');
            escalationDiv.id = escalationId;
            escalationDiv.className = 'escalation-compact fade-in';
            escalationDiv.style.cssText = `
                background: rgba(255, 255, 255, 0.98);
                border-radius: 12px;
                padding: 2rem;
                color: black !important;
                text-align: center;
                box-shadow: 0 20px 40px rgba(0,0,0,0.3);
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 9999;
                width: 90%;
                max-width: 600px;
                max-height: 80vh;
                overflow-y: auto;
            `;
            
            escalationDiv.innerHTML = `
                <div class="escalation-header" style="margin-bottom: 1.5rem;">
                    <div class="escalation-image-container" style="text-align: center; margin-bottom: 1rem;">
                        <img id="sea-logo-${escalationId}" src="assets/SEA2.png" alt="Service Expert Audiovisuel UQAM" style="max-width: 200px; height: auto; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.2);" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                        <div class="sea-fallback-content" style="display: none; color: black !important; text-align: center; padding: 1rem;">
                            <h3 style="margin: 0 0 0.5rem 0; font-size: 1.2rem; color: black !important;">ASSISTANCE TECHNIQUE</h3>
                            <p style="margin: 0 0 0.5rem 0; font-size: 1rem; color: black !important;">COMPOSER LE POSTE</p>
                            <p style="margin: 0; font-size: 3rem; font-weight: bold; color: black !important;">6135</p>
                        </div>
                    </div>
                    <div class="escalation-text">
                        <strong style="color: black !important; font-weight: 600; font-size: 1.4rem; display: block; margin-bottom: 0.5rem;">Intervention technique requise</strong>
                        <span class="escalation-subtitle" style="color: black !important; font-weight: 700; font-size: 1.1rem;">SEA: √∞≈∏‚Äú¬± 6135 ou cr√É¬©er un ticket - Salle ${currentRoom}</span>
                    </div>
                </div>
                
                <div class="client-description-section" style="margin: 1.5rem 0;">
                    <div class="description-header" style="margin-bottom: 0.5rem;">
                        <i class="fas fa-edit" style="color: black !important; margin-right: 0.5rem;"></i>
                        <span style="color: black !important; font-weight: 600;">Description d√É¬©taill√É¬©e (facultative)</span>
                    </div>
                    <textarea
                        id="clientDescription_${escalationId}"
                        class="client-description-input"
                        placeholder="D√É¬©crivez votre probl√É¬®me en d√É¬©tail..."
                        rows="3"
                        style="
                            width: 100%;
                            padding: 0.75rem;
                            border: 1px solid #d1d5db;
                            border-radius: 6px;
                            color: black !important;
                            background: white;
                            resize: vertical;
                            font-family: inherit;
                        "
                    ></textarea>
                    <div class="description-help" style="margin-top: 0.5rem;">
                        <small style="color: black !important; font-style: italic;">√∞≈∏‚Äô¬° Si vous ne saisissez rien, un message g√É¬©n√É¬©rique sera utilis√É¬© selon le type de probl√É¬®me.</small>
                    </div>
                </div>
                
                <div class="escalation-actions" style="display: flex; gap: 1rem; justify-content: center; margin-top: 2rem;">
                    <button 
                        onclick="closeSEAEscalationBanner('${escalationId}')" 
                        style="
                            background: rgba(0, 0, 0, 0.1);
                            border: 1px solid rgba(0, 0, 0, 0.2);
                            color: black !important;
                            padding: 0.75rem 1.5rem;
                            border-radius: 6px;
                font-weight: 600;
                        cursor: pointer;
                            font-size: 1rem;
                        transition: all 0.3s ease;
                        "
                        onmouseover="this.style.background='rgba(0, 0, 0, 0.2)'"
                        onmouseout="this.style.background='rgba(0, 0, 0, 0.1)'"
                    >
                        <i class="fas fa-times"></i> Fermer
                    </button>
                    <button 
                        onclick="createTicketFromBanner('${escalationId}', ${JSON.stringify(data.escalation_actions || []).replace(/"/g, '&quot;')})" 
                        style="
                            background: #3b82f6;
                            border: 1px solid #2563eb;
                            color: white !important;
                            padding: 0.75rem 1.5rem;
                            border-radius: 6px;
                            font-weight: 600;
                        cursor: pointer;
                            font-size: 1rem;
                        transition: all 0.3s ease;
                        "
                        onmouseover="this.style.background='#2563eb'"
                        onmouseout="this.style.background='#3b82f6'"
                    >
                        <i class="fas fa-paper-plane"></i> Cr√É¬©er un ticket
                    </button>
                </div>
            `;
            
            // √¢≈ì‚Ä¶ CORRECTION: Fermer au clic sur l'overlay mais PAS sur les √É¬©l√É¬©ments internes
            overlayDiv.onclick = (event) => {
                // Fermer seulement si on clique directement sur l'overlay, pas sur ses enfants
                if (event.target === overlayDiv) {
                    closeSEAEscalationBanner(escalationId);
                }
            };
            
            // √¢≈ì‚Ä¶ Emp√É¬™cher la propagation des √É¬©v√É¬©nements depuis la banni√É¬®re
            escalationDiv.onclick = (event) => {
                event.stopPropagation();
            };
            
            // √¢≈ì‚Ä¶ NOUVEAU : Masquer l'overlay de chargement AU MOMENT EXACT d'afficher la banni√É¬®re
            hideDiagnosticLoading();
            
            // Ajouter l'overlay et la banni√É¬®re au body
            document.body.appendChild(overlayDiv);
            overlayDiv.appendChild(escalationDiv);
        }

        /**
         * Ferme la banni√É¬®re SEA
         */
        function closeSEAEscalationBanner(escalationId) {
            const overlayDiv = document.getElementById(`overlay_${escalationId}`);
            if (overlayDiv) {
                overlayDiv.remove();
            }
            
            // √¢≈ì‚Ä¶ CORRECTION : Annuler le timer d'escalade quand l'utilisateur ferme manuellement la banni√É¬®re
            clearEscalationTimeout();
            console.log('√∞≈∏≈°¬´ [EscalationTimeout] Timer d\'escalade annul√É¬© suite √É¬† fermeture manuelle de la banni√É¬®re');
        }

        /**
         * Cr√É¬©e un ticket depuis la banni√É¬®re SEA
         */
        function createTicketFromBanner(escalationId, escalationActions) {
            const description = document.getElementById(`clientDescription_${escalationId}`)?.value?.trim();
            
            // √¢≈ì‚Ä¶ CORRECTION: Cr√É¬©er le ticket AVANT de fermer la banni√É¬®re
            createTicket(escalationId, escalationActions, description);
        }

        /**
         * Affiche la modale pour la description d√É¬©taill√É¬©e du ticket
         */
        function showTicketDescriptionModal(escalationId, escalationActions) {
            const modalOverlay = document.getElementById('modalOverlay');
            const modalIcon = document.getElementById('modalIcon');
            const modalTitle = document.getElementById('modalTitle');
            const modalMessage = document.getElementById('modalMessage');
            
            modalIcon.textContent = '√∞≈∏≈Ω¬´';
            modalTitle.textContent = 'Description du probl√É¬®me (optionnel)';
            modalMessage.innerHTML = `
                <div style="margin-bottom: 1rem;">
                    <p style="margin-bottom: 0.5rem; font-size: 0.9rem; color: #666;">
                        Vous pouvez ajouter une description d√É¬©taill√É¬©e du probl√É¬®me pour aider l'√É¬©quipe technique :
                    </p>
                    <textarea 
                        id="ticketDescription" 
                        placeholder="D√É¬©crivez le probl√É¬®me en d√É¬©tail (optionnel)..."
                        style="
                            width: 100%;
                            min-height: 100px;
                            padding: 0.75rem;
                            border: 1px solid #ddd;
                            border-radius: 8px;
                            font-family: inherit;
                            font-size: 0.9rem;
                            resize: vertical;
                            margin-bottom: 1rem;
                        "
                    ></textarea>
                </div>
                <div style="display: flex; gap: 0.5rem; justify-content: center;">
                    <button onclick="closeTicketDescriptionModal()" style="
                        background: #f3f4f6;
                        color: #374151;
                        border: 1px solid #d1d5db;
                        padding: 0.5rem 1rem;
                        border-radius: 6px;
                        cursor: pointer;
                        font-size: 0.9rem;
                    ">
                        Annuler
                    </button>
                    <button onclick="createTicketWithDescription('${escalationId}', ${JSON.stringify(escalationActions).replace(/"/g, '&quot;')})" style="
                        background: var(--primary-blue);
                        color: white;
                        border: none;
                        padding: 0.5rem 1rem;
                        border-radius: 6px;
                        cursor: pointer;
                        font-size: 0.9rem;
                        font-weight: 500;
                    ">
                        Envoyer le ticket
                    </button>
                </div>
            `;
            
            modalOverlay.classList.add('active');
        }

        /**
         * Ferme la modale de description du ticket
         */
        function closeTicketDescriptionModal() {
            const modalOverlay = document.getElementById('modalOverlay');
            modalOverlay.classList.remove('active');
        }

        /**
         * Ferme la banni√É¬®re d'escalade et son overlay
         */
        function closeEscalationBanner(escalationId) {
            console.log(`√∞≈∏≈°¬´ [CloseEscalation] Fermeture banni√É¬®re ${escalationId}`);
            
            // Supprimer la banni√É¬®re
            const escalationDiv = document.getElementById(escalationId);
            if (escalationDiv) {
                escalationDiv.remove();
            }
            
            // Supprimer l'overlay
            const overlayDiv = document.getElementById(`overlay_${escalationId}`);
            if (overlayDiv) {
                overlayDiv.remove();
            }
            
            // R√É¬©afficher les palettes
            showProblemPalettes();
        }
        
        /**
         * Ferme la confirmation de ticket et son overlay
         */
        function closeTicketConfirmation(confirmationId) {
            console.log(`√¢≈ì‚Ä¶ [CloseConfirmation] Fermeture confirmation ${confirmationId}`);
            
            // Supprimer la confirmation
            const confirmationDiv = document.getElementById(confirmationId);
            if (confirmationDiv) {
                confirmationDiv.remove();
            }
            
            // Supprimer l'overlay
            const overlayDiv = document.getElementById(`overlay_${confirmationId}`);
            if (overlayDiv) {
                overlayDiv.remove();
            }
            
            // R√É¬©afficher les palettes
            showProblemPalettes();
        }
        
        /**
         * Affiche la banni√É¬®re de ticket existant avec overlay moderne
         */
        function showExistingTicketBanner(lastTicket) {
            console.log(`√∞≈∏≈Ω¬´ [ExistingTicket] Affichage banni√É¬®re pour ticket existant: ${lastTicket.number}`);
            
            // √¢≈ì‚Ä¶ CORRECTION : Masquer le sablier diagnostic car banni√É¬®re de ticket prend le relais
            hideDiagnosticLoading();
            console.log('√¢≈ì‚Ä¶ [ExistingTicket] Sablier diagnostic masqu√É¬© - Banni√É¬®re ticket existant prend le relais');
            
            // √¢≈ì‚Ä¶ CORRECTION: Fermer toutes les banni√É¬®res existantes AVANT d'en cr√É¬©er une nouvelle
            const existingBanners = document.querySelectorAll('[id^="existing_ticket_"]');
            const existingOverlays = document.querySelectorAll('[id^="overlay_existing_ticket_"]');
            
            existingBanners.forEach(banner => {
                console.log(`√∞≈∏≈°¬´ [CleanupBanner] Suppression banni√É¬®re existante: ${banner.id}`);
                banner.remove();
            });
            
            existingOverlays.forEach(overlay => {
                console.log(`√∞≈∏≈°¬´ [CleanupOverlay] Suppression overlay existant: ${overlay.id}`);
                overlay.remove();
            });
            
            const currentRoom = getCurrentRoom();
            
            // Cr√É¬©er la banni√É¬®re de ticket existant avec overlay plein √É¬©cran
            const bannerId = `existing_ticket_${Date.now()}`;
            
            // Cr√É¬©er l'overlay plein √É¬©cran avec flou agressif
            const overlayDiv = document.createElement('div');
            overlayDiv.id = `overlay_${bannerId}`;
            overlayDiv.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(20px);
                z-index: 9998;
                cursor: pointer;
            `;
            
            // Cr√É¬©er la banni√É¬®re de ticket existant
            const bannerDiv = document.createElement('div');
            bannerDiv.id = bannerId;
            bannerDiv.className = 'escalation-compact fade-in';
            bannerDiv.style.cssText = `
                background: linear-gradient(135deg, #f59e0b 0%, #f97316 100%);
                color: white;
                border-radius: 12px;
                padding: 2rem;
                text-align: center;
                box-shadow: 0 20px 40px rgba(245, 158, 11, 0.4);
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 9999;
                width: 90%;
                max-width: 500px;
                animation: fadeIn 0.3s ease-out;
            `;
            
            bannerDiv.innerHTML = `
                <div style="font-size: 3rem; margin-bottom: 1rem;">√∞≈∏≈Ω¬´</div>
                <h3 style="margin: 0 0 1rem 0; font-size: 1.5rem; font-weight: 600;">Ticket d√É¬©j√É¬† cr√É¬©√É¬© pour cette salle</h3>
                <div style="background: rgba(255,255,255,0.15); padding: 1.25rem; border-radius: 10px; margin: 1.5rem 0;">
                    <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>√∞≈∏‚Äú‚Äû Num√É¬©ro :</strong> ${lastTicket.number}</p>
                    <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>√∞≈∏¬è¬¢ Salle :</strong> ${lastTicket.room}</p>
                    <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>√¢¬è¬∞ Cr√É¬©√É¬© :</strong> ${new Date(lastTicket.timestamp).toLocaleTimeString('fr-FR', {hour: '2-digit', minute: '2-digit'})}</p>
                </div>
                <p style="margin: 1.5rem 0; opacity: 0.95; font-size: 1rem; line-height: 1.4;">
                    Un ticket SEA a d√É¬©j√É¬† √É¬©t√É¬© escalad√É¬© vers l'√É¬©quipe technique dans la m√É¬™me session.
                </p>
                <p style="margin: 1rem 0; opacity: 0.9; font-size: 0.9rem;">
                    √∞≈∏‚Äú≈æ <strong>Vous pouvez toujours appeler directement le SEA au 6135</strong> pour un suivi ou une urgence.
                </p>
                <div style="display: flex; gap: 1rem; justify-content: center; margin-top: 1.5rem; flex-wrap: wrap;">
                    <button onclick="closeExistingTicketBanner('${bannerId}')" style="
                        background: rgba(255,255,255,0.2);
                        border: 1px solid rgba(255,255,255,0.4);
                        color: white;
                        padding: 0.75rem 1.5rem;
                        border-radius: 8px;
                        cursor: pointer;
                        font-size: 0.9rem;
                        font-weight: 500;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,255,255,0.3)'" onmouseout="this.style.background='rgba(255,255,255,0.2)'">
                        √¢≈ì‚Ä¢ Fermer
                    </button>
                    <button onclick="window.open('tel:6135', '_self')" style="
                        background: rgba(255,255,255,0.2);
                        border: 1px solid rgba(255,255,255,0.4);
                        color: white;
                        padding: 0.75rem 1.5rem;
                        border-radius: 8px;
                        cursor: pointer;
                        font-size: 0.9rem;
                        font-weight: 500;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,255,255,0.3)'" onmouseout="this.style.background='rgba(255,255,255,0.2)'">
                        √∞≈∏‚Äú≈æ Appeler SEA
                    </button>
                    <button onclick="navigator.clipboard.writeText('${lastTicket.number}').then(() => alert('Num√É¬©ro de ticket copi√É¬©!'))" style="
                        background: rgba(255,255,255,0.9);
                        border: none;
                        color: #f97316;
                        padding: 0.75rem 1.5rem;
                        border-radius: 8px;
                        cursor: pointer;
                        font-size: 0.9rem;
                        font-weight: 500;
                        transition: all 0.3s ease;
                    " onmouseover="this.style.background='rgba(255,255,255,1)'" onmouseout="this.style.background='rgba(255,255,255,0.9)'">
                        √∞≈∏‚Äú‚Äπ Copier num√É¬©ro
                    </button>
                </div>
            `;
            
            // √¢≈ì‚Ä¶ CORRECTION: Fermer au clic sur l'overlay mais PAS sur les √É¬©l√É¬©ments internes
            overlayDiv.onclick = (event) => {
                if (event.target === overlayDiv) {
                    closeExistingTicketBanner(bannerId);
                }
            };
            
            // √¢≈ì‚Ä¶ Emp√É¬™cher la propagation des √É¬©v√É¬©nements depuis la banni√É¬®re
            bannerDiv.onclick = (event) => {
                event.stopPropagation();
            };
            
            // Ajouter l'overlay et la banni√É¬®re au body
            document.body.appendChild(overlayDiv);
            document.body.appendChild(bannerDiv);
            
            console.log(`√∞≈∏≈Ω¬´ [ExistingTicketBanner] Banni√É¬®re affich√É¬©e pour ticket ${lastTicket.number}`);
        }
        
        /**
         * Ferme la banni√É¬®re de ticket existant
         */
        function closeExistingTicketBanner(bannerId) {
            console.log(`√∞≈∏≈°¬´ [CloseExistingTicket] Fermeture banni√É¬®re ${bannerId}`);
            
            // √¢≈ì‚Ä¶ CORRECTION : Annuler le timer d'escalade quand l'utilisateur ferme la banni√É¬®re
            clearEscalationTimeout();
            console.log('√∞≈∏≈°¬´ [CloseExistingTicket] Timer d\'escalade annul√É¬© suite √É¬† fermeture banni√É¬®re ticket existant');
            
            // Supprimer la banni√É¬®re
            const bannerDiv = document.getElementById(bannerId);
            if (bannerDiv) {
                bannerDiv.remove();
            }
            
            // Supprimer l'overlay
            const overlayDiv = document.getElementById(`overlay_${bannerId}`);
            if (overlayDiv) {
                overlayDiv.remove();
            }
            
            // R√É¬©afficher les palettes
            showProblemPalettes();
        }
        
        /**
         * Cr√É¬©e un ticket directement avec description optionnelle du client
         */
        async function createTicketDirect(escalationId, problemType) {
            console.log(`√∞≈∏≈Ω¬´ [DirectTicket] Cr√É¬©ation directe ticket pour ${problemType} - ${escalationId}`);
            
            // R√É¬©cup√É¬©rer la description optionnelle du client
            const descriptionTextarea = document.getElementById(`problemDescription_${problemType}_${escalationId}`);
            const clientDescription = descriptionTextarea ? descriptionTextarea.value.trim() : '';
            
            // D√É¬©terminer le message g√É¬©n√É¬©rique selon le type
            let genericMessage = '';
            switch(problemType) {
                case 'video':
                    genericMessage = 'Probl√É¬®me vid√É¬©o signal√É¬© - aucun affichage ou image d√É¬©form√É¬©e';
                    break;
                case 'audio':
                    genericMessage = 'Probl√É¬®me audio signal√É¬© - aucun son ou qualit√É¬© d√É¬©grad√É¬©e';
                    break;
                default:
                    genericMessage = 'Probl√É¬®me technique signal√É¬© n√É¬©cessitant intervention';
            }
            
            // Utiliser la description du client ou le message g√É¬©n√É¬©rique
            const finalDescription = clientDescription || genericMessage;
            
            console.log(`√∞≈∏‚Äú¬ù [TicketDescription] ${clientDescription ? 'Description client' : 'Message g√É¬©n√É¬©rique'}: "${finalDescription}"`);
            
            await createTicket(escalationId, problemType, finalDescription);
        }

        /**
         * Cr√É¬©e un ticket avec description optionnelle (conserv√É¬© pour compatibilit√É¬©)
         */
        async function createTicketWithDescription(escalationId, escalationActions) {
            const descriptionTextarea = document.getElementById('ticketDescription');
            const description = descriptionTextarea ? descriptionTextarea.value.trim() : '';
            
            closeTicketDescriptionModal();
            await createTicket(escalationId, escalationActions, description);
        }

        /**
         * Cr√É¬©e un ticket SEA avec description fournie
         */
        async function createTicket(escalationId, problemType, description = '') {
            try {
                // √¢≈ì‚Ä¶ CORRECTION : Annuler le timer d'escalade quand un ticket est cr√É¬©√É¬©
                clearEscalationTimeout();
                console.log('√∞≈∏≈°¬´ [EscalationTimeout] Timer d\'escalade annul√É¬© suite √É¬† cr√É¬©ation de ticket');
                
                // √¢≈ì‚Ä¶ CORRECTION: V√É¬©rifier si l'√É¬©l√É¬©ment existe avant de l'utiliser
                const escalationElement = document.getElementById(escalationId);
                
                // D√É¬©sactiver les boutons seulement si l'√É¬©l√É¬©ment existe
                if (escalationElement) {
                    const buttons = escalationElement.querySelectorAll('button');
                    buttons.forEach(btn => btn.disabled = true);
                    
                    // Afficher un message de traitement
                    const loadingDiv = document.createElement('div');
                    loadingDiv.style.cssText = `
                        background: rgba(50, 150, 50, 0.8);
                        color: white;
                        padding: 1rem;
                        border-radius: 8px;
                        margin: 1rem 0;
                        text-align: center;
                        font-weight: 500;
                    `;
                    loadingDiv.textContent = '√∞≈∏‚Äù‚Äû Cr√É¬©ation du ticket SEA en cours...';
                    escalationElement.appendChild(loadingDiv);
                }
                
                // Pr√É¬©parer les donn√É¬©es du ticket avec infos Podio enrichies
                const currentRoom = getCurrentRoom();
                const isClientDescription = description && !description.includes('Probl√É¬®me ') && description.length > 20;
                
                const baseDescription = `Probl√É¬®me ${problemType} signal√É¬© par un utilisateur via l'interface vitrine n√É¬©cessitant une intervention technique.`;
                const fullDescription = `${baseDescription}\n\nDescription : ${description}`;
                
                // √∞≈∏¬è¬¢ R√É¬©cup√É¬©rer les infos Podio du cache s'il existe
                const podioInfo = window.roomCache?.podioInfo;
                
                const ticketData = {
                    category: 'technical_issue',
                    priority: 'medium',
                    title: `Probl√É¬®me ${problemType} signal√É¬© via vitrine - Salle ${currentRoom}`,
                    description: fullDescription,
                    client_message: isClientDescription ? 
                        `Signalement via vitrine SAV Qonnect\n\nDescription client : ${description}` : 
                        `Signalement via vitrine SAV Qonnect\n\nMessage g√É¬©n√É¬©rique : ${description}`,
                    copilot_analysis: `Analyse automatique : intervention technique recommand√É¬©e`,
                    room: currentRoom,
                    device_name: 'Non sp√É¬©cifi√É¬©',
                    reporter_name: 'Utilisateur Vitrine',
                    // √∞≈∏‚Ä†‚Ä¢ INFOS PODIO ENRICHIES (si disponibles)
                    room_pavillon: podioInfo?.pavillon || null,
                    room_bassin: podioInfo?.bassin || null,
                    room_type: podioInfo?.type || null,
                    room_capacite: podioInfo?.capacite || null
                };
                
                console.log('√∞≈∏≈Ω¬´ [CreateTicket] Donn√É¬©es avec infos Podio:', {
                    room: currentRoom,
                    podioInfo: podioInfo,
                    hasPodioData: !!podioInfo
                });

                // √¢≈ì‚Ä¶ S'assurer d'utiliser le bon backend
                await ensureBackendConnection();
                
                // Appeler l'API pour cr√É¬©er le ticket
                const response = await fetch(`${currentAPI}/api/copilot/vitrine-create-ticket`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(ticketData)
                });

                // √¢≈ì‚Ä¶ CORRECTION: Supprimer le message de chargement seulement s'il existe
                if (escalationElement) {
                    const loadingDiv = escalationElement.querySelector('div[style*="background: rgba(50, 150, 50, 0.8)"]');
                    if (loadingDiv) {
                        loadingDiv.remove();
                    }
                }

                if (!response.ok) {
                    throw new Error(`Erreur serveur (${response.status}). Veuillez r√É¬©essayer plus tard.`);
                }

                const result = await response.json();
                
                if (result.success && result.ticket) {
                    // √¢≈ì‚Ä¶ AJOUTER LE TICKET √É‚Ç¨ LA SESSION pour √É¬©viter les doublons
                    addTicketToSession(result.ticket);
                    
                    // √¢≈ì‚Ä¶ CORRECTION: Fermer la banni√É¬®re SEA avec la bonne fonction
                    closeSEAEscalationBanner(escalationId);
                    
                    // √¢≈ì‚Ä¶ CORRECTION: Fermer toutes les banni√É¬®res de confirmation existantes AVANT d'en cr√É¬©er une nouvelle
                    const existingConfirmationBanners = document.querySelectorAll('[id^="confirmation_"]');
                    const existingConfirmationOverlays = document.querySelectorAll('[id^="overlay_confirmation_"]');
                    
                    existingConfirmationBanners.forEach(banner => {
                        console.log(`√∞≈∏≈°¬´ [CleanupConfirmationBanner] Suppression banni√É¬®re confirmation existante: ${banner.id}`);
                        banner.remove();
                    });
                    
                    existingConfirmationOverlays.forEach(overlay => {
                        console.log(`√∞≈∏≈°¬´ [CleanupConfirmationOverlay] Suppression overlay confirmation existant: ${overlay.id}`);
                        overlay.remove();
                    });
                    
                    // Cr√É¬©er la confirmation avec overlay plein √É¬©cran
                    const confirmationId = `confirmation_${Date.now()}`;
                    
                    // Cr√É¬©er l'overlay plein √É¬©cran avec flou agressif
                    const overlayDiv = document.createElement('div');
                    overlayDiv.id = `overlay_${confirmationId}`;
                    overlayDiv.style.cssText = `
                        position: fixed;
                        top: 0;
                        left: 0;
                        width: 100vw;
                        height: 100vh;
                        background: rgba(0, 0, 0, 0.8);
                        backdrop-filter: blur(20px);
                        z-index: 9998;
                        cursor: pointer;
                    `;
                    
                    // Cr√É¬©er la confirmation de ticket avec style moderne
                    const successDiv = document.createElement('div');
                    successDiv.id = confirmationId;
                    successDiv.style.cssText = `
                        background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
                        color: white;
                        border-radius: 12px;
                        padding: 2rem;
                        text-align: center;
                        box-shadow: 0 20px 40px rgba(76, 175, 80, 0.4);
                        position: fixed;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        z-index: 9999;
                        width: 90%;
                        max-width: 500px;
                        animation: fadeIn 0.3s ease-out;
                    `;
                    
                    successDiv.innerHTML = `
                        <div style="font-size: 3rem; margin-bottom: 1rem;">√∞≈∏≈Ω¬´</div>
                        <h3 style="margin: 0 0 1rem 0; font-size: 1.5rem; font-weight: 600;">Ticket SEA cr√É¬©√É¬© avec succ√É¬®s !</h3>
                        <div style="background: rgba(255,255,255,0.15); padding: 1.25rem; border-radius: 10px; margin: 1.5rem 0;">
                            <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>√∞≈∏‚Äú‚Äû Num√É¬©ro :</strong> ${result.ticket.ticket_number || result.ticket.id}</p>
                            <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>√∞≈∏¬è¬¢ Salle :</strong> ${result.ticket.room || 'Non sp√É¬©cifi√É¬©'}</p>
                            <p style="margin: 0.5rem 0; font-size: 1rem;"><strong>√∞≈∏‚Äù¬ß Type :</strong> Probl√É¬®me ${problemType}</p>
                        </div>
                        <p style="margin: 1.5rem 0; opacity: 0.95; font-size: 1rem; line-height: 1.4;">
                            L'√É¬©quipe SEA a re√É¬ßu votre demande et va traiter le probl√É¬®me rapidement.
                        </p>
                        <button onclick="closeTicketConfirmation('${confirmationId}')" style="
                            background: rgba(255,255,255,0.2);
                            border: 1px solid rgba(255,255,255,0.4);
                            color: white;
                            padding: 0.85rem 2rem;
                            border-radius: 8px;
                            cursor: pointer;
                            margin-top: 1rem;
                            font-size: 1rem;
                            font-weight: 500;
                            transition: all 0.3s ease;
                        " onmouseover="this.style.background='rgba(255,255,255,0.3)'" onmouseout="this.style.background='rgba(255,255,255,0.2)'">
                            √¢≈ì‚Ä¶ Fermer
                        </button>
                    `;
                    
                    // √¢≈ì‚Ä¶ CORRECTION: Fermer au clic sur l'overlay mais PAS sur les √É¬©l√É¬©ments internes
                    overlayDiv.onclick = (event) => {
                        if (event.target === overlayDiv) {
                            closeTicketConfirmation(confirmationId);
                        }
                    };
                    
                    // √¢≈ì‚Ä¶ Emp√É¬™cher la propagation des √É¬©v√É¬©nements depuis la banni√É¬®re
                    successDiv.onclick = (event) => {
                        event.stopPropagation();
                    };
                    
                    // Ajouter l'overlay et la confirmation au body
                    document.body.appendChild(overlayDiv);
                    document.body.appendChild(successDiv);
                    
                    console.log(`√∞≈∏≈Ω¬´ [CreateTicket] Ticket ${result.ticket.ticket_number} cr√É¬©√É¬© pour la salle ${currentRoom}`);
                } else {
                    throw new Error(result.message || 'Erreur lors de la cr√É¬©ation du ticket');
                }
                
            } catch (error) {
                console.error('Erreur lors de la cr√É¬©ation du ticket:', error);
                
                // √¢≈ì‚Ä¶ CORRECTION: Fermer la banni√É¬®re m√É¬™me en cas d'erreur
                closeSEAEscalationBanner(escalationId);
                
                showModal(
                    '√¢¬ù≈í',
                    'Erreur de cr√É¬©ation',
                    `Impossible de cr√É¬©er le ticket : ${error.message}\n\nVeuillez contacter le SEA directement au 6135.`,
                    'warning'
                );
            }
        }

        // ===== FONCTIONS UTILITAIRES =====
        
        // ===== CHAT SEA UTILITY FUNCTIONS =====
        function generateUUID() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }
        
        // ===== VERROUILLAGE DE SALLE =====
        function checkAndApplyRoomLock() {
            try {
                const lockData = localStorage.getItem('vitrine.room.lock');
                if (lockData) {
                    const lock = JSON.parse(lockData);
                    if (lock && lock.locked && lock.name) {
                        console.log('√∞≈∏‚Äù‚Äô [Lock] Salle verrouill√É¬©e d√É¬©tect√É¬©e:', lock.name);
                        
                        // Appliquer l'interface verrouill√É¬©e
                        document.documentElement.classList.add('is-room-locked');
                        
                        // Restaurer la salle dans le cache
                        const roomInfo = parseRoomInfo(lock.name);
                        if (roomInfo) {
                            setRoomCache(roomInfo);
                            
                            // Afficher directement l'assistant (pas la landing)
                            setTimeout(() => {
                                showAssistant();
                                console.log('√∞≈∏‚Äù‚Äô [Lock] Assistant affich√É¬© directement pour salle verrouill√É¬©e');
                                
                                // ===== CHAT SEA : D√É¬©marrer l'√É¬©coute des demandes de chat =====
                                startChatRequestListener();
                                
                                // ===== STATUS EVENTS : D√É¬©marrer l'√É¬©coute des changements de statut =====
                                startStatusEventSource();
                            }, 100);
                        }
                    }
                }
            } catch (error) {
                console.warn('√¢≈°¬†√Ø¬∏¬è [Lock] Erreur v√É¬©rification verrouillage:', error);
            }
        }
        
        function getClientIP() {
            // Simulation - en r√É¬©alit√É¬©, le serveur d√É¬©tecte l'IP
            return '192.168.1.100';
        }
        
        // ===== CHAT SEA FUNCTIONS =====
        function openChat(chatUrl) {
            const iframe = document.getElementById('chatIframe');
            if (iframe) {
                iframe.src = chatUrl;
            }
            document.getElementById('chatModal').classList.add('active');
        }
        
        async function closeChat() {
            try {
                // √¢≈ì‚Ä¶ NOUVEAU : S'assurer de la connexion backend avant fermeture
                await ensureBackendConnection();
                
                // √¢≈ì‚Ä¶ NOUVEAU : Informer le backend que Vitrine ferme le chat
                if (currentChatId) {
                    console.log('√∞≈∏‚Äù≈° [Vitrine] Fermeture du chat par l\'utilisateur');
                    
                    const response = await fetch(`${currentAPI}/api/tickets/chat/end`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            channel_id: currentChatId,
                            room_id: getCurrentRoom(),
                            ended_by: "vitrine" // √¢≈ì‚Ä¶ Indiquer que c'est Vitrine qui ferme
                        })
                    });
                    
                    if (response.ok) {
                        console.log('√¢≈ì‚Ä¶ [Vitrine] Chat ferm√É¬© avec succ√É¬®s c√É¬¥t√É¬© backend');
                    } else {
                        console.error('√¢¬ù≈í [Vitrine] Erreur lors de la fermeture du chat');
                    }
                }
            } catch (error) {
                console.error('√¢¬ù≈í [Vitrine] Erreur lors de la fermeture:', error);
            }
            
            // Fermer l'interface localement
            closeChatInterface();
        }
        
        // ===== CHAT PRIORITY MANAGEMENT =====
        let hiddenStatusBanners = []; // Stocke les banni√É¬®res masqu√É¬©es pour le chat
        
        function hideStatusBannersForChat() {
            console.log('√∞≈∏‚Äô¬¨ [ChatPriority] Masquage des banni√É¬®res de statut pour priorit√É¬© chat');
            hiddenStatusBanners = [];
            
            // Masquer la banni√É¬®re de statut de ticket si visible
            const statusContainer = document.getElementById('ticketStatusContainer');
            if (statusContainer && statusContainer.style.display !== 'none') {
                hiddenStatusBanners.push('ticketStatus');
                statusContainer.style.display = 'none';
                console.log('√∞≈∏‚Äô¬¨ [ChatPriority] Banni√É¬®re de statut masqu√É¬©e');
            }
            
            // Retirer le flou de la page
            removePageBlurEffect();
            console.log('√∞≈∏‚Äô¬¨ [ChatPriority] Flou de page retir√É¬© pour le chat');
        }
        
        function restoreStatusBannersAfterChat() {
            console.log('√∞≈∏‚Äô¬¨ [ChatPriority] Restauration des banni√É¬®res de statut apr√É¬®s chat');
            
            // Restaurer la banni√É¬®re de statut si elle √É¬©tait visible
            if (hiddenStatusBanners.includes('ticketStatus')) {
                const statusContainer = document.getElementById('ticketStatusContainer');
                if (statusContainer) {
                    statusContainer.style.display = 'flex';
                    // Remettre le flou si c'√É¬©tait une banni√É¬®re persistante
                    const statusType = statusContainer.getAttribute('data-status-type');
                    if (statusType === 'persistent') {
                        addPageBlurEffect();
                    }
                    console.log('√∞≈∏‚Äô¬¨ [ChatPriority] Banni√É¬®re de statut restaur√É¬©e');
                }
            }
            
            hiddenStatusBanners = [];
        }

        // ===== CHAT TIMEOUT BANNER FUNCTIONS =====
        function showChatTimeoutBanner() {
            console.log('√¢¬è¬∞ [ChatTimeout] Affichage banni√É¬®re de timeout');
            
            // Masquer la banni√É¬®re de consent si visible
            hideConsentBanner();
            
            // Masquer les banni√É¬®res de statut pour priorit√É¬© chat
            hideStatusBannersForChat();
            
            const banner = document.getElementById('chatTimeoutBanner');
            if (banner) {
                banner.style.display = 'block';
                
                setTimeout(() => {
                    banner.classList.add('show');
                }, 10);
            }
        }
        
        function closeTimeoutBanner() {
            console.log('√¢¬ù≈í [ChatTimeout] Fermeture banni√É¬®re de timeout');
            
            const banner = document.getElementById('chatTimeoutBanner');
            if (banner) {
                banner.style.display = 'none';
                banner.classList.remove('show');
            }
            
            // Restaurer les banni√É¬®res de statut
            restoreStatusBannersAfterChat();
        }
        
        async function initiateClientChat() {
            console.log('√∞≈∏‚Äô¬¨ [ChatTimeout] Client initie la conversation avec SEA');
            
            try {
                // √¢≈ì‚Ä¶ S'assurer d'utiliser le bon backend (localhost vs UQAM)
                await ensureBackendConnection();
                
                const response = await fetch(`${currentAPI}/api/tickets/chat/client-initiate`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        room_id: getCurrentRoom(),
                        message: 'Le client souhaite reprendre la conversation suite au timeout.'
                    })
                });
                
                if (response.ok) {
                    const data = await response.json();
                    console.log('√¢≈ì‚Ä¶ [ChatTimeout] Demande d\'initiation envoy√É¬©e:', data);
                    
                    // Fermer la banni√É¬®re de timeout
                    closeTimeoutBanner();
                    
                    // Afficher un message d'attente
                    showNotification('Demande de chat envoy√É¬©e au technicien SEA. En attente de r√É¬©ponse...');
                } else {
                    console.error('√¢¬ù≈í [ChatTimeout] Erreur lors de l\'initiation:', response.status);
                    showNotification('Erreur lors de l\'envoi de la demande de chat');
                }
            } catch (error) {
                console.error('√¢¬ù≈í [ChatTimeout] Erreur r√É¬©seau:', error);
                showNotification('Erreur de connexion');
            }
        }

        // ===== CONSENT BANNER FUNCTIONS =====
        function showConsentBanner(ticketNumber, roomId = null) {
            // √¢≈ì‚Ä¶ NOUVEAU : Masquer les banni√É¬®res de statut pour priorit√É¬© chat
            hideStatusBannersForChat();
            
            document.getElementById('consentTicketNumber').textContent = ticketNumber;
            
            // Afficher le nom de la salle si fourni
            if (roomId) {
                document.getElementById('consentRoomName').textContent = roomId;
            } else {
                document.getElementById('consentRoomName').textContent = getCurrentRoom() || 'Inconnue';
            }
            
            document.getElementById('consentBanner').style.display = 'block';
            
            // √¢≈ì‚Ä¶ NOUVEAU : Afficher banni√É¬®re de timeout apr√É¬®s 30 secondes au lieu de fermer
            setTimeout(() => {
                if (document.getElementById('consentBanner').style.display !== 'none') {
                    console.log('√¢¬è¬∞ [ChatTimeout] Timeout de 30s - Affichage banni√É¬®re de timeout');
                    showChatTimeoutBanner();
                }
            }, 30000);
        }
        
        function hideConsentBanner() {
            const banner = document.getElementById('consentBanner');
            banner.style.animation = 'slideOutRight 0.5s ease-in';
            setTimeout(() => {
                banner.style.display = 'none';
                banner.style.animation = '';
            }, 500);
        }
        
        async function acceptChat() {
            try {
                // √¢≈ì‚Ä¶ NOUVEAU : S'assurer de la connexion backend avant acceptation
                await ensureBackendConnection();
                
                console.log('√¢≈ì‚Ä¶ [Consent] Chat accept√É¬©');
                
                const response = await fetch(`${currentAPI}/api/tickets/chat/consent`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        room_id: getCurrentRoom(),
                        action: 'accept',
                        channel_id: currentChatId // √¢≈ì‚Ä¶ CORRECTION : utiliser channel_id au lieu de chat_id
                    })
                });
                
                if (response.ok) {
                    hideConsentBanner();
                    openChatInterface();
                }
                
            } catch (error) {
                console.error('√¢¬ù≈í [Consent] Erreur acceptation:', error);
            }
        }
        
        async function declineChat() {
            try {
                // √¢≈ì‚Ä¶ NOUVEAU : S'assurer de la connexion backend avant refus
                await ensureBackendConnection();
                
                console.log('√¢¬ù≈í [Consent] Chat refus√É¬© par le client');
                console.log('√∞≈∏‚Äù‚Äî [Consent] Channel ID:', currentChatId);
                console.log('√∞≈∏¬è¬† [Consent] Room ID:', getCurrentRoom());
                
                const response = await fetch(`${currentAPI}/api/tickets/chat/consent`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        room_id: getCurrentRoom(),
                        action: 'decline',
                        channel_id: currentChatId // √¢≈ì‚Ä¶ CORRECTION : utiliser channel_id au lieu de chat_id
                    })
                });
                
                if (response.ok) {
                    console.log('√¢≈ì‚Ä¶ [Consent] Refus envoy√É¬© au serveur avec succ√É¬®s');
                } else {
                    console.error('√¢¬ù≈í [Consent] Erreur serveur lors du refus:', response.status);
                }
                
                hideConsentBanner();
                currentChatId = null;
                
                // √¢≈ì‚Ä¶ NOUVEAU : Restaurer les banni√É¬®res de statut apr√É¬®s refus du chat
                restoreStatusBannersAfterChat();
                
            } catch (error) {
                console.error('√¢¬ù≈í [Consent] Erreur refus:', error);
            }
        }
        
        // ===== CHAT INTERFACE FUNCTIONS =====
        function openChatInterface() {
            // √¢≈ì‚Ä¶ NOUVEAU : Masquer les banni√É¬®res de statut pour priorit√É¬© chat
            hideStatusBannersForChat();
            
            document.getElementById('chatModal').classList.add('active');
            
            // Ajouter le message d'accueil automatique
            const messagesContainer = document.getElementById('chatMessages');
            if (messagesContainer && messagesContainer.children.length === 0) {
                const welcomeMessage = document.createElement('div');
                welcomeMessage.className = 'chat-message system-message';
                welcomeMessage.innerHTML = `
                    <div class="system-message-content">
                        <i class="fas fa-headset"></i>
                        <div class="system-message-text">
                            <strong>Bonjour ! √∞≈∏‚Äò‚Äπ</strong><br>
                            Je suis le technicien audiovisuel du SEA (Service Expert Audiovisuel).<br>
                            <em>Comment puis-je vous aider aujourd'hui ?</em>
                        </div>
                    </div>
                `;
                messagesContainer.appendChild(welcomeMessage);
            }
            
            document.getElementById('chatInput').focus();
        }
        
        function closeChatInterface() {
            document.getElementById('chatModal').classList.remove('active');
            document.getElementById('chatMessages').innerHTML = '';
            document.getElementById('chatInput').value = '';
            currentChatId = null;
            
            // √¢≈ì‚Ä¶ NOUVEAU : Restaurer les banni√É¬®res de statut apr√É¬®s fermeture du chat
            restoreStatusBannersAfterChat();
            
            if (chatEventSource) {
                chatEventSource.close();
                chatEventSource = null;
            }
        }
        
        function handleChatKeyPress(event) {
            if (event.key === 'Enter') {
                sendChatMessage();
            }
        }
        
        async function sendChatMessage() {
            const input = document.getElementById('chatInput');
            const message = input.value.trim();
            
            if (!message || !currentChatId) return;
            
            try {
                // √¢≈ì‚Ä¶ NOUVEAU : S'assurer de la connexion backend avant envoi
                await ensureBackendConnection();
                
                console.log(`√∞≈∏‚Äù¬ç [DEBUG-VITRINE] Envoi message avec channel_id: "${currentChatId}"`);
                console.warn(`√∞≈∏≈°¬® [DEBUG-VISIBLE] VITRINE ENVOIE AVEC CHANNEL_ID: "${currentChatId}"`);
                
                const response = await fetch(`${currentAPI}/api/tickets/chat/message`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        channel_id: currentChatId,
                        room_id: getCurrentRoom(),
                        message: message,
                        sender: 'vitrine'
                    })
                });
                
                if (response.ok) {
                    addChatMessage(message, 'sent');
                    input.value = '';
                }
                
            } catch (error) {
                console.error('√¢¬ù≈í [Chat] Erreur envoi message:', error);
            }
        }
        
        function addChatMessage(message, type) {
            const messagesContainer = document.getElementById('chatMessages');
            
            // V√É¬©rifier si le message n'existe pas d√É¬©j√É¬† (√É¬©viter les doublons)
            const existingMessages = messagesContainer.querySelectorAll('.chat-message');
            for (let msg of existingMessages) {
                if (msg.textContent === message && msg.className.includes(type)) {
                    console.log('√¢≈°¬†√Ø¬∏¬è [Chat] Message en double d√É¬©tect√É¬©, ignor√É¬©:', message);
                    return;
                }
            }
            
            const messageElement = document.createElement('div');
            messageElement.className = `chat-message ${type}`;
            messageElement.textContent = message;
            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            
            console.log(`√¢≈ì‚Ä¶ [Chat] Message ajout√É¬©: ${type} - ${message}`);
        }
        
        // ===== CHAT EVENT SOURCE - SUPPRIM√É‚Ä∞ =====
        // Remplac√É¬© par startChatRequestListener() qui g√É¬®re tout via /api/tickets/chat/stream
        
        // ===== CHAT REQUEST LISTENER R√É‚Ä∞EL =====
        function startChatRequestListener() {
            if (!getCurrentRoom()) return;
            
            const roomId = getCurrentRoom();
            console.log(`√∞≈∏‚Äô¬¨ [Chat] D√É¬©marrage √É¬©coute SSE R√É‚Ä∞ELLE pour salle ${roomId}`);
            
            // √¢≈ì‚Ä¶ CORRIG√É‚Ä∞ : Utiliser currentAPI maintenant que l'initialisation est termin√É¬©e
            const sseUrl = `${currentAPI}/api/tickets/chat/stream?room_id=${roomId}`;
            
            // √¢≈°¬†√Ø¬∏¬è DEBUG : V√É¬©rifier qu'on n'a pas d√É¬©j√É¬† une connexion active
            if (window.vitrineChatEventSource) {
                console.log('√¢≈°¬†√Ø¬∏¬è [SSE] Fermeture connexion existante pour √É¬©viter duplication');
                window.vitrineChatEventSource.close();
            }
            
            const eventSource = new EventSource(sseUrl);
            window.vitrineChatEventSource = eventSource; // Stocker pour √É¬©viter duplicata
            
            eventSource.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);
                    console.log('√∞≈∏‚Äú¬° [SSE] √É‚Ä∞v√É¬©nement R√É‚Ä∞EL re√É¬ßu:', data);
                    
                    switch (data.type) {
                        case 'connection_established':
                            console.log('√¢≈ì‚Ä¶ [SSE] Connexion R√É‚Ä∞ELLE √É¬©tablie pour salle ' + roomId);
                            showNotification('Connexion chat √É¬©tablie - En attente des demandes SEA');
                            break;
                            
                        case 'chat_initiated':
                            // Une demande de chat R√É‚Ä∞ELLE est arriv√É¬©e depuis Tickets SEA
                            console.log('√∞≈∏‚Äô¬¨ [SSE] Demande de chat R√É‚Ä∞ELLE re√É¬ßue:', data.data);
                            currentChatId = data.data.channel_id;
                            showConsentBanner(`Demande de chat pour salle ${roomId}`, roomId);
                            break;
                            
                        case 'chat_ended':
                            // √¢≈ì‚Ä¶ NOUVEAU : V√É¬©rifier QUI a ferm√É¬© le chat
                            const endedBy = data.data?.ended_by || 'unknown';
                            console.log('√∞≈∏‚Ä∫‚Äò [SSE] Chat termin√É¬© par:', endedBy);
                            
                            hideConsentBanner();
                            closeChatInterface();
                            
                            // √¢≈ì‚Ä¶ LOGIQUE CORRECTE : Afficher le bon message selon qui a ferm√É¬©
                            if (endedBy === 'vitrine') {
                                // Le client a ferm√É¬© √¢‚Ä†‚Äô Pas de notification (il le sait d√É¬©j√É¬†)
                                console.log('√¢‚Äû¬π√Ø¬∏¬è [SSE] Chat ferm√É¬© par le client - Pas de notification');
                            } else if (endedBy.startsWith('tickets_sea')) {
                                // Le technicien a ferm√É¬© √¢‚Ä†‚Äô Notification appropri√É¬©e
                                if (endedBy === 'tickets_sea_with_summary') {
                                    showNotification('Chat termin√É¬© par le technicien - R√É¬©sum√É¬© cr√É¬©√É¬©');
                                } else if (endedBy === 'tickets_sea_no_summary') {
                                    showNotification('Chat termin√É¬© par le technicien');
                                } else {
                                    showNotification('Chat termin√É¬© par l\'op√É¬©rateur SEA');
                                }
                            } else {
                                // Fermeture inconnue √¢‚Ä†‚Äô Message g√É¬©n√É¬©rique
                                showNotification('Chat termin√É¬©');
                            }
                            
                            currentChatId = null;
                            
                            // √¢≈ì‚Ä¶ NOUVEAU : Assurer la restauration des banni√É¬®res m√É¬™me si ferm√É¬© c√É¬¥t√É¬© serveur
                            restoreStatusBannersAfterChat();
                            break;

                        case 'chat_interface_open':
                            console.log('√∞≈∏‚Äô¬¨ [SSE] Ouverture interface de chat demand√É¬©e:', data.data);
                            // √¢≈ì‚Ä¶ NOUVEAU : Mettre √É¬† jour currentChatId avec le channel_id du chat accept√É¬©
                            if (data.data && data.data.channel_id) {
                                currentChatId = data.data.channel_id;
                                console.log('√¢≈ì‚Ä¶ [SSE] currentChatId mis √É¬† jour:', currentChatId);
                            }
                            hideConsentBanner();
                            openChatInterface();
                            showNotification('Chat d√É¬©marr√É¬© - Interface ouverte');
                            break;

                        case 'chat_message':
                            console.log('√∞≈∏‚Äô¬¨ [SSE] Message re√É¬ßu:', data.data);
                            // √É‚Ä∞viter d'ajouter les messages envoy√É¬©s par Vitrine (ils sont d√É¬©j√É¬† affich√É¬©s)
                            if (data.data.sender && data.data.sender !== 'vitrine') {
                                addChatMessage(data.data.message, 'received');
                            } else if (!data.data.sender) {
                                // Si pas de sender, traiter comme message re√É¬ßu
                                addChatMessage(data.data.message, 'received');
                            }
                            break;
                            
                        default:
                            console.log('√∞≈∏‚Äú¬° [SSE] √É‚Ä∞v√É¬©nement non g√É¬©r√É¬©:', data.type);
                    }
                } catch (error) {
                    console.error('√¢¬ù≈í [SSE] Erreur parsing √É¬©v√É¬©nement:', error);
                }
            };
            
            eventSource.onerror = function(error) {
                console.error('√¢¬ù≈í [SSE] Erreur de connexion SSE R√É‚Ä∞ELLE:', error);
                // Reconnexion automatique avec backoff exponentiel
                setTimeout(() => {
                    if (getCurrentRoom()) {
                        console.log('√∞≈∏‚Äù‚Äû [SSE] Tentative de reconnexion...');
                        startChatRequestListener();
                    }
                }, 5000);
            };
            
            eventSource.onopen = function() {
                console.log('√¢≈ì‚Ä¶ [SSE] Connexion SSE R√É‚Ä∞ELLE √É¬©tablie pour salle ' + roomId);
            };
        }
        
        // ===== STATUS CHANGE LISTENER POUR TICKETS SEA =====
        let statusEventSource = null;
        
        function startStatusEventSource() {
            const currentRoom = getCurrentRoom();
            if (!currentRoom) {
                console.log('√∞≈∏‚Äù‚Äù [StatusEvents] Pas de salle d√É¬©finie, EventSource non d√É¬©marr√É¬©');
                return;
            }

            // Fermer l'EventSource existant s'il y en a un
            if (statusEventSource) {
                statusEventSource.close();
                statusEventSource = null;
            }

            // √¢≈ì‚Ä¶ R√É‚Ä∞ACTIV√É‚Ä∞ : EventSource pour les changements de statuts des tickets
            console.log('√∞≈∏‚Äù‚Äù [StatusEvents] D√É¬©marrage EventSource pour changements de statuts');
            
            // √¢≈ì‚Ä¶ CORRIG√É‚Ä∞ : Utiliser currentAPI maintenant que l'initialisation est termin√É¬©e
            const sseUrl = `${currentAPI}/api/tickets/chat/events/vitrine?room_id=${currentRoom}`;
            statusEventSource = new EventSource(sseUrl);

            statusEventSource.onopen = function() {
                console.log('√∞≈∏‚Äù‚Äù [StatusEvents] EventSource ouvert pour les changements de statut de la salle ' + currentRoom);
            };

            statusEventSource.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);
                    console.log('√∞≈∏‚Äù‚Äù [StatusEvents] √É‚Ä∞v√É¬©nement re√É¬ßu:', data);
                    
                    // √¢≈ì‚Ä¶ DEBUG COMPLET : Analyser la structure de l'√É¬©v√É¬©nement
                    console.log('√∞≈∏‚Äù‚Äù [StatusEvents] Type de data:', typeof data);
                    console.log('√∞≈∏‚Äù‚Äù [StatusEvents] Propri√É¬©t√É¬©s de data:', Object.keys(data));
                    console.log('√∞≈∏‚Äù‚Äù [StatusEvents] data.Type:', data.Type);
                    console.log('√∞≈∏‚Äù‚Äù [StatusEvents] data.type:', data.type);
                    console.log('√∞≈∏‚Äù‚Äù [StatusEvents] data.Data:', data.Data);
                    console.log('√∞≈∏‚Äù‚Äù [StatusEvents] data.data:', data.data);

                    // √¢≈ì‚Ä¶ CORRECTION FINALE : Utiliser les champs minuscules !
                    if (data.type === 'ticket_status_change') {
                        // V√É¬©rifier que l'√É¬©v√É¬©nement concerne la salle courante
                        if (data.data && data.data.room === currentRoom) {
                            console.log('√∞≈∏‚Äù‚Äù [StatusEvents] Changement de statut d√É¬©tect√É¬© pour cette salle:', data.data);
                            // √¢≈ì‚Ä¶ NOUVEAU : Passer le statut pour d√É¬©terminer si c'est persistant
                            showTicketStatusMessage(data.data.message, data.data.status);
                        }
                    } else if (data.type === 'connection_established') {
                        console.log('√∞≈∏‚Äù‚Äù [StatusEvents] Connexion SSE √É¬©tablie pour salle:', data.data.room_id);
                    }
                } catch (error) {
                    console.error('√∞≈∏‚Äù‚Äù [StatusEvents] Erreur parsing √É¬©v√É¬©nement:', error);
                }
            };

            statusEventSource.onerror = function(error) {
                console.error('√∞≈∏‚Äù‚Äù [StatusEvents] Erreur EventSource:', error);
                // Tentative de reconnexion apr√É¬®s 5 secondes
                setTimeout(() => {
                    if (statusEventSource && statusEventSource.readyState === EventSource.CLOSED) {
                        console.log('√∞≈∏‚Äù‚Äù [StatusEvents] Tentative de reconnexion EventSource...');
                        startStatusEventSource();
                    }
                }, 5000);
            };
        }
        
        function showTicketStatusMessage(message, statusType) {
            const statusContainer = document.getElementById('ticketStatusContainer') || createTicketStatusContainer();
            
            // √¢≈ì‚Ä¶ NOUVEAU : D√É¬©terminer le style bas√É¬© sur le type de statut
            let iconClass, bgColor;
            const isPersistent = statusType && (statusType === 'in_progress' || statusType === 'resolved');
            const statusClass = isPersistent ? 'persistent-status' : 'temporary-status';
            
            switch (statusType) {
                case 'in_progress':
                    iconClass = 'fas fa-wrench';
                    bgColor = '#17a2b8';
                    break;
                case 'resolved':
                    iconClass = 'fas fa-check-circle';
                    bgColor = '#28a745';
                    break;
                case 'closed':
                    iconClass = 'fas fa-lock';
                    bgColor = '#6c757d';
                    break;
                case 'open':
                    iconClass = 'fas fa-clipboard';
                    bgColor = '#007bff';
                    break;
                default:
                    iconClass = 'fas fa-info-circle';
                    bgColor = '#007bff';
                    break;
            }
            
            // √¢≈ì‚Ä¶ NOUVEAU : Banni√É¬®re sp√É¬©ciale pour EN COURS avec num√É¬©ro d'urgence et sans bouton X
            if (statusType === 'in_progress') {
                statusContainer.innerHTML = `
                    <div class="ticket-status-message ${statusClass}" style="background-color: ${bgColor}; color: white; padding: 20px; border-radius: 12px; box-shadow: 0 8px 25px rgba(0,0,0,0.2); font-size: 15px; text-align: center;">
                        <div style="display: flex; align-items: center; justify-content: center; margin-bottom: 15px;">
                            <i class="${iconClass}" style="margin-right: 12px; font-size: 18px;"></i>
                            <span style="font-weight: 500;">${message}</span>
                        </div>
                        <div style="border-top: 1px solid rgba(255,255,255,0.3); padding-top: 15px; font-size: 14px;">
                            <div style="display: flex; align-items: center; justify-content: center; margin-bottom: 8px;">
                                <i class="fas fa-phone" style="margin-right: 8px; font-size: 14px;"></i>
                                <span style="font-weight: 400;">Pour une urgence, contactez le SEA :</span>
                            </div>
                            <div style="font-size: 18px; font-weight: bold;">
                                √∞≈∏‚Äú≈æ <a href="tel:6135" style="color: white; text-decoration: none;">6135</a>
                            </div>
                        </div>
                    </div>
                `;
            } else {
                // Banni√É¬®re normale pour les autres statuts
                statusContainer.innerHTML = `
                    <div class="ticket-status-message ${statusClass}" style="background-color: ${bgColor}; color: white; padding: 20px; border-radius: 12px; box-shadow: 0 8px 25px rgba(0,0,0,0.2); font-size: 15px; text-align: center;">
                        <div style="display: flex; align-items: center; justify-content: space-between;">
                            <div style="display: flex; align-items: center; width: 100%;">
                                <i class="${iconClass}" style="margin-right: 12px; font-size: 18px;"></i>
                                <span style="font-weight: 500; flex: 1;">${message}</span>
                            </div>
                            ${isPersistent && statusType !== 'in_progress' ? `<button onclick="hideTicketStatusMessage()" style="background: rgba(255,255,255,0.2); border: none; color: white; cursor: pointer; font-size: 16px; padding: 8px; border-radius: 50%; margin-left: 15px; min-width: 32px; height: 32px;"><i class="fas fa-times"></i></button>` : ''}
                        </div>
                    </div>
                `;
            }
            statusContainer.style.display = 'block';
            
            // √¢≈ì‚Ä¶ NOUVEAU : Effet blur sur la page pour les banni√É¬®res importantes
            if (statusType === 'open' || statusType === 'in_progress' || statusType === 'resolved') {
                addPageBlurEffect();
            }
            
            // √¢≈ì‚Ä¶ NOUVEAU : Les statuts temporaires disparaissent apr√É¬®s 5 secondes, les persistants restent
            if (!isPersistent) {
                setTimeout(() => {
                    hideTicketStatusMessage();
                }, 5000);
            }
            
            console.log(`√∞≈∏‚Äù‚Äù [Status] Message affich√É¬© (${isPersistent ? 'PERSISTANT' : 'TEMPORAIRE'}): ${message}`);
        }
        
        function hideTicketStatusMessage() {
            const statusContainer = document.getElementById('ticketStatusContainer');
            if (statusContainer) {
                statusContainer.style.display = 'none';
                // √¢≈ì‚Ä¶ NOUVEAU : Retirer l'effet blur quand on ferme la banni√É¬®re
                removePageBlurEffect();
            }
        }
        
        // √¢≈ì‚Ä¶ NOUVEAU : Fonctions pour g√É¬©rer l'effet blur et blocage des interactions
        function addPageBlurEffect() {
            // Cr√É¬©er un overlay blur si il n'existe pas
            let blurOverlay = document.getElementById('pageBlurOverlay');
            if (!blurOverlay) {
                blurOverlay = document.createElement('div');
                blurOverlay.id = 'pageBlurOverlay';
                blurOverlay.style.cssText = `
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0, 0, 0, 0.4);
                    backdrop-filter: blur(8px);
                    -webkit-backdrop-filter: blur(8px);
                    z-index: 10000;
                    pointer-events: auto;
                    opacity: 0;
                    transition: opacity 0.3s ease;
                    cursor: default;
                `;
                
                document.body.appendChild(blurOverlay);
            }
            
            // ‚úÖ CORRECTION : V√©rifier que blurOverlay existe avant d'ajouter les √©v√©nements
            if (blurOverlay) {
                // ‚úÖ NOUVEAU : Bloquer tous les clics sur l'overlay
                blurOverlay.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                });
                
                // √¢≈ì‚Ä¶ NOUVEAU : Bloquer le scroll et autres interactions
                blurOverlay.addEventListener('wheel', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                });
            }
            
            // √¢≈ì‚Ä¶ NOUVEAU : Bloquer le scroll sur le body
            document.body.style.overflow = 'hidden';
            
            // Afficher l'overlay avec animation
            setTimeout(() => {
                blurOverlay.style.opacity = '1';
            }, 10);
        }
        
        function removePageBlurEffect() {
            const blurOverlay = document.getElementById('pageBlurOverlay');
            if (blurOverlay) {
                blurOverlay.style.opacity = '0';
                
                // √¢≈ì‚Ä¶ NOUVEAU : R√É¬©tablir le scroll sur le body
                document.body.style.overflow = '';
                
                setTimeout(() => {
                    if (blurOverlay.parentNode) {
                        blurOverlay.parentNode.removeChild(blurOverlay);
                    }
                }, 300);
            }
        }
        
        function createTicketStatusContainer() {
            const container = document.createElement('div');
            container.id = 'ticketStatusContainer';
            container.className = 'ticket-status-container';
            container.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 10001;
                max-width: 600px;
                width: 90%;
                display: none;
            `;
            document.body.appendChild(container);
            return container;
        }
        
        // ===== NOTIFICATION FUNCTION =====
        function showNotification(message) {
            const notification = document.createElement('div');
            notification.className = 'notification';
            notification.innerHTML = `
                <div class="notification-content">
                    <i class="fas fa-info-circle" aria-hidden="true"></i>
                    <span>${message}</span>
                </div>
            `;
            
            notification.style.cssText = `
                position: fixed;
                top: 120px;
                right: 20px;
                background: linear-gradient(135deg, #10b981 0%, #059669 100%);
                color: white;
                padding: 1rem 1.5rem;
                border-radius: 12px;
                box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
                z-index: 10003;
                animation: slideInRight 0.5s ease-out;
                font-weight: 600;
                min-width: 250px;
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.style.animation = 'slideOutRight 0.5s ease-in';
                setTimeout(() => {
                    if (notification.parentNode) {
                        document.body.removeChild(notification);
                    }
                }, 500);
            }, 3000);
        }

        /**
         * Formate le contenu HTML
         */
        function formatContent(content) {
            return content
                .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                .replace(/\*(.*?)\*/g, '<em>$1</em>')
                .replace(/\n/g, '<br>');
        }

        /**
         * Ferme une escalade
         */
        function dismissEscalation(escalationId) {
            const escalationElement = document.getElementById(escalationId);
            if (escalationElement) {
                escalationElement.remove();
            }
        }

        /**
         * Supprime un message
         */
        function removeMessage(messageId) {
            const messageElement = document.getElementById(messageId);
            if (messageElement) {
                messageElement.remove();
            }
        }



        /**
         * Affiche la modale avec le r√É¬©sultat
         */
        function showModal(icon, title, message, type) {
            const modalOverlay = document.getElementById('modalOverlay');
            const modalIcon = document.getElementById('modalIcon');
            const modalTitle = document.getElementById('modalTitle');
            const modalMessage = document.getElementById('modalMessage');
            
            modalIcon.textContent = icon;
            modalTitle.textContent = title;
            modalMessage.textContent = message;
            
            // Appliquer des styles selon le type
            const modal = document.getElementById('modal');
            modal.className = 'modal';
            if (type === 'success') {
                modal.style.borderLeft = '4px solid var(--primary-green)';
            } else if (type === 'warning') {
                modal.style.borderLeft = '4px solid var(--primary-orange)';
            } else if (type === 'info') {
                modal.style.borderLeft = '4px solid var(--primary-blue)';
            }
            
            modalOverlay.classList.add('active');
        }

        /**
         * Ferme la modale
         */
        function closeModal() {
            const modalOverlay = document.getElementById('modalOverlay');
            modalOverlay.classList.remove('active');
            
            // Retour automatique √É¬† l'accueil apr√É¬®s un d√É¬©lai
            setTimeout(() => {
                returnToHome();
            }, 300);
        }



        // ===== GESTIONNAIRES D'√É‚Ä∞V√É‚Ä∞NEMENTS =====

        // Fermer la modale en cliquant sur l'overlay
        const modalOverlay = document.getElementById('modalOverlay');
        if (modalOverlay) {
            modalOverlay.addEventListener('click', function(e) {
                if (e.target === this) {
                    closeModal();
                }
            });
        }

        // Fermer la modale avec la touche Escape
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeModal();
            }
        });

        // ===== FONCTIONS DE L'ORIGINAL =====

        function addMessage(type, content, data = {}) {
            // √¢≈ì‚Ä¶ BLOQUER COMPL√ÉÀÜTEMENT : Si c'est une action automatique ex√É¬©cut√É¬©e, ne rien afficher dans le chat
            if (data.auto_executed && data.auto_result) {
                // √¢≈ì‚Ä¶ NOUVEAU: D√É¬©tecter les allumages de projecteur (actions + auto_result)
                const isProjectorPowerOnFromActions = data.actions && data.actions.some(action => 
                    action.type === 'pjlink_power' && 
                    (action.command === 'power_on' || action.description?.toLowerCase().includes('allumer'))
                );
                
                const isProjectorPowerOnFromResult = data.auto_result && 
                    (data.auto_result.toLowerCase().includes('allumer') && 
                     (data.auto_result.includes('PROJ-') || data.auto_result.toLowerCase().includes('projecteur')));
                
                const isAVMuteAction = data.auto_result && 
                    (data.auto_result.toLowerCase().includes('av mute') || 
                     data.auto_result.toLowerCase().includes('d√É¬©sactiver') && data.auto_result.includes('PROJ-'));
                
                // √¢≈ì‚Ä¶ LOGIQUE SIMPLIFI√É‚Ä∞E : Banni√É¬®re verte simple pour TOUTES les corrections automatiques
                console.log('√¢≈ì‚Ä¶ [AutoCorrection] Action automatique r√É¬©ussie - Banni√É¬®re verte simple');
                setTimeout(() => {
                    showAutoResultBanner(data.auto_result);
                }, 500);
                return; // Ne pas cr√É¬©er de message dans le chat
            }
            
            const messageId = `msg_${Date.now()}_${++messageCount}`;
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${type}`;
            messageDiv.id = messageId;

            let messageContent = '';

            if (data.isLoading) {
                messageContent = `
                    <div class="message-content">
                        <div class="loading">
                            <div class="loading-dots">
                                <div class="loading-dot"></div>
                                <div class="loading-dot"></div>
                                <div class="loading-dot"></div>
                            </div>
                            <span>Analyse en cours...</span>
                        </div>
                    </div>
                `;
            } else {
                messageContent = `<div class="message-content">`;
                
                if (type === 'user') {
                    messageContent += `<strong>Vous :</strong> ${content}`;
                } else {
                    // √¢≈ì‚Ä¶ FILTRER : Supprimer les messages d'actions automatiques du contenu principal
                    let filteredContent = content;
                    if (typeof filteredContent === 'string') {
                        // Supprimer les lignes contenant des messages d'actions automatiques
                        filteredContent = filteredContent
                            .split('\n')
                            .filter(line => !line.includes('Actions automatiques ex√É¬©cut√É¬©es'))
                            .filter(line => !line.match(/^√¢≈ì‚Ä¶.*D√É¬©sactiver.*sourdine/))
                            .filter(line => !line.match(/^√¢≈ì‚Ä¶.*TCC2.*sourdine/))
                            .filter(line => !line.match(/^√¢≈ì‚Ä¶.*[Aa]ction.*automatique/))
                            .filter(line => line.trim() !== '')
                            .join('\n');
                    }
                    messageContent += formatContent(filteredContent);
                }
                
                // Actions manuelles uniquement (les actions automatiques sont g√É¬©r√É¬©es par la banni√É¬®re centr√É¬©e)
                if (data.actions && data.actions.length > 0) {
                    const manualActions = data.actions.filter(action => !(action.executed || data.auto_executed));
                    if (manualActions.length > 0) {
                    messageContent += '<div class="message-actions">';
                        manualActions.forEach(action => {
                            messageContent += `<button class="action-btn" onclick="executeAction('${action.type}', '${action.device_id || 0}', ${JSON.stringify(action.parameters || {}).replace(/"/g, '&quot;')})">√∞≈∏‚Äù¬ß ${action.description || action.label || action.type}</button>`;
                    });
                    messageContent += '</div>';
                }
                }

                // √¢≈ì‚Ä¶ Les actions automatiques sont g√É¬©r√É¬©es au d√É¬©but de addMessage (pas ici)
                
                // √¢≈ì‚Ä¶ CORRECTION: Escalade avec banni√É¬®re centr√É¬©e - v√É¬©rifier les tickets existants
                if (data.escalation_needed) {
                    setTimeout(() => {
                        const currentRoom = getCurrentRoom();
                        if (hasExistingTicket(currentRoom)) {
                            const lastTicket = getLastSessionTicket(currentRoom);
                            console.log(`√∞≈∏≈Ω¬´ [TicketExistant] Escalade demand√É¬©e mais ticket ${lastTicket.number} existe √¢‚Ä†‚Äô Banni√É¬®re ticket existant`);
                            showExistingTicketBanner(lastTicket);
                        } else {
                            showSEAEscalationBanner(data);
                        }
                    }, 500);
                }
                
                // √¢≈ì‚Ä¶ Actions automatiques d√É¬©j√É¬† g√É¬©r√É¬©es au d√É¬©but de addMessage
                
                messageContent += '</div>';
            }

            messageDiv.innerHTML = messageContent;
            
            // √¢≈ì‚Ä¶ NOUVEAU : Remplacer le contenu au lieu d'ajouter
            const assistantPage = document.getElementById('assistantPage');
            
            // Supprimer tous les messages pr√É¬©c√É¬©dents
            const existingMessages = assistantPage.querySelectorAll('.message');
            existingMessages.forEach(msg => msg.remove());
            
            // Ajouter le nouveau message
            assistantPage.appendChild(messageDiv);
            
            // Charger l'image SEA2 pour les banni√É¬®res d'escalade
            setTimeout(async () => {
                const escalationImgs = messageDiv.querySelectorAll('.sea-escalation-image');
                for (const img of escalationImgs) {
                    if (img && img.id && img.id.includes('sea-logo-escalation')) {
                        await updateSEALogo(img);
                    }
                }
            }, 100);

            return messageId;
        }



        // ===== CACHE PODIO SESSION POUR INFOS SALLES =====
        
        /**
         * Cache session pour les informations Podio des salles
         * Garde les donn√É¬©es jusqu'au F5 de la page
         */
        class PodioRoomCache {
            constructor() {
                this.cache = new Map();
                this.maxCacheSize = 50; // Limite m√É¬©moire
                console.log('√∞≈∏¬è¬¢ [PodioCache] Cache Podio initialis√É¬©');
            }
            
            /**
             * R√É¬©cup√É¬®re les informations d'une salle avec cache session
             */
            async getRoomInfo(roomName) {
                // √∞≈∏‚Äô¬æ Check cache first (session seulement)
                if (this.cache.has(roomName)) {
                    console.log(`√∞≈∏‚Äú‚Äπ [PodioCache] Cache hit pour salle: ${roomName}`);
                    return this.cache.get(roomName);
                }
                
                try {
                    // √¢≈ì‚Ä¶ NOUVEAU : S'assurer de la connexion backend avant appel Podio
                    const apiUrl = await ensureBackendConnection();
                    
                    console.log(`√∞≈∏≈í¬ê [PodioCache] API call pour salle: ${roomName}`);
                    
                    // √∞≈∏¬ê¬ç Appel API Podio PRIORITAIRE avec fallback NeonDB si √É¬©chec - √¢≈ì‚Ä¶ UTILISER apiUrl
                    const response = await fetch(
                        `${apiUrl}/api/podio/public-room-info?room=${encodeURIComponent(roomName)}`,
                        {
                            method: 'GET',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            // √∞≈∏‚Ä¢¬ê Timeout pour √É¬©viter blocage
                            signal: AbortSignal.timeout(10000) // 10s timeout
                        }
                    );
                    
                    if (!response.ok) {
                        if (response.status === 429) {
                            throw new Error('Rate limit atteint - veuillez patienter');
                        }
                        throw new Error(`HTTP ${response.status}: Salle non trouv√É¬©e`);
                    }
                    
                    const data = await response.json();
                    
                    // √¢≈ì‚Ä¶ PODIO SUCC√ÉÀÜS: Parser la r√É¬©ponse Podio normale
                    if (data.success && data.details) {
                        console.log(`√¢≈ì‚Ä¶ [PodioCache] Salle ${roomName} trouv√É¬©e dans Podio`);
                        const roomInfo = {
                            name: data.salle_code || roomName,
                            pavillon: data.details.Pavillon || '',
                            bassin: data.details.Proprietaire || '',
                            type: data.details["Type de salle"] || '',
                            capacite: data.details["Capacit√É¬©"] || '',
                            source: 'podio'
                        };
                        
                        this.cache.set(roomName, roomInfo);
                        console.log(`√¢≈ì‚Ä¶ [PodioCache] Salle ${roomName} mise en cache (Podio):`, roomInfo);
                        return roomInfo;
                    }
                    
                    // √¢≈°¬†√Ø¬∏¬è PODIO √É‚Ä∞CHEC: Essayer fallback NeonDB pour √É¬©quipements
                    console.log(`√¢≈°¬†√Ø¬∏¬è [PodioCache] Salle ${roomName} non trouv√É¬©e dans Podio √¢‚Ä†‚Äô Tentative fallback NeonDB`);
                    throw new Error('Salle non trouv√É¬©e dans Podio, fallback NeonDB n√É¬©cessaire');
                    
                } catch (error) {
                    console.warn(`√¢≈°¬†√Ø¬∏¬è [PodioCache] √É‚Ä∞chec Podio pour ${roomName}: ${error.message}`);
                    
                    // √¢≈ì‚Ä¶ FALLBACK NEONDB: Essayer de r√É¬©cup√É¬©rer les √É¬©quipements depuis NeonDB
                    try {
                        console.log(`√∞≈∏‚Äù‚Äû [PodioCache] Tentative fallback NeonDB pour salle: ${roomName}`);
                        
                        const neonResponse = await fetch(
                            `${apiUrl}/api/room/equipment?room=${encodeURIComponent(roomName)}`,
                            {
                                method: 'GET',
                                headers: { 'Content-Type': 'application/json' },
                                signal: AbortSignal.timeout(8000) // Timeout plus court pour fallback
                            }
                        );
                        
                        if (neonResponse.ok) {
                            const neonData = await neonResponse.json();
                            if (neonData.success && Array.isArray(neonData.devices)) {
                                console.log(`√¢≈ì‚Ä¶ [PodioCache] Salle ${roomName} trouv√É¬©e via NeonDB (${neonData.devices.length} √É¬©quipements)`);
                                
                                const roomInfo = {
                                    name: roomName,
                                    pavillon: '', // Non disponible via NeonDB
                                    bassin: '',   // Non disponible via NeonDB
                                    type: '',     // Non disponible via NeonDB
                                    capacite: '', // Non disponible via NeonDB
                                    devices: neonData.devices || [],
                                    equipment_count: neonData.count || 0,
                                    source: 'neondb' // √¢≈ì‚Ä¶ Marquer la source
                                };
                                
                                // √∞≈∏‚Äô¬æ Mettre en cache le r√É¬©sultat NeonDB
                                this.cache.set(roomName, roomInfo);
                                
                                // √∞≈∏¬ß¬π Nettoyer cache si n√É¬©cessaire
                                if (this.cache.size > this.maxCacheSize) {
                                    const firstKey = this.cache.keys().next().value;
                                    this.cache.delete(firstKey);
                                    console.log(`√∞≈∏¬ß¬π [PodioCache] Cache nettoy√É¬© - supprim√É¬©: ${firstKey}`);
                                }
                                
                                console.log(`√¢≈ì‚Ä¶ [PodioCache] Salle ${roomName} mise en cache (NeonDB):`, roomInfo);
                                return roomInfo;
                            }
                        }
                        
                        console.log(`√¢¬ù≈í [PodioCache] Fallback NeonDB √É¬©galement √É¬©chou√É¬© pour ${roomName}`);
                        return null; // D√É¬©gradation gracieuse
                        
                    } catch (neonError) {
                        console.warn(`√¢¬ù≈í [PodioCache] Erreur fallback NeonDB pour ${roomName}:`, neonError.message);
                        return null; // D√É¬©gradation gracieuse
                    }
                }
            }
            
            /**
             * Vide le cache manuellement (pour tests)
             */
            clearCache() {
                this.cache.clear();
                console.log('√∞≈∏¬ß¬π [PodioCache] Cache Podio vid√É¬© manuellement');
            }
            
            /**
             * Statistiques du cache
             */
            getStats() {
                return {
                    size: this.cache.size,
                    maxSize: this.maxCacheSize,
                    keys: Array.from(this.cache.keys())
                };
            }
        }
        
        // Instance globale du cache Podio
        const podioRoomCache = new PodioRoomCache();

        // ===== FONCTIONS UTILITAIRES POUR TICKETS =====
        
        /**
         * D√É¬©termine le type de probl√É¬®me bas√É¬© sur le contexte
         */
        function determineProblemType() {
            // Analyser le dernier message ou le contexte pour d√É¬©terminer le type
            const messages = document.querySelectorAll('.message');
            if (messages.length > 0) {
                const lastMessage = messages[messages.length - 1];
                const messageText = lastMessage.textContent.toLowerCase();
                
                if (messageText.includes('audio') || messageText.includes('son') || messageText.includes('microphone') || messageText.includes('haut-parleur')) {
                    return 'audio';
                } else if (messageText.includes('vid√É¬©o') || messageText.includes('projecteur') || messageText.includes('√É¬©cran') || messageText.includes('image')) {
                    return 'vid√É¬©o';
                } else if (messageText.includes('r√É¬©seau') || messageText.includes('internet') || messageText.includes('wifi') || messageText.includes('connexion')) {
                    return 'r√É¬©seau';
                } else {
                    return 'technique';
                }
            }
            return 'technique';
        }
        
        /**
         * G√É¬©n√É¬®re un message g√É¬©n√É¬©rique selon le type de probl√É¬®me
         */
        function getGenericMessage(problemType) {
            const messages = {
                'audio': 'Probl√É¬®me audio signal√É¬© - Microphone, haut-parleurs, volume ou qualit√É¬© sonore',
                'vid√É¬©o': 'Probl√É¬®me vid√É¬©o signal√É¬© - Projecteur, √É¬©cran, qualit√É¬© d\'image ou connectivit√É¬©',
                'r√É¬©seau': 'Probl√É¬®me r√É¬©seau signal√É¬© - Connexion internet, Wi-Fi ou connectivit√É¬© r√É¬©seau',
                'technique': 'Probl√É¬®me technique signal√É¬© - √É‚Ä∞quipement, infrastructure ou maintenance g√É¬©n√É¬©rale'
            };
            
            return messages[problemType] || messages['technique'];
        }

        // ===== FONCTIONS DE TH√ÉÀÜME ET NAVIGATION =====
        
        // Basculer le th√É¬®me
        function toggleTheme() {
            const body = document.body;
            const themeIcon = document.getElementById('themeIcon');
            const themeText = document.getElementById('themeText');
            
            if (body.getAttribute('data-theme') === 'dark') {
                body.removeAttribute('data-theme');
                themeIcon.className = 'fas fa-moon';
                themeText.textContent = 'Mode nuit';
                localStorage.removeItem('theme');
                } else {
                body.setAttribute('data-theme', 'dark');
                themeIcon.className = 'fas fa-sun';
                themeText.textContent = 'Mode jour';
                localStorage.setItem('theme', 'dark');
            }
        }

        // √¢≈ì‚Ä¶ NOUVEAU : Fonctions Mode Technique
        function openTechnicalMode() {
            console.log('√∞≈∏‚Äù¬ß [Technical] Ouverture du mode technique');
            const modal = document.getElementById('technicalAuthModal');
            const passwordInput = document.getElementById('technicalPassword');
            const errorDiv = document.getElementById('technicalAuthError');
            
            // R√É¬©initialiser le modal
            passwordInput.value = '';
            errorDiv.style.display = 'none';
            
            // Afficher le modal
            modal.style.display = 'flex';
            
            // Focus sur le champ de mot de passe
            setTimeout(() => {
                passwordInput.focus();
            }, 100);
        }

        function closeTechnicalAuth() {
            console.log('√∞≈∏‚Äù¬ß [Technical] Fermeture modal authentification');
            const modal = document.getElementById('technicalAuthModal');
            modal.style.display = 'none';
        }

        function handleTechnicalPasswordKeypress(event) {
            if (event.key === 'Enter') {
                submitTechnicalAuth();
            }
        }

        async function submitTechnicalAuth() {
            const passwordInput = document.getElementById('technicalPassword');
            const errorDiv = document.getElementById('technicalAuthError');
            const submitBtn = document.querySelector('.technical-auth-submit');
            const password = passwordInput.value.trim();
            
            console.log('√∞≈∏‚Äù¬ß [Technical] Tentative d\'authentification via API');
            
            if (!password) {
                showTechnicalAuthError('Veuillez saisir le mot de passe');
                return;
            }
            
            // D√É¬©sactiver le bouton pendant la requ√É¬™te
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> V√É¬©rification...';
            
            try {
                const response = await fetch(`${currentAPI}/api/technical/auth`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        password: password
                    })
                });
                
                const data = await response.json();
                console.log('√∞≈∏‚Äù¬ß [Technical] R√É¬©ponse API:', data);
                
                if (data.success) {
                    console.log('√¢≈ì‚Ä¶ [Technical] Authentification r√É¬©ussie');
                    // Stocker le token pour les futures requ√É¬™tes (optionnel)
                    localStorage.setItem('technical_token', data.token);
                    localStorage.setItem('technical_expires', data.expires_at);
                    
                    closeTechnicalAuth();
                    showTechnicalPage();
                } else {
                    console.log('√¢¬ù≈í [Technical] Authentification √É¬©chou√É¬©e:', data.message);
                    showTechnicalAuthError(data.message || 'Mot de passe incorrect');
                }
            } catch (error) {
                console.error('√¢¬ù≈í [Technical] Erreur lors de l\'authentification:', error);
                showTechnicalAuthError('Erreur de connexion au serveur');
            } finally {
                // R√É¬©activer le bouton
                submitBtn.disabled = false;
                submitBtn.innerHTML = '<i class="fas fa-unlock"></i> Acc√É¬©der';
            }
        }

        function showTechnicalAuthError(message) {
            const errorDiv = document.getElementById('technicalAuthError');
            const passwordInput = document.getElementById('technicalPassword');
            
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
            passwordInput.value = '';
            passwordInput.focus();
            
            // Animation de shake sur le modal
            const modal = document.querySelector('.technical-auth-content');
            modal.style.animation = 'shake 0.5s ease-in-out';
            setTimeout(() => {
                modal.style.animation = '';
            }, 500);
        }

        function showTechnicalPage() {
            console.log('√∞≈∏‚Äù¬ß [Technical] Affichage page technique');
            const technicalPage = document.getElementById('technicalPage');
            const mainContainer = document.querySelector('.main-container');
            
            // R√É¬©cup√É¬©rer la salle actuelle pour l'afficher
            const currentRoom = getCurrentRoom();
            const technicalRoomSpan = document.getElementById('technicalCurrentRoom');
            if (technicalRoomSpan) {
                technicalRoomSpan.textContent = currentRoom || 'Non d√É¬©finie';
            }
            
            // Masquer Vitrine et afficher la page technique
            if (mainContainer) {
                mainContainer.style.display = 'none';
            }
            technicalPage.style.display = 'block';
            
            console.log('√∞≈∏‚Äù¬ß [Technical] Page technique affich√É¬©e pour la salle:', currentRoom);
        }

        function returnToVitrine() {
            console.log('√∞≈∏‚Äù¬ß [Technical] Retour √É¬† Vitrine');
            const technicalPage = document.getElementById('technicalPage');
            const mainContainer = document.querySelector('.main-container');
            
            // Masquer la page technique et r√É¬©afficher Vitrine
            technicalPage.style.display = 'none';
            if (mainContainer) {
                mainContainer.style.display = 'block';
            }
            
            console.log('√¢≈ì‚Ä¶ [Technical] Retour √É¬† Vitrine effectu√É¬©');
        }

        // √¢≈ì‚Ä¶ NOUVEAU : Fonctions de gestion de l'overlay de chargement diagnostic
        function showDiagnosticLoading() {
            console.log('√¢¬è¬≥ [Diagnostic] Affichage du chargement');
            const overlay = document.getElementById('diagnosticLoadingOverlay');
            if (overlay) {
                overlay.style.display = 'flex';
                // Petite pause pour la transition CSS
                setTimeout(() => {
                    overlay.classList.add('show');
                }, 10);
            }
        }

        function hideDiagnosticLoading() {
            console.log('√¢≈ì‚Ä¶ [Diagnostic] Masquage du chargement');
            const overlay = document.getElementById('diagnosticLoadingOverlay');
            if (overlay) {
                // √¢≈ì‚Ä¶ CORRECTION : Masquage imm√É¬©diat pour √É¬©viter le retard avec les banni√É¬®res
                overlay.classList.remove('show');
                overlay.style.display = 'none';
            }
        }

        function updateDiagnosticLoadingText(text, subtext = '') {
            const textElement = document.querySelector('.diagnostic-loading-text');
            const subtextElement = document.querySelector('.diagnostic-loading-subtext');
            
            if (textElement) {
                textElement.textContent = text;
            }
            if (subtextElement && subtext) {
                subtextElement.textContent = subtext;
            }
        }

        // Retour √É¬† l'accueil (page des palettes) - PAS la landing page
        function returnToHome() {
            // S'assurer que la page des palettes est visible
            document.getElementById('assistantPage').style.display = 'block';
            document.getElementById('landingPage').style.display = 'none';
            
            // Vider les messages
            const assistantPage = document.getElementById('assistantPage');
            const existingMessages = assistantPage.querySelectorAll('.message');
            existingMessages.forEach(msg => msg.remove());
            
            // √¢≈ì‚Ä¶ NETTOYAGE : Supprimer toutes les banni√É¬®res d'escalade
            const escalationInterfaces = document.querySelectorAll('.escalation-interface');
            escalationInterfaces.forEach(interface => interface.remove());
            
            const escalationCompact = document.querySelectorAll('.escalation-compact');
            escalationCompact.forEach(compact => compact.remove());
            
            // √¢≈ì‚Ä¶ NETTOYAGE : Supprimer tous les messages contenant "Actions automatiques ex√É¬©cut√É¬©es"
            document.querySelectorAll('.message').forEach(message => {
                if (message.textContent && message.textContent.includes('Actions automatiques ex√É¬©cut√É¬©es')) {
                    message.remove();
                }
            });
            
            // Afficher les palettes de probl√É¬®mes avec la grille horizontale
            const problemPalettes = document.getElementById('problemPalettes');
            if (problemPalettes) {
                problemPalettes.style.display = 'grid';
                problemPalettes.style.gridTemplateColumns = 'repeat(auto-fit, minmax(250px, 1fr))';
                problemPalettes.style.gap = '2rem';
            }
            
            // Vider les suggestions
            const suggestionsContainer = document.getElementById('suggestions');
            if (suggestionsContainer) {
                suggestionsContainer.innerHTML = '';
            }
            
            console.log('√∞≈∏¬è¬† Retour √É¬† l\'accueil (page des palettes)');
        }

        // Appliquer le th√É¬®me sauvegard√É¬© au chargement
        document.addEventListener('DOMContentLoaded', () => {
            // √¢≈ì‚Ä¶ INITIALISATION TH√ÉÀÜME ET COULEURS
            const headerTitle = document.getElementById('headerTitle');
            const savedTheme = localStorage.getItem('vitrine-theme');
            
            if (savedTheme === 'dark') {
                document.body.setAttribute('data-theme', 'dark');
                if (headerTitle) headerTitle.style.color = 'black';
            } else {
                document.body.removeAttribute('data-theme');
                if (headerTitle) headerTitle.style.color = 'black';
            }
            
            // √¢≈ì‚Ä¶ NETTOYAGE : Supprimer toutes les banni√É¬®res d'escalade r√É¬©siduelles
            const oldEscalationInterfaces = document.querySelectorAll('.escalation-interface');
            oldEscalationInterfaces.forEach(interface => interface.remove());
            
            const oldEscalationCompact = document.querySelectorAll('.escalation-compact');
            oldEscalationCompact.forEach(compact => compact.remove());
            
            // √¢≈ì‚Ä¶ NETTOYAGE IMM√É‚Ä∞DIAT : Supprimer tous les messages "Actions automatiques ex√É¬©cut√É¬©es"
            setTimeout(() => {
                document.querySelectorAll('.message').forEach(message => {
                    if (message.textContent && message.textContent.includes('Actions automatiques ex√É¬©cut√É¬©es')) {
                        message.remove();
                        console.log('√∞≈∏¬ß¬π Message "Actions automatiques ex√É¬©cut√É¬©es" supprim√É¬© du DOM');
                    }
                });
            }, 100);
            
            // ===== TH√ÉÀÜME HYBRIDE INTELLIGENT =====
            initializeTheme();
            setupThemeListener();
            console.log('√∞≈∏≈Ω¬® [Theme] Syst√É¬®me de th√É¬®me hybride initialis√É¬©');
            
            // ===== VERROUILLAGE DE SALLE =====
            checkAndApplyRoomLock();
            
            // ===== CHAT SEA INITIALISATION =====
            console.log('√∞≈∏‚Äô¬¨ [ChatSEA] Initialisation du syst√É¬®me de chat');
            
            // G√É¬©n√É¬©rer un client_id unique et persistant
            clientID = localStorage.getItem('vitrine.client_id');
            if (!clientID) {
                clientID = generateUUID();
                localStorage.setItem('vitrine.client_id', clientID);
            }
            
            // R√É¬©cup√É¬©rer le kiosk_id depuis l'URL
            const urlParams = new URLSearchParams(window.location.search);
            kioskID = urlParams.get('kiosk');
            
            if (kioskID) {
                console.log('√∞≈∏≈Ω‚Ä∫√Ø¬∏¬è [ChatSEA] Kiosk d√É¬©tect√É¬©:', kioskID);
            }
            
            // √¢≈ì‚Ä¶ CORRIG√É‚Ä∞ : Attendre l'initialisation du backend avant de d√É¬©marrer les EventSource
            if (getCurrentRoom()) {
                backendInitPromise.then(() => {
                    startChatRequestListener();
                    startStatusEventSource();
                });
            }
        });





        // ===== INITIALISATION =====
        console.log('√∞≈∏≈Ω‚Ä∫√Ø¬∏¬è Assistant Salle AV - Syst√É¬®me initialis√É¬©');
        console.log('√∞≈∏‚Äú‚Äπ Fonctionnalit√É¬©s disponibles :');
        console.log('  √¢‚Ç¨¬¢ Saisie obligatoire de salle');
        console.log('  √¢‚Ç¨¬¢ Cache persistant de salle');
        console.log('  √¢‚Ç¨¬¢ Diagnostic audio automatique');
        console.log('  √¢‚Ç¨¬¢ Diagnostic vid√É¬©o automatique');
        console.log('  √¢‚Ç¨¬¢ Redirection r√É¬©seau');
        console.log('  √¢‚Ç¨¬¢ Redirection SIM');
        console.log('  √¢‚Ç¨¬¢ Mode hybride intelligent (clair/sombre)');
        console.log('  √¢‚Ç¨¬¢ D√É¬©tection automatique des pr√É¬©f√É¬©rences syst√É¬®me');
        console.log('  √¢‚Ç¨¬¢ Bouton de retour');
        
        // √¢≈ì‚Ä¶ CONFIGURATION SIMPLIFI√É‚Ä∞E - Pas de surveillance n√É¬©cessaire
        console.log('‚úÖ [Config] Backend unique configur√©');

// ‚úÖ EXPOSITION DES FONCTIONS GLOBALES POUR VITRINE.HTML
// Ces fonctions sont n√©cessaires pour l'interface entre vitrine.html et app.js

// Fonction principale d'initialisation de Vitrine
window.initializeVitrine = function() {
    console.log('üöÄ [initializeVitrine] D√©marrage de l\'application Vitrine');
    
    // Cr√©er l'interface Vitrine
    if (typeof createVitrine === 'function') {
        createVitrine();
        console.log('‚úÖ [initializeVitrine] Interface cr√©√©e');
    } else {
        console.error('‚ùå [initializeVitrine] Fonction createVitrine non trouv√©e');
        return false;
    }
    
    // Initialiser le th√®me
    if (typeof initializeTheme === 'function') {
        initializeTheme();
    }
    
    // V√©rifier si une salle est verrouill√©e
    if (window.__VITRINE_LOCK__ && window.__VITRINE_LOCK__.isLocked()) {
        const lockedRoom = window.__LOCKED_ROOM_NAME__;
        console.log('üîí [initializeVitrine] Salle verrouill√©e d√©tect√©e:', lockedRoom);
        
        // Simuler la confirmation de salle verrouill√©e
        if (typeof setRoomCache === 'function' && typeof parseRoomInfo === 'function') {
            const roomInfo = parseRoomInfo(lockedRoom);
            if (roomInfo) {
                setRoomCache(roomInfo);
                if (typeof showAssistant === 'function') {
                    showAssistant();
                }
            }
        }
    }
    
    console.log('‚úÖ [initializeVitrine] Vitrine initialis√©e avec succ√®s');
    return true;
};

// Fonction de d√©tection du meilleur backend (expos√©e globalement)
window.detectBestBackend = detectBestBackend;

// Fonction pour obtenir l'API courante
window.getCurrentAPI = getCurrentAPI;

// ‚úÖ FONCTION createVitrine BASIQUE (interface HTML)
function createVitrine() {
    // Cr√©er le container principal de l'application
    const container = document.createElement('div');
    container.innerHTML = `
        <div class="main-container">
            <!-- Interface basique de Vitrine -->
            <div class="header">
                <div class="header-top">
                    <button class="technical-btn" onclick="openTechnicalMode()">
                        <i class="fas fa-cog"></i>
                        <span>Technique</span>
                    </button>
                    <button class="theme-toggle" onclick="toggleTheme()">
                        <i class="fas fa-moon" id="themeIcon"></i>
                        <span id="themeText">Mode nuit</span>
                    </button>
                </div>
                <div class="title-section">
                    <img alt="Vitrine" src="https://zine76.github.io/vitrine/assets/Vitrine.png" style="height: 80px;"/>
                    <p id="headerTitle">Diagnostic interactif et assistance audiovisuelle</p>
                </div>
                <div class="status-indicator">
                    <div class="status-dot" id="connection-indicator"></div>
                    <span id="connection-text">Syst√®me op√©rationnel</span>
                </div>
            </div>
            
            <!-- Page d'accueil -->
            <div id="landingPage" class="landing-page">
                <div class="landing-content">
                    <div class="welcome-section">
                        <img src="https://zine76.github.io/vitrine/assets/Vitrine.png" alt="Vitrine" class="welcome-logo">
                        <h2>Bienvenue sur la Vitrine SavQonnect</h2>
                        <p>S√©lectionnez votre salle pour commencer</p>
                    </div>
                    <div class="room-input-container">
                        <input type="text" id="roomInput" placeholder="Ex: A-1750, B-2500" onkeypress="handleRoomKeyPress(event)">
                        <button id="confirmRoomBtn" onclick="confirmRoom()">Confirmer</button>
                    </div>
                </div>
            </div>
            
            <!-- Page assistant -->
            <div id="assistantPage" class="assistant-page" style="display: none;">
                <div class="room-header">
                    <span id="currentRoomDisplay">Salle</span>
                    <button onclick="changeRoom()">Changer de salle</button>
                </div>
                <div class="assistant-content">
                    <div id="problemPalettes" class="problem-palettes">
                        <button onclick="sendExampleMessage('Probl√®me Vid√©o')">Probl√®me Vid√©o</button>
                        <button onclick="sendExampleMessage('Probl√®me Audio')">Probl√®me Audio</button>
                        <button onclick="sendExampleMessage('Probl√®me de r√©seau')">Probl√®me R√©seau</button>
                    </div>
                    <div class="problem-input-section">
                        <input type="text" id="problemInput" placeholder="D√©crivez votre probl√®me...">
                        <button id="sendBtn" onclick="sendProblemReport()">Signaler</button>
                    </div>
                    <div id="suggestions" class="suggestions"></div>
                </div>
            </div>
        </div>
    `;
    
    document.body.appendChild(container);
    console.log('‚úÖ [createVitrine] Interface basique cr√©√©e');
}

console.log('‚úÖ [AppJS] Fonctions globales expos√©es pour vitrine.html');
